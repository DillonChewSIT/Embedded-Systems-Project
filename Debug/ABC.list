
ABC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b4  0800cedc  0800cedc  0001cedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010090  08010090  000300a0  2**0
                  CONTENTS
  4 .ARM          00000000  08010090  08010090  000300a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010090  08010090  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010090  08010090  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010094  08010094  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08010098  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a0  2**0
                  CONTENTS
 10 .bss          00003a0c  200000a0  200000a0  000300a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003aac  20003aac  000300a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cac7  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000393a  00000000  00000000  0004cb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  000504d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  00051a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024186  00000000  00000000  00052e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0bc  00000000  00000000  00076ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d12b4  00000000  00000000  000940b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165366  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006798  00000000  00000000  001653b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cec4 	.word	0x0800cec4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800cec4 	.word	0x0800cec4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <ClearAllData>:
 * esp_webserver_uart_ring_buffer.c
 *
 */
#include "esp_webserver_uart_ring_buffer_pixy.h"

void ClearAllData(uint8_t nUART){
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	uartState[nUART].dataSize = 0;
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <ClearAllData+0xa0>)
 8000aea:	214c      	movs	r1, #76	; 0x4c
 8000aec:	fb01 f303 	mul.w	r3, r1, r3
 8000af0:	4413      	add	r3, r2
 8000af2:	331c      	adds	r3, #28
 8000af4:	2200      	movs	r2, #0
 8000af6:	801a      	strh	r2, [r3, #0]
	uartState[nUART].rxCircArrayPtr = 0;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <ClearAllData+0xa0>)
 8000afc:	214c      	movs	r1, #76	; 0x4c
 8000afe:	fb01 f303 	mul.w	r3, r1, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	3322      	adds	r3, #34	; 0x22
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
	uartState[nUART].txCircArrayPtr = 0;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <ClearAllData+0xa0>)
 8000b0e:	214c      	movs	r1, #76	; 0x4c
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	3323      	adds	r3, #35	; 0x23
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	uartState[nUART].rxbuffDex = 0;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <ClearAllData+0xa0>)
 8000b20:	214c      	movs	r1, #76	; 0x4c
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	331e      	adds	r3, #30
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	801a      	strh	r2, [r3, #0]
	uartState[nUART].remainSize = MaxBufferSize;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <ClearAllData+0xa0>)
 8000b32:	214c      	movs	r1, #76	; 0x4c
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	3320      	adds	r3, #32
 8000b3c:	f241 1295 	movw	r2, #4501	; 0x1195
 8000b40:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < CircSize; ++i)
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e00f      	b.n	8000b68 <ClearAllData+0x8c>
	{
		uartState[nUART].circArray[i][Sz] = 0;
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	7bf9      	ldrb	r1, [r7, #15]
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <ClearAllData+0xa0>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4403      	add	r3, r0
 8000b5e:	2200      	movs	r2, #0
 8000b60:	84da      	strh	r2, [r3, #38]	; 0x26
	for (uint8_t i = 0; i < CircSize; ++i)
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	3301      	adds	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	2b09      	cmp	r3, #9
 8000b6c:	d9ec      	bls.n	8000b48 <ClearAllData+0x6c>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	200039a8 	.word	0x200039a8

08000b80 <StartReceiver>:

void StartReceiver(uint8_t nUART)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	HAL_UARTEx_ReceiveToIdle_DMA(uartState[nUART].huartAdd, uartState[nUART].rxbufferAdd+uartState[nUART].rxbuffDex, uartState[nUART].remainSize);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <StartReceiver+0x98>)
 8000b8e:	214c      	movs	r1, #76	; 0x4c
 8000b90:	fb01 f303 	mul.w	r3, r1, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <StartReceiver+0x98>)
 8000b9c:	214c      	movs	r1, #76	; 0x4c
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3314      	adds	r3, #20
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	491b      	ldr	r1, [pc, #108]	; (8000c18 <StartReceiver+0x98>)
 8000bac:	244c      	movs	r4, #76	; 0x4c
 8000bae:	fb04 f202 	mul.w	r2, r4, r2
 8000bb2:	440a      	add	r2, r1
 8000bb4:	321e      	adds	r2, #30
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	1899      	adds	r1, r3, r2
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <StartReceiver+0x98>)
 8000bbe:	244c      	movs	r4, #76	; 0x4c
 8000bc0:	fb04 f303 	mul.w	r3, r4, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3320      	adds	r3, #32
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f00a fa39 	bl	800b042 <HAL_UARTEx_ReceiveToIdle_DMA>
	uartState[nUART].rxdmaAdd->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <StartReceiver+0x98>)
 8000bd4:	214c      	movs	r1, #76	; 0x4c
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	3304      	adds	r3, #4
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	490c      	ldr	r1, [pc, #48]	; (8000c18 <StartReceiver+0x98>)
 8000be8:	204c      	movs	r0, #76	; 0x4c
 8000bea:	fb00 f303 	mul.w	r3, r0, r3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0206 	bic.w	r2, r2, #6
 8000bfa:	601a      	str	r2, [r3, #0]
	uartState[nUART].rxState = Receiving;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <StartReceiver+0x98>)
 8000c00:	214c      	movs	r1, #76	; 0x4c
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	3318      	adds	r3, #24
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200039a8 	.word	0x200039a8

08000c1c <Transmit>:

void Transmit(uint8_t nUART, uint8_t* buffer, uint16_t index, uint16_t size, uint8_t updateCirc){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	4611      	mov	r1, r2
 8000c26:	461a      	mov	r2, r3
 8000c28:	4603      	mov	r3, r0
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	81bb      	strh	r3, [r7, #12]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80fb      	strh	r3, [r7, #6]
	uint8_t txHandle = uartState[nUART].txDex;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	4a46      	ldr	r2, [pc, #280]	; (8000d50 <Transmit+0x134>)
 8000c38:	214c      	movs	r1, #76	; 0x4c
 8000c3a:	fb01 f303 	mul.w	r3, r1, r3
 8000c3e:	4413      	add	r3, r2
 8000c40:	330c      	adds	r3, #12
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit_DMA(uartState[nUART].huartAdd, buffer + index, size);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	4a41      	ldr	r2, [pc, #260]	; (8000d50 <Transmit+0x134>)
 8000c4a:	214c      	movs	r1, #76	; 0x4c
 8000c4c:	fb01 f303 	mul.w	r3, r1, r3
 8000c50:	4413      	add	r3, r2
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	89bb      	ldrh	r3, [r7, #12]
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4413      	add	r3, r2
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f008 ff15 	bl	8009a8c <HAL_UART_Transmit_DMA>
	uartState[nUART].txdmaAdd->Instance->CCR &= ~(DMA_IT_HT);
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <Transmit+0x134>)
 8000c66:	214c      	movs	r1, #76	; 0x4c
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3308      	adds	r3, #8
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	4935      	ldr	r1, [pc, #212]	; (8000d50 <Transmit+0x134>)
 8000c7a:	204c      	movs	r0, #76	; 0x4c
 8000c7c:	fb00 f303 	mul.w	r3, r0, r3
 8000c80:	440b      	add	r3, r1
 8000c82:	3308      	adds	r3, #8
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0204 	bic.w	r2, r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
	uartState[nUART].txState = Transmitting;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4a2f      	ldr	r2, [pc, #188]	; (8000d50 <Transmit+0x134>)
 8000c92:	214c      	movs	r1, #76	; 0x4c
 8000c94:	fb01 f303 	mul.w	r3, r1, r3
 8000c98:	4413      	add	r3, r2
 8000c9a:	3319      	adds	r3, #25
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	701a      	strb	r2, [r3, #0]
	if (updateCirc == TRUE){
 8000ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d13b      	bne.n	8000d20 <Transmit+0x104>
		uartState[txHandle].circArray[uartState[txHandle].txCircArrayPtr][Sz] = 0;
 8000ca8:	7dfa      	ldrb	r2, [r7, #23]
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	4928      	ldr	r1, [pc, #160]	; (8000d50 <Transmit+0x134>)
 8000cae:	204c      	movs	r0, #76	; 0x4c
 8000cb0:	fb00 f303 	mul.w	r3, r0, r3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3323      	adds	r3, #35	; 0x23
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	4924      	ldr	r1, [pc, #144]	; (8000d50 <Transmit+0x134>)
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4403      	add	r3, r0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	84da      	strh	r2, [r3, #38]	; 0x26
		if ((uartState[txHandle].txCircArrayPtr) == (CircSize-1)){
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <Transmit+0x134>)
 8000cd6:	214c      	movs	r1, #76	; 0x4c
 8000cd8:	fb01 f303 	mul.w	r3, r1, r3
 8000cdc:	4413      	add	r3, r2
 8000cde:	3323      	adds	r3, #35	; 0x23
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b09      	cmp	r3, #9
 8000ce4:	d109      	bne.n	8000cfa <Transmit+0xde>
			uartState[txHandle].txCircArrayPtr = 0;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <Transmit+0x134>)
 8000cea:	214c      	movs	r1, #76	; 0x4c
 8000cec:	fb01 f303 	mul.w	r3, r1, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3323      	adds	r3, #35	; 0x23
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e012      	b.n	8000d20 <Transmit+0x104>
		}
		else{
			uartState[txHandle].txCircArrayPtr+=1;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <Transmit+0x134>)
 8000cfe:	214c      	movs	r1, #76	; 0x4c
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	3323      	adds	r3, #35	; 0x23
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	3201      	adds	r2, #1
 8000d0e:	b2d0      	uxtb	r0, r2
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <Transmit+0x134>)
 8000d12:	214c      	movs	r1, #76	; 0x4c
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	3323      	adds	r3, #35	; 0x23
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (uartState[nUART].rxState == Wait){
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <Transmit+0x134>)
 8000d24:	214c      	movs	r1, #76	; 0x4c
 8000d26:	fb01 f303 	mul.w	r3, r1, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d108      	bne.n	8000d46 <Transmit+0x12a>
		uartState[nUART].rxState = GotData;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <Transmit+0x134>)
 8000d38:	214c      	movs	r1, #76	; 0x4c
 8000d3a:	fb01 f303 	mul.w	r3, r1, r3
 8000d3e:	4413      	add	r3, r2
 8000d40:	3318      	adds	r3, #24
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
	}
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200039a8 	.word	0x200039a8

08000d54 <TransmitESP>:

void TransmitESP(uint8_t* buffer, uint16_t size, uint8_t updateCirc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
	//printf("%s",buffer);
	HAL_UART_Transmit_DMA(uartState[UART1].huartAdd, buffer, size);
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <TransmitESP+0x88>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	887a      	ldrh	r2, [r7, #2]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f008 fe8d 	bl	8009a8c <HAL_UART_Transmit_DMA>
	uartState[UART1].txdmaAdd->Instance->CCR &= ~(DMA_IT_HT);
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <TransmitESP+0x88>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <TransmitESP+0x88>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0204 	bic.w	r2, r2, #4
 8000d84:	601a      	str	r2, [r3, #0]
	uartState[UART1].txState = Transmitting;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <TransmitESP+0x88>)
 8000d88:	2204      	movs	r2, #4
 8000d8a:	765a      	strb	r2, [r3, #25]
	if (updateCirc == TRUE){
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d119      	bne.n	8000dc6 <TransmitESP+0x72>
		uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz] = 0;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <TransmitESP+0x88>)
 8000d94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <TransmitESP+0x88>)
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	2200      	movs	r2, #0
 8000da0:	84da      	strh	r2, [r3, #38]	; 0x26
		if ((uartState[UART1].txCircArrayPtr) == (CircSize-1)){
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <TransmitESP+0x88>)
 8000da4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d104      	bne.n	8000db6 <TransmitESP+0x62>
			uartState[UART1].txCircArrayPtr = 0;
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <TransmitESP+0x88>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000db4:	e007      	b.n	8000dc6 <TransmitESP+0x72>
		}
		else {
			uartState[UART1].txCircArrayPtr+=1;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <TransmitESP+0x88>)
 8000db8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <TransmitESP+0x88>)
 8000dc2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
	}
	if (uartState[UART1].rxState == Wait){
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <TransmitESP+0x88>)
 8000dc8:	7e1b      	ldrb	r3, [r3, #24]
 8000dca:	2b05      	cmp	r3, #5
 8000dcc:	d102      	bne.n	8000dd4 <TransmitESP+0x80>
		uartState[UART1].rxState = GotData;
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <TransmitESP+0x88>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	761a      	strb	r2, [r3, #24]
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200039a8 	.word	0x200039a8

08000de0 <TransmitMOT>:

void TransmitMOT(uint8_t* buffer, uint16_t size, uint8_t updateCirc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	707b      	strb	r3, [r7, #1]
	//printf("%s",buffer);
	HAL_UART_Transmit_DMA(uartState[UART2].huartAdd, buffer, size);
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <TransmitMOT+0x90>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	887a      	ldrh	r2, [r7, #2]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 fe47 	bl	8009a8c <HAL_UART_Transmit_DMA>
	uartState[UART2].txdmaAdd->Instance->CCR &= ~(DMA_IT_HT);
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <TransmitMOT+0x90>)
 8000e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <TransmitMOT+0x90>)
 8000e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0204 	bic.w	r2, r2, #4
 8000e10:	601a      	str	r2, [r3, #0]
	uartState[UART2].txState = Transmitting;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <TransmitMOT+0x90>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	if (updateCirc == TRUE){
 8000e1a:	787b      	ldrb	r3, [r7, #1]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d11a      	bne.n	8000e56 <TransmitMOT+0x76>
		uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz] = 0;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <TransmitMOT+0x90>)
 8000e22:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <TransmitMOT+0x90>)
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		if ((uartState[UART2].txCircArrayPtr) == (CircSize-1)){
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <TransmitMOT+0x90>)
 8000e34:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	d104      	bne.n	8000e46 <TransmitMOT+0x66>
			uartState[UART2].txCircArrayPtr = 0;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <TransmitMOT+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8000e44:	e007      	b.n	8000e56 <TransmitMOT+0x76>
		}
		else {
			uartState[UART2].txCircArrayPtr+=1;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <TransmitMOT+0x90>)
 8000e48:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <TransmitMOT+0x90>)
 8000e52:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
		}
	}
	if (uartState[UART2].rxState == Wait){
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <TransmitMOT+0x90>)
 8000e58:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d103      	bne.n	8000e68 <TransmitMOT+0x88>
		uartState[UART2].rxState = GotData;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <TransmitMOT+0x90>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200039a8 	.word	0x200039a8

08000e74 <RecordIntoCirc>:
void RecordIntoCirc(uint8_t nUART, uint8_t delimiter)
{
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	uint8_t iDex = uartState[nUART].rxCircArrayPtr;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4aa6      	ldr	r2, [pc, #664]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000e88:	214c      	movs	r1, #76	; 0x4c
 8000e8a:	fb01 f303 	mul.w	r3, r1, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	3322      	adds	r3, #34	; 0x22
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	73fb      	strb	r3, [r7, #15]
	if ((uartState[nUART].circArray[iDex][Sz]) == 0){
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	7bf9      	ldrb	r1, [r7, #15]
 8000e9a:	48a1      	ldr	r0, [pc, #644]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4403      	add	r3, r0
 8000eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8128 	bne.w	8001104 <RecordIntoCirc+0x290>
		uartState[nUART].circArray[iDex][Index] = uartState[nUART].rxbuffDex;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	7bf9      	ldrb	r1, [r7, #15]
 8000eba:	4899      	ldr	r0, [pc, #612]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000ebc:	244c      	movs	r4, #76	; 0x4c
 8000ebe:	fb04 f303 	mul.w	r3, r4, r3
 8000ec2:	4403      	add	r3, r0
 8000ec4:	331e      	adds	r3, #30
 8000ec6:	881c      	ldrh	r4, [r3, #0]
 8000ec8:	4895      	ldr	r0, [pc, #596]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4403      	add	r3, r0
 8000edc:	4622      	mov	r2, r4
 8000ede:	809a      	strh	r2, [r3, #4]
		uartState[nUART].circArray[iDex][Sz] = uartState[nUART].dataSize;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	79fa      	ldrb	r2, [r7, #7]
 8000ee4:	7bf9      	ldrb	r1, [r7, #15]
 8000ee6:	488e      	ldr	r0, [pc, #568]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000ee8:	244c      	movs	r4, #76	; 0x4c
 8000eea:	fb04 f303 	mul.w	r3, r4, r3
 8000eee:	4403      	add	r3, r0
 8000ef0:	331c      	adds	r3, #28
 8000ef2:	881c      	ldrh	r4, [r3, #0]
 8000ef4:	488a      	ldr	r0, [pc, #552]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4403      	add	r3, r0
 8000f06:	4622      	mov	r2, r4
 8000f08:	84da      	strh	r2, [r3, #38]	; 0x26

		if (iDex == CircSize-1){uartState[nUART].rxCircArrayPtr = 0;}
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d109      	bne.n	8000f24 <RecordIntoCirc+0xb0>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a83      	ldr	r2, [pc, #524]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f14:	214c      	movs	r1, #76	; 0x4c
 8000f16:	fb01 f303 	mul.w	r3, r1, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3322      	adds	r3, #34	; 0x22
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e012      	b.n	8000f4a <RecordIntoCirc+0xd6>
		else {uartState[nUART].rxCircArrayPtr += 1;}
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4a7e      	ldr	r2, [pc, #504]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f28:	214c      	movs	r1, #76	; 0x4c
 8000f2a:	fb01 f303 	mul.w	r3, r1, r3
 8000f2e:	4413      	add	r3, r2
 8000f30:	3322      	adds	r3, #34	; 0x22
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	3201      	adds	r2, #1
 8000f38:	b2d0      	uxtb	r0, r2
 8000f3a:	4a79      	ldr	r2, [pc, #484]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f3c:	214c      	movs	r1, #76	; 0x4c
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	3322      	adds	r3, #34	; 0x22
 8000f46:	4602      	mov	r2, r0
 8000f48:	701a      	strb	r2, [r3, #0]
		uartState[nUART].rxbuffDex += uartState[nUART].dataSize;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4a74      	ldr	r2, [pc, #464]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f4e:	214c      	movs	r1, #76	; 0x4c
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	331e      	adds	r3, #30
 8000f58:	8819      	ldrh	r1, [r3, #0]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4a70      	ldr	r2, [pc, #448]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f5e:	204c      	movs	r0, #76	; 0x4c
 8000f60:	fb00 f303 	mul.w	r3, r0, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	331c      	adds	r3, #28
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	440a      	add	r2, r1
 8000f6e:	b290      	uxth	r0, r2
 8000f70:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f72:	214c      	movs	r1, #76	; 0x4c
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	331e      	adds	r3, #30
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	801a      	strh	r2, [r3, #0]
		if (delimiter)
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d070      	beq.n	8001068 <RecordIntoCirc+0x1f4>
//				uartState[nUART].circArray[iDex][Index]+=1;
//				uartState[nUART].circArray[iDex][Sz]+=1;
//				uartState[nUART].dataSize+=1;
//			}
//			else {
				uartState[nUART].rxbufferAdd[uartState[nUART].rxbuffDex] = 0;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4a65      	ldr	r2, [pc, #404]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f8a:	214c      	movs	r1, #76	; 0x4c
 8000f8c:	fb01 f303 	mul.w	r3, r1, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	3314      	adds	r3, #20
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	4961      	ldr	r1, [pc, #388]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000f9a:	204c      	movs	r0, #76	; 0x4c
 8000f9c:	fb00 f202 	mul.w	r2, r0, r2
 8000fa0:	440a      	add	r2, r1
 8000fa2:	321e      	adds	r2, #30
 8000fa4:	8812      	ldrh	r2, [r2, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
				uartState[nUART].rxbuffDex+=1;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a5c      	ldr	r2, [pc, #368]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000fb0:	214c      	movs	r1, #76	; 0x4c
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	331e      	adds	r3, #30
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3201      	adds	r2, #1
 8000fc0:	b290      	uxth	r0, r2
 8000fc2:	4a57      	ldr	r2, [pc, #348]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000fc4:	214c      	movs	r1, #76	; 0x4c
 8000fc6:	fb01 f303 	mul.w	r3, r1, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	331e      	adds	r3, #30
 8000fce:	4602      	mov	r2, r0
 8000fd0:	801a      	strh	r2, [r3, #0]
				uartState[nUART].dataSize +=1;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000fd6:	214c      	movs	r1, #76	; 0x4c
 8000fd8:	fb01 f303 	mul.w	r3, r1, r3
 8000fdc:	4413      	add	r3, r2
 8000fde:	331c      	adds	r3, #28
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	b290      	uxth	r0, r2
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000fea:	214c      	movs	r1, #76	; 0x4c
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	331c      	adds	r3, #28
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	801a      	strh	r2, [r3, #0]
				uartState[nUART].circArray[iDex][Index]+=1;
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	7bf9      	ldrb	r1, [r7, #15]
 8000ffc:	4848      	ldr	r0, [pc, #288]	; (8001120 <RecordIntoCirc+0x2ac>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	440b      	add	r3, r1
 800100a:	3308      	adds	r3, #8
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4403      	add	r3, r0
 8001010:	889b      	ldrh	r3, [r3, #4]
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	3301      	adds	r3, #1
 8001018:	b29c      	uxth	r4, r3
 800101a:	4841      	ldr	r0, [pc, #260]	; (8001120 <RecordIntoCirc+0x2ac>)
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	440b      	add	r3, r1
 8001028:	3308      	adds	r3, #8
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4403      	add	r3, r0
 800102e:	4622      	mov	r2, r4
 8001030:	809a      	strh	r2, [r3, #4]
				uartState[nUART].circArray[iDex][Sz]+=1;
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	7bf9      	ldrb	r1, [r7, #15]
 8001036:	483a      	ldr	r0, [pc, #232]	; (8001120 <RecordIntoCirc+0x2ac>)
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	440b      	add	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4403      	add	r3, r0
 8001048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	7bf9      	ldrb	r1, [r7, #15]
 800104e:	3301      	adds	r3, #1
 8001050:	b29c      	uxth	r4, r3
 8001052:	4833      	ldr	r0, [pc, #204]	; (8001120 <RecordIntoCirc+0x2ac>)
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	440b      	add	r3, r1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4403      	add	r3, r0
 8001064:	4622      	mov	r2, r4
 8001066:	84da      	strh	r2, [r3, #38]	; 0x26
			//}
		}
		if (uartState[nUART].rxbuffDex > BuffRewindLimit){
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <RecordIntoCirc+0x2ac>)
 800106c:	214c      	movs	r1, #76	; 0x4c
 800106e:	fb01 f303 	mul.w	r3, r1, r3
 8001072:	4413      	add	r3, r2
 8001074:	331e      	adds	r3, #30
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800107c:	4293      	cmp	r3, r2
 800107e:	d913      	bls.n	80010a8 <RecordIntoCirc+0x234>
			uartState[nUART].rxbuffDex = 0;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <RecordIntoCirc+0x2ac>)
 8001084:	214c      	movs	r1, #76	; 0x4c
 8001086:	fb01 f303 	mul.w	r3, r1, r3
 800108a:	4413      	add	r3, r2
 800108c:	331e      	adds	r3, #30
 800108e:	2200      	movs	r2, #0
 8001090:	801a      	strh	r2, [r3, #0]
			uartState[nUART].remainSize = MaxBufferSize;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <RecordIntoCirc+0x2ac>)
 8001096:	214c      	movs	r1, #76	; 0x4c
 8001098:	fb01 f303 	mul.w	r3, r1, r3
 800109c:	4413      	add	r3, r2
 800109e:	3320      	adds	r3, #32
 80010a0:	f241 1295 	movw	r2, #4501	; 0x1195
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	e01a      	b.n	80010de <RecordIntoCirc+0x26a>
		}
		else {
			uartState[nUART].remainSize -= uartState[nUART].dataSize;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <RecordIntoCirc+0x2ac>)
 80010ac:	214c      	movs	r1, #76	; 0x4c
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	3320      	adds	r3, #32
 80010b6:	8819      	ldrh	r1, [r3, #0]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <RecordIntoCirc+0x2ac>)
 80010bc:	204c      	movs	r0, #76	; 0x4c
 80010be:	fb00 f303 	mul.w	r3, r0, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	331c      	adds	r3, #28
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	1a8a      	subs	r2, r1, r2
 80010cc:	b290      	uxth	r0, r2
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <RecordIntoCirc+0x2ac>)
 80010d0:	214c      	movs	r1, #76	; 0x4c
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	4413      	add	r3, r2
 80010d8:	3320      	adds	r3, #32
 80010da:	4602      	mov	r2, r0
 80010dc:	801a      	strh	r2, [r3, #0]
		}
		uartState[nUART].dataSize = 0;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <RecordIntoCirc+0x2ac>)
 80010e2:	214c      	movs	r1, #76	; 0x4c
 80010e4:	fb01 f303 	mul.w	r3, r1, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	331c      	adds	r3, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
		uartState[nUART].rxState = Idle;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <RecordIntoCirc+0x2ac>)
 80010f4:	214c      	movs	r1, #76	; 0x4c
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	3318      	adds	r3, #24
 80010fe:	2202      	movs	r2, #2
 8001100:	701a      	strb	r2, [r3, #0]
	}
	else {uartState[nUART].rxState = Wait;}
}
 8001102:	e008      	b.n	8001116 <RecordIntoCirc+0x2a2>
	else {uartState[nUART].rxState = Wait;}
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4a06      	ldr	r2, [pc, #24]	; (8001120 <RecordIntoCirc+0x2ac>)
 8001108:	214c      	movs	r1, #76	; 0x4c
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	3318      	adds	r3, #24
 8001112:	2205      	movs	r2, #5
 8001114:	701a      	strb	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bc90      	pop	{r4, r7}
 800111e:	4770      	bx	lr
 8001120:	200039a8 	.word	0x200039a8

08001124 <PrintError>:

void PrintError(uint8_t errorCode, uint8_t nUART)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
	switch(errorCode){
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	3b01      	subs	r3, #1
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d86b      	bhi.n	8001214 <PrintError+0xf0>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <PrintError+0x20>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	080011c5 	.word	0x080011c5
 8001148:	080011cd 	.word	0x080011cd
 800114c:	08001215 	.word	0x08001215
 8001150:	080011d5 	.word	0x080011d5
 8001154:	08001215 	.word	0x08001215
 8001158:	080011f5 	.word	0x080011f5
 800115c:	08001215 	.word	0x08001215
 8001160:	080011dd 	.word	0x080011dd
 8001164:	08001215 	.word	0x08001215
 8001168:	080011fd 	.word	0x080011fd
 800116c:	08001215 	.word	0x08001215
 8001170:	08001205 	.word	0x08001205
 8001174:	08001215 	.word	0x08001215
 8001178:	0800120d 	.word	0x0800120d
 800117c:	08001215 	.word	0x08001215
 8001180:	080011e5 	.word	0x080011e5
 8001184:	08001215 	.word	0x08001215
 8001188:	08001215 	.word	0x08001215
 800118c:	08001215 	.word	0x08001215
 8001190:	08001215 	.word	0x08001215
 8001194:	08001215 	.word	0x08001215
 8001198:	08001215 	.word	0x08001215
 800119c:	08001215 	.word	0x08001215
 80011a0:	08001215 	.word	0x08001215
 80011a4:	08001215 	.word	0x08001215
 80011a8:	08001215 	.word	0x08001215
 80011ac:	08001215 	.word	0x08001215
 80011b0:	08001215 	.word	0x08001215
 80011b4:	08001215 	.word	0x08001215
 80011b8:	08001215 	.word	0x08001215
 80011bc:	08001215 	.word	0x08001215
 80011c0:	080011ed 	.word	0x080011ed
	case 0b00000001: printf("Parity Error\r\n");break;
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <PrintError+0x100>)
 80011c6:	f00a f857 	bl	800b278 <puts>
 80011ca:	e027      	b.n	800121c <PrintError+0xf8>
	case 0b00000010: printf("Noise Error\r\n");break;
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <PrintError+0x104>)
 80011ce:	f00a f853 	bl	800b278 <puts>
 80011d2:	e023      	b.n	800121c <PrintError+0xf8>
	case 0b00000100: printf("Frame Error\r\n");break;
 80011d4:	4815      	ldr	r0, [pc, #84]	; (800122c <PrintError+0x108>)
 80011d6:	f00a f84f 	bl	800b278 <puts>
 80011da:	e01f      	b.n	800121c <PrintError+0xf8>
	case 0b00001000: printf("Overrun Error\r\n");break;
 80011dc:	4814      	ldr	r0, [pc, #80]	; (8001230 <PrintError+0x10c>)
 80011de:	f00a f84b 	bl	800b278 <puts>
 80011e2:	e01b      	b.n	800121c <PrintError+0xf8>
	case 0b00010000: printf("DMA Error\r\n");break;
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <PrintError+0x110>)
 80011e6:	f00a f847 	bl	800b278 <puts>
 80011ea:	e017      	b.n	800121c <PrintError+0xf8>
	case 0b00100000: printf("Receiver Timeout Error\r\n");break;
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <PrintError+0x114>)
 80011ee:	f00a f843 	bl	800b278 <puts>
 80011f2:	e013      	b.n	800121c <PrintError+0xf8>
	case 0b00000110: printf("Noise and Frame Error\r\n");break;
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <PrintError+0x118>)
 80011f6:	f00a f83f 	bl	800b278 <puts>
 80011fa:	e00f      	b.n	800121c <PrintError+0xf8>
	case 0b00001010: printf("Overrun and Noise Error\r\n");break;
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <PrintError+0x11c>)
 80011fe:	f00a f83b 	bl	800b278 <puts>
 8001202:	e00b      	b.n	800121c <PrintError+0xf8>
	case 0b00001100: printf("Overrun and Frame Error\r\n");break;
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <PrintError+0x120>)
 8001206:	f00a f837 	bl	800b278 <puts>
 800120a:	e007      	b.n	800121c <PrintError+0xf8>
	case 0b00001110: printf("Overrun, Frame and Noise Error\r\n");break;
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <PrintError+0x124>)
 800120e:	f00a f833 	bl	800b278 <puts>
 8001212:	e003      	b.n	800121c <PrintError+0xf8>
	default:		 printf("Unknown Error\r\n");break;
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <PrintError+0x128>)
 8001216:	f00a f82f 	bl	800b278 <puts>
 800121a:	bf00      	nop
 	}
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	0800cedc 	.word	0x0800cedc
 8001228:	0800ceec 	.word	0x0800ceec
 800122c:	0800cefc 	.word	0x0800cefc
 8001230:	0800cf0c 	.word	0x0800cf0c
 8001234:	0800cf1c 	.word	0x0800cf1c
 8001238:	0800cf28 	.word	0x0800cf28
 800123c:	0800cf40 	.word	0x0800cf40
 8001240:	0800cf58 	.word	0x0800cf58
 8001244:	0800cf74 	.word	0x0800cf74
 8001248:	0800cf90 	.word	0x0800cf90
 800124c:	0800cfb0 	.word	0x0800cfb0

08001250 <MotorRequestHandle>:
 *  Created on: Mar 30, 2023
 *      Author: dillo
 */
#include "esp_webserver_uart_ring_buffer_pixy.h"

void MotorRequestHandle(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
	uint8_t circPtr = uartState[UART2].txCircArrayPtr;
 8001256:	4baf      	ldr	r3, [pc, #700]	; (8001514 <MotorRequestHandle+0x2c4>)
 8001258:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800125c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t buffIdx = uartState[UART2].circArray[circPtr][Index];
 8001260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001264:	4aab      	ldr	r2, [pc, #684]	; (8001514 <MotorRequestHandle+0x2c4>)
 8001266:	331b      	adds	r3, #27
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	84bb      	strh	r3, [r7, #36]	; 0x24
	char* buf = (char*)&(uartState[UART2].rxbufferAdd[buffIdx]);
 8001270:	4ba8      	ldr	r3, [pc, #672]	; (8001514 <MotorRequestHandle+0x2c4>)
 8001272:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001276:	4413      	add	r3, r2
 8001278:	623b      	str	r3, [r7, #32]
	memset(leftmotbuff, 0, 20);
 800127a:	2214      	movs	r2, #20
 800127c:	2100      	movs	r1, #0
 800127e:	48a6      	ldr	r0, [pc, #664]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001280:	f009 ff6c 	bl	800b15c <memset>
	memset(rightmotbuff, 0, 20);
 8001284:	2214      	movs	r2, #20
 8001286:	2100      	movs	r1, #0
 8001288:	48a4      	ldr	r0, [pc, #656]	; (800151c <MotorRequestHandle+0x2cc>)
 800128a:	f009 ff67 	bl	800b15c <memset>
	memcpy(leftmotbuff, LEFTMOT, 6);
 800128e:	2206      	movs	r2, #6
 8001290:	49a3      	ldr	r1, [pc, #652]	; (8001520 <MotorRequestHandle+0x2d0>)
 8001292:	48a1      	ldr	r0, [pc, #644]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001294:	f009 ff54 	bl	800b140 <memcpy>
	memcpy(rightmotbuff, RIGHTMOT, 7);
 8001298:	2207      	movs	r2, #7
 800129a:	49a2      	ldr	r1, [pc, #648]	; (8001524 <MotorRequestHandle+0x2d4>)
 800129c:	489f      	ldr	r0, [pc, #636]	; (800151c <MotorRequestHandle+0x2cc>)
 800129e:	f009 ff4f 	bl	800b140 <memcpy>

	if(strstr(buf, "at+start\r\n") !=NULL)
 80012a2:	49a1      	ldr	r1, [pc, #644]	; (8001528 <MotorRequestHandle+0x2d8>)
 80012a4:	6a38      	ldr	r0, [r7, #32]
 80012a6:	f00a f888 	bl	800b3ba <strstr>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d04d      	beq.n	800134c <MotorRequestHandle+0xfc>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	489e      	ldr	r0, [pc, #632]	; (800152c <MotorRequestHandle+0x2dc>)
 80012b4:	f007 fb26 	bl	8008904 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012b8:	2108      	movs	r1, #8
 80012ba:	489c      	ldr	r0, [pc, #624]	; (800152c <MotorRequestHandle+0x2dc>)
 80012bc:	f007 fb22 	bl	8008904 <HAL_TIM_PWM_Start>
		int left = motorState.leftSpd;
 80012c0:	4b9b      	ldr	r3, [pc, #620]	; (8001530 <MotorRequestHandle+0x2e0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	607b      	str	r3, [r7, #4]
		int right = motorState.rightSpd;
 80012c6:	4b9a      	ldr	r3, [pc, #616]	; (8001530 <MotorRequestHandle+0x2e0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	603b      	str	r3, [r7, #0]
		sprintf(leftmotbuff+strlen(leftmotbuff), "%d", left);
 80012cc:	4892      	ldr	r0, [pc, #584]	; (8001518 <MotorRequestHandle+0x2c8>)
 80012ce:	f7fe ff91 	bl	80001f4 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a90      	ldr	r2, [pc, #576]	; (8001518 <MotorRequestHandle+0x2c8>)
 80012d6:	4413      	add	r3, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4996      	ldr	r1, [pc, #600]	; (8001534 <MotorRequestHandle+0x2e4>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f009 ffd3 	bl	800b288 <siprintf>
		strcpy(leftmotbuff+strlen(leftmotbuff), "\r\n");
 80012e2:	488d      	ldr	r0, [pc, #564]	; (8001518 <MotorRequestHandle+0x2c8>)
 80012e4:	f7fe ff86 	bl	80001f4 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a8b      	ldr	r2, [pc, #556]	; (8001518 <MotorRequestHandle+0x2c8>)
 80012ec:	4413      	add	r3, r2
 80012ee:	4a92      	ldr	r2, [pc, #584]	; (8001538 <MotorRequestHandle+0x2e8>)
 80012f0:	8811      	ldrh	r1, [r2, #0]
 80012f2:	7892      	ldrb	r2, [r2, #2]
 80012f4:	8019      	strh	r1, [r3, #0]
 80012f6:	709a      	strb	r2, [r3, #2]
		sprintf(rightmotbuff+strlen(rightmotbuff), "%d", right);
 80012f8:	4888      	ldr	r0, [pc, #544]	; (800151c <MotorRequestHandle+0x2cc>)
 80012fa:	f7fe ff7b 	bl	80001f4 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a86      	ldr	r2, [pc, #536]	; (800151c <MotorRequestHandle+0x2cc>)
 8001302:	4413      	add	r3, r2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	498b      	ldr	r1, [pc, #556]	; (8001534 <MotorRequestHandle+0x2e4>)
 8001308:	4618      	mov	r0, r3
 800130a:	f009 ffbd 	bl	800b288 <siprintf>
		strcpy(rightmotbuff+strlen(rightmotbuff), "\r\n");
 800130e:	4883      	ldr	r0, [pc, #524]	; (800151c <MotorRequestHandle+0x2cc>)
 8001310:	f7fe ff70 	bl	80001f4 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	4a81      	ldr	r2, [pc, #516]	; (800151c <MotorRequestHandle+0x2cc>)
 8001318:	4413      	add	r3, r2
 800131a:	4a87      	ldr	r2, [pc, #540]	; (8001538 <MotorRequestHandle+0x2e8>)
 800131c:	8811      	ldrh	r1, [r2, #0]
 800131e:	7892      	ldrb	r2, [r2, #2]
 8001320:	8019      	strh	r1, [r3, #0]
 8001322:	709a      	strb	r2, [r3, #2]
		strcpy(leftmotbuff+strlen(leftmotbuff), rightmotbuff);
 8001324:	487c      	ldr	r0, [pc, #496]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001326:	f7fe ff65 	bl	80001f4 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	4a7a      	ldr	r2, [pc, #488]	; (8001518 <MotorRequestHandle+0x2c8>)
 800132e:	4413      	add	r3, r2
 8001330:	497a      	ldr	r1, [pc, #488]	; (800151c <MotorRequestHandle+0x2cc>)
 8001332:	4618      	mov	r0, r3
 8001334:	f00a f839 	bl	800b3aa <strcpy>
		TransmitMOT(leftmotbuff, strlen(leftmotbuff), TRUE);
 8001338:	4877      	ldr	r0, [pc, #476]	; (8001518 <MotorRequestHandle+0x2c8>)
 800133a:	f7fe ff5b 	bl	80001f4 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	4874      	ldr	r0, [pc, #464]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001346:	f7ff fd4b 	bl	8000de0 <TransmitMOT>
 800134a:	e161      	b.n	8001610 <MotorRequestHandle+0x3c0>
	}
	else if (strstr(buf, "at+stop\r\n")!=NULL)
 800134c:	497b      	ldr	r1, [pc, #492]	; (800153c <MotorRequestHandle+0x2ec>)
 800134e:	6a38      	ldr	r0, [r7, #32]
 8001350:	f00a f833 	bl	800b3ba <strstr>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00d      	beq.n	8001376 <MotorRequestHandle+0x126>
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800135a:	2100      	movs	r1, #0
 800135c:	4873      	ldr	r0, [pc, #460]	; (800152c <MotorRequestHandle+0x2dc>)
 800135e:	f007 fbdd 	bl	8008b1c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001362:	2108      	movs	r1, #8
 8001364:	4871      	ldr	r0, [pc, #452]	; (800152c <MotorRequestHandle+0x2dc>)
 8001366:	f007 fbd9 	bl	8008b1c <HAL_TIM_PWM_Stop>
		TransmitMOT("All Stopped\r\n", 13, TRUE);
 800136a:	2201      	movs	r2, #1
 800136c:	210d      	movs	r1, #13
 800136e:	4874      	ldr	r0, [pc, #464]	; (8001540 <MotorRequestHandle+0x2f0>)
 8001370:	f7ff fd36 	bl	8000de0 <TransmitMOT>
 8001374:	e14c      	b.n	8001610 <MotorRequestHandle+0x3c0>
	}
	else if (sscanf(buf, "at+m1a=%u+m2a=%u", &motorState.leftSpd, &motorState.rightSpd) == 2)
 8001376:	4b73      	ldr	r3, [pc, #460]	; (8001544 <MotorRequestHandle+0x2f4>)
 8001378:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <MotorRequestHandle+0x2e0>)
 800137a:	4973      	ldr	r1, [pc, #460]	; (8001548 <MotorRequestHandle+0x2f8>)
 800137c:	6a38      	ldr	r0, [r7, #32]
 800137e:	f009 ffa3 	bl	800b2c8 <siscanf>
 8001382:	4603      	mov	r3, r0
 8001384:	2b02      	cmp	r3, #2
 8001386:	d155      	bne.n	8001434 <MotorRequestHandle+0x1e4>
	{
		//printf("left wheel running at: %u, right wheel running at: %u", motorState.leftSpd, motorState.rightSpd);
		TIM3->CCR3 = motorState.leftSpd;
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <MotorRequestHandle+0x2e0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b6f      	ldr	r3, [pc, #444]	; (800154c <MotorRequestHandle+0x2fc>)
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = motorState.rightSpd;
 8001390:	4b67      	ldr	r3, [pc, #412]	; (8001530 <MotorRequestHandle+0x2e0>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <MotorRequestHandle+0x2fc>)
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
		int left = motorState.leftSpd;
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <MotorRequestHandle+0x2e0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
		int right = motorState.rightSpd;
 800139e:	4b64      	ldr	r3, [pc, #400]	; (8001530 <MotorRequestHandle+0x2e0>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60bb      	str	r3, [r7, #8]
		sprintf(leftmotbuff+strlen(leftmotbuff), "%d", left);
 80013a4:	485c      	ldr	r0, [pc, #368]	; (8001518 <MotorRequestHandle+0x2c8>)
 80013a6:	f7fe ff25 	bl	80001f4 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a5a      	ldr	r2, [pc, #360]	; (8001518 <MotorRequestHandle+0x2c8>)
 80013ae:	4413      	add	r3, r2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4960      	ldr	r1, [pc, #384]	; (8001534 <MotorRequestHandle+0x2e4>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f009 ff67 	bl	800b288 <siprintf>
		strcpy(leftmotbuff+strlen(leftmotbuff), "\r\n");
 80013ba:	4857      	ldr	r0, [pc, #348]	; (8001518 <MotorRequestHandle+0x2c8>)
 80013bc:	f7fe ff1a 	bl	80001f4 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a55      	ldr	r2, [pc, #340]	; (8001518 <MotorRequestHandle+0x2c8>)
 80013c4:	4413      	add	r3, r2
 80013c6:	4a5c      	ldr	r2, [pc, #368]	; (8001538 <MotorRequestHandle+0x2e8>)
 80013c8:	8811      	ldrh	r1, [r2, #0]
 80013ca:	7892      	ldrb	r2, [r2, #2]
 80013cc:	8019      	strh	r1, [r3, #0]
 80013ce:	709a      	strb	r2, [r3, #2]
		sprintf(rightmotbuff+strlen(rightmotbuff), "%d", right);
 80013d0:	4852      	ldr	r0, [pc, #328]	; (800151c <MotorRequestHandle+0x2cc>)
 80013d2:	f7fe ff0f 	bl	80001f4 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a50      	ldr	r2, [pc, #320]	; (800151c <MotorRequestHandle+0x2cc>)
 80013da:	4413      	add	r3, r2
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	4955      	ldr	r1, [pc, #340]	; (8001534 <MotorRequestHandle+0x2e4>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 ff51 	bl	800b288 <siprintf>
		strcpy(rightmotbuff+strlen(rightmotbuff), "\r\n");
 80013e6:	484d      	ldr	r0, [pc, #308]	; (800151c <MotorRequestHandle+0x2cc>)
 80013e8:	f7fe ff04 	bl	80001f4 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a4b      	ldr	r2, [pc, #300]	; (800151c <MotorRequestHandle+0x2cc>)
 80013f0:	4413      	add	r3, r2
 80013f2:	4a51      	ldr	r2, [pc, #324]	; (8001538 <MotorRequestHandle+0x2e8>)
 80013f4:	8811      	ldrh	r1, [r2, #0]
 80013f6:	7892      	ldrb	r2, [r2, #2]
 80013f8:	8019      	strh	r1, [r3, #0]
 80013fa:	709a      	strb	r2, [r3, #2]
		strcpy(leftmotbuff+strlen(leftmotbuff), rightmotbuff);
 80013fc:	4846      	ldr	r0, [pc, #280]	; (8001518 <MotorRequestHandle+0x2c8>)
 80013fe:	f7fe fef9 	bl	80001f4 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	4a44      	ldr	r2, [pc, #272]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001406:	4413      	add	r3, r2
 8001408:	4944      	ldr	r1, [pc, #272]	; (800151c <MotorRequestHandle+0x2cc>)
 800140a:	4618      	mov	r0, r3
 800140c:	f009 ffcd 	bl	800b3aa <strcpy>
		TransmitMOT(leftmotbuff, strlen(leftmotbuff), TRUE);
 8001410:	4841      	ldr	r0, [pc, #260]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001412:	f7fe feef 	bl	80001f4 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	483e      	ldr	r0, [pc, #248]	; (8001518 <MotorRequestHandle+0x2c8>)
 800141e:	f7ff fcdf 	bl	8000de0 <TransmitMOT>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	4841      	ldr	r0, [pc, #260]	; (800152c <MotorRequestHandle+0x2dc>)
 8001426:	f007 fa6d 	bl	8008904 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800142a:	2108      	movs	r1, #8
 800142c:	483f      	ldr	r0, [pc, #252]	; (800152c <MotorRequestHandle+0x2dc>)
 800142e:	f007 fa69 	bl	8008904 <HAL_TIM_PWM_Start>
 8001432:	e0ed      	b.n	8001610 <MotorRequestHandle+0x3c0>
	}
	else if (sscanf(buf, "at+m1a=%u", &motorState.leftSpd) == 1)
 8001434:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <MotorRequestHandle+0x2e0>)
 8001436:	4946      	ldr	r1, [pc, #280]	; (8001550 <MotorRequestHandle+0x300>)
 8001438:	6a38      	ldr	r0, [r7, #32]
 800143a:	f009 ff45 	bl	800b2c8 <siscanf>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d12a      	bne.n	800149a <MotorRequestHandle+0x24a>
	{
		TIM3->CCR3 = motorState.leftSpd;
 8001444:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <MotorRequestHandle+0x2e0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <MotorRequestHandle+0x2fc>)
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800144c:	2100      	movs	r1, #0
 800144e:	4837      	ldr	r0, [pc, #220]	; (800152c <MotorRequestHandle+0x2dc>)
 8001450:	f007 fa58 	bl	8008904 <HAL_TIM_PWM_Start>
		int left = motorState.leftSpd;
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MotorRequestHandle+0x2e0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	613b      	str	r3, [r7, #16]
		sprintf(leftmotbuff+strlen(leftmotbuff), "%d", left);
 800145a:	482f      	ldr	r0, [pc, #188]	; (8001518 <MotorRequestHandle+0x2c8>)
 800145c:	f7fe feca 	bl	80001f4 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4932      	ldr	r1, [pc, #200]	; (8001534 <MotorRequestHandle+0x2e4>)
 800146a:	4618      	mov	r0, r3
 800146c:	f009 ff0c 	bl	800b288 <siprintf>
		strcpy(leftmotbuff+strlen(leftmotbuff), "\r\n");
 8001470:	4829      	ldr	r0, [pc, #164]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001472:	f7fe febf 	bl	80001f4 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <MotorRequestHandle+0x2c8>)
 800147a:	4413      	add	r3, r2
 800147c:	4a2e      	ldr	r2, [pc, #184]	; (8001538 <MotorRequestHandle+0x2e8>)
 800147e:	8811      	ldrh	r1, [r2, #0]
 8001480:	7892      	ldrb	r2, [r2, #2]
 8001482:	8019      	strh	r1, [r3, #0]
 8001484:	709a      	strb	r2, [r3, #2]
		TransmitMOT(leftmotbuff, strlen(leftmotbuff), TRUE);
 8001486:	4824      	ldr	r0, [pc, #144]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001488:	f7fe feb4 	bl	80001f4 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	4821      	ldr	r0, [pc, #132]	; (8001518 <MotorRequestHandle+0x2c8>)
 8001494:	f7ff fca4 	bl	8000de0 <TransmitMOT>
 8001498:	e0ba      	b.n	8001610 <MotorRequestHandle+0x3c0>
	}
	else if (sscanf(buf, "at+m2a=%u", &motorState.rightSpd) == 1)
 800149a:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <MotorRequestHandle+0x2f4>)
 800149c:	492d      	ldr	r1, [pc, #180]	; (8001554 <MotorRequestHandle+0x304>)
 800149e:	6a38      	ldr	r0, [r7, #32]
 80014a0:	f009 ff12 	bl	800b2c8 <siscanf>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d156      	bne.n	8001558 <MotorRequestHandle+0x308>
	{
		TIM3->CCR1 = motorState.rightSpd;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MotorRequestHandle+0x2e0>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <MotorRequestHandle+0x2fc>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
		int right = motorState.rightSpd;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MotorRequestHandle+0x2e0>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	617b      	str	r3, [r7, #20]
		sprintf(rightmotbuff+strlen(rightmotbuff), "%d", right);
 80014b8:	4818      	ldr	r0, [pc, #96]	; (800151c <MotorRequestHandle+0x2cc>)
 80014ba:	f7fe fe9b 	bl	80001f4 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a16      	ldr	r2, [pc, #88]	; (800151c <MotorRequestHandle+0x2cc>)
 80014c2:	4413      	add	r3, r2
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	491b      	ldr	r1, [pc, #108]	; (8001534 <MotorRequestHandle+0x2e4>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f009 fedd 	bl	800b288 <siprintf>
		strcpy(rightmotbuff+strlen(rightmotbuff), "\r\n");
 80014ce:	4813      	ldr	r0, [pc, #76]	; (800151c <MotorRequestHandle+0x2cc>)
 80014d0:	f7fe fe90 	bl	80001f4 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <MotorRequestHandle+0x2cc>)
 80014d8:	4413      	add	r3, r2
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <MotorRequestHandle+0x2e8>)
 80014dc:	8811      	ldrh	r1, [r2, #0]
 80014de:	7892      	ldrb	r2, [r2, #2]
 80014e0:	8019      	strh	r1, [r3, #0]
 80014e2:	709a      	strb	r2, [r3, #2]
		TransmitMOT(rightmotbuff, strlen(rightmotbuff), TRUE);
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MotorRequestHandle+0x2cc>)
 80014e6:	f7fe fe85 	bl	80001f4 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	480a      	ldr	r0, [pc, #40]	; (800151c <MotorRequestHandle+0x2cc>)
 80014f2:	f7ff fc75 	bl	8000de0 <TransmitMOT>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014f6:	2108      	movs	r1, #8
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MotorRequestHandle+0x2dc>)
 80014fa:	f007 fa03 	bl	8008904 <HAL_TIM_PWM_Start>
		TransmitMOT(rightmotbuff, strlen(rightmotbuff), TRUE);
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <MotorRequestHandle+0x2cc>)
 8001500:	f7fe fe78 	bl	80001f4 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <MotorRequestHandle+0x2cc>)
 800150c:	f7ff fc68 	bl	8000de0 <TransmitMOT>
 8001510:	e07e      	b.n	8001610 <MotorRequestHandle+0x3c0>
 8001512:	bf00      	nop
 8001514:	200039a8 	.word	0x200039a8
 8001518:	2000394c 	.word	0x2000394c
 800151c:	20003960 	.word	0x20003960
 8001520:	0800cfc0 	.word	0x0800cfc0
 8001524:	0800cfc8 	.word	0x0800cfc8
 8001528:	0800cfd0 	.word	0x0800cfd0
 800152c:	2000017c 	.word	0x2000017c
 8001530:	20003a4c 	.word	0x20003a4c
 8001534:	0800cfdc 	.word	0x0800cfdc
 8001538:	0800cfe0 	.word	0x0800cfe0
 800153c:	0800cfe4 	.word	0x0800cfe4
 8001540:	0800cff0 	.word	0x0800cff0
 8001544:	20003a50 	.word	0x20003a50
 8001548:	0800d000 	.word	0x0800d000
 800154c:	40000400 	.word	0x40000400
 8001550:	0800d014 	.word	0x0800d014
 8001554:	0800d020 	.word	0x0800d020
	}
	else if (strcmp(buf, "at\r\n") == 0)
 8001558:	492f      	ldr	r1, [pc, #188]	; (8001618 <MotorRequestHandle+0x3c8>)
 800155a:	6a38      	ldr	r0, [r7, #32]
 800155c:	f7fe fe40 	bl	80001e0 <strcmp>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d145      	bne.n	80015f2 <MotorRequestHandle+0x3a2>
	{
		int left = motorState.leftSpd;
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MotorRequestHandle+0x3cc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	61fb      	str	r3, [r7, #28]
		int right = motorState.rightSpd;
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <MotorRequestHandle+0x3cc>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	61bb      	str	r3, [r7, #24]
		sprintf(leftmotbuff+strlen(leftmotbuff), "%d", left);
 8001572:	482b      	ldr	r0, [pc, #172]	; (8001620 <MotorRequestHandle+0x3d0>)
 8001574:	f7fe fe3e 	bl	80001f4 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <MotorRequestHandle+0x3d0>)
 800157c:	4413      	add	r3, r2
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	4928      	ldr	r1, [pc, #160]	; (8001624 <MotorRequestHandle+0x3d4>)
 8001582:	4618      	mov	r0, r3
 8001584:	f009 fe80 	bl	800b288 <siprintf>
		strcpy(leftmotbuff+strlen(leftmotbuff), "\r\n");
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <MotorRequestHandle+0x3d0>)
 800158a:	f7fe fe33 	bl	80001f4 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	4a23      	ldr	r2, [pc, #140]	; (8001620 <MotorRequestHandle+0x3d0>)
 8001592:	4413      	add	r3, r2
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <MotorRequestHandle+0x3d8>)
 8001596:	8811      	ldrh	r1, [r2, #0]
 8001598:	7892      	ldrb	r2, [r2, #2]
 800159a:	8019      	strh	r1, [r3, #0]
 800159c:	709a      	strb	r2, [r3, #2]
		sprintf(rightmotbuff+strlen(rightmotbuff), "%d", right);
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <MotorRequestHandle+0x3dc>)
 80015a0:	f7fe fe28 	bl	80001f4 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <MotorRequestHandle+0x3dc>)
 80015a8:	4413      	add	r3, r2
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	491d      	ldr	r1, [pc, #116]	; (8001624 <MotorRequestHandle+0x3d4>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f009 fe6a 	bl	800b288 <siprintf>
		strcpy(rightmotbuff+strlen(rightmotbuff), "\r\n");
 80015b4:	481d      	ldr	r0, [pc, #116]	; (800162c <MotorRequestHandle+0x3dc>)
 80015b6:	f7fe fe1d 	bl	80001f4 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <MotorRequestHandle+0x3dc>)
 80015be:	4413      	add	r3, r2
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <MotorRequestHandle+0x3d8>)
 80015c2:	8811      	ldrh	r1, [r2, #0]
 80015c4:	7892      	ldrb	r2, [r2, #2]
 80015c6:	8019      	strh	r1, [r3, #0]
 80015c8:	709a      	strb	r2, [r3, #2]
		strcpy(leftmotbuff+strlen(leftmotbuff), rightmotbuff);
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <MotorRequestHandle+0x3d0>)
 80015cc:	f7fe fe12 	bl	80001f4 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <MotorRequestHandle+0x3d0>)
 80015d4:	4413      	add	r3, r2
 80015d6:	4915      	ldr	r1, [pc, #84]	; (800162c <MotorRequestHandle+0x3dc>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f009 fee6 	bl	800b3aa <strcpy>
		TransmitMOT(leftmotbuff, strlen(leftmotbuff), TRUE);
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <MotorRequestHandle+0x3d0>)
 80015e0:	f7fe fe08 	bl	80001f4 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2201      	movs	r2, #1
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MotorRequestHandle+0x3d0>)
 80015ec:	f7ff fbf8 	bl	8000de0 <TransmitMOT>
 80015f0:	e00e      	b.n	8001610 <MotorRequestHandle+0x3c0>
	}
	else if (sscanf(buf, "at+mvel=%u", &motorState.velocity) == 1)
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <MotorRequestHandle+0x3e0>)
 80015f4:	490f      	ldr	r1, [pc, #60]	; (8001634 <MotorRequestHandle+0x3e4>)
 80015f6:	6a38      	ldr	r0, [r7, #32]
 80015f8:	f009 fe66 	bl	800b2c8 <siscanf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d005      	beq.n	800160e <MotorRequestHandle+0x3be>
	{
		return;
	}
	else
	{
		TransmitMOT("ERROR\r\n", 7, TRUE);
 8001602:	2201      	movs	r2, #1
 8001604:	2107      	movs	r1, #7
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <MotorRequestHandle+0x3e8>)
 8001608:	f7ff fbea 	bl	8000de0 <TransmitMOT>
 800160c:	e000      	b.n	8001610 <MotorRequestHandle+0x3c0>
		return;
 800160e:	bf00      	nop
	}
}
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	0800d02c 	.word	0x0800d02c
 800161c:	20003a4c 	.word	0x20003a4c
 8001620:	2000394c 	.word	0x2000394c
 8001624:	0800cfdc 	.word	0x0800cfdc
 8001628:	0800cfe0 	.word	0x0800cfe0
 800162c:	20003960 	.word	0x20003960
 8001630:	20003a54 	.word	0x20003a54
 8001634:	0800d034 	.word	0x0800d034
 8001638:	0800d040 	.word	0x0800d040
 800163c:	00000000 	.word	0x00000000

08001640 <VCW>:

void VCW(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
	//Finding the distance
	uint8_t LeftTotal = leftVCW.RiseCount + leftVCW.FallCount;
 8001646:	4b48      	ldr	r3, [pc, #288]	; (8001768 <VCW+0x128>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <VCW+0x128>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
	uint8_t RightTotal = rightVCW.RiseCount + rightVCW.FallCount;
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <VCW+0x12c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <VCW+0x12c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	71bb      	strb	r3, [r7, #6]
	leftVCW.Distance = LeftTotal * WheelRadius;
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff73 	bl	8000554 <__aeabi_i2d>
 800166e:	a33c      	add	r3, pc, #240	; (adr r3, 8001760 <VCW+0x120>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ffd8 	bl	8000628 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa0c 	bl	8000a9c <__aeabi_d2uiz>
 8001684:	4603      	mov	r3, r0
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <VCW+0x128>)
 8001688:	6153      	str	r3, [r2, #20]
	rightVCW.Distance = RightTotal * WheelRadius;
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff61 	bl	8000554 <__aeabi_i2d>
 8001692:	a333      	add	r3, pc, #204	; (adr r3, 8001760 <VCW+0x120>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ffc6 	bl	8000628 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f9fa 	bl	8000a9c <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a30      	ldr	r2, [pc, #192]	; (800176c <VCW+0x12c>)
 80016ac:	6153      	str	r3, [r2, #20]

	//Finding velocity
	if (uwTick - leftVCW.RiseTime > 500){leftVCW.TimeDiff = 0;}
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <VCW+0x130>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <VCW+0x128>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016bc:	d902      	bls.n	80016c4 <VCW+0x84>
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <VCW+0x128>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
	if (uwTick - rightVCW.RiseTime > 500){rightVCW.TimeDiff = 0;}
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <VCW+0x130>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <VCW+0x12c>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d2:	d902      	bls.n	80016da <VCW+0x9a>
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <VCW+0x12c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]

	uint8_t leftTimeDiff = leftVCW.TimeDiff;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <VCW+0x128>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	717b      	strb	r3, [r7, #5]
	uint8_t rightTimeDiff = rightVCW.TimeDiff;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <VCW+0x12c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	713b      	strb	r3, [r7, #4]
	if(leftVCW.TimeDiff)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <VCW+0x128>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d014      	beq.n	8001718 <VCW+0xd8>
	{
		leftVCW.velocity = WheelRadius / leftTimeDiff;
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff2f 	bl	8000554 <__aeabi_i2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	a119      	add	r1, pc, #100	; (adr r1, 8001760 <VCW+0x120>)
 80016fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001700:	f7ff f8bc 	bl	800087c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff f9c6 	bl	8000a9c <__aeabi_d2uiz>
 8001710:	4603      	mov	r3, r0
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <VCW+0x128>)
 8001714:	6113      	str	r3, [r2, #16]
 8001716:	e002      	b.n	800171e <VCW+0xde>
	}
	else{
		leftVCW.velocity = 0;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <VCW+0x128>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
	}

	if(rightVCW.TimeDiff)
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <VCW+0x12c>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d014      	beq.n	8001750 <VCW+0x110>
	{
		rightVCW.velocity = WheelRadius / rightTimeDiff;
 8001726:	793b      	ldrb	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff13 	bl	8000554 <__aeabi_i2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	a10b      	add	r1, pc, #44	; (adr r1, 8001760 <VCW+0x120>)
 8001734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001738:	f7ff f8a0 	bl	800087c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f9aa 	bl	8000a9c <__aeabi_d2uiz>
 8001748:	4603      	mov	r3, r0
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <VCW+0x12c>)
 800174c:	6113      	str	r3, [r2, #16]
	}
	else{
		rightVCW.velocity = 0;
	}
}
 800174e:	e002      	b.n	8001756 <VCW+0x116>
		rightVCW.velocity = 0;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <VCW+0x12c>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	00000000 	.word	0x00000000
 8001764:	4030e000 	.word	0x4030e000
 8001768:	20003a58 	.word	0x20003a58
 800176c:	20003a70 	.word	0x20003a70
 8001770:	20003a98 	.word	0x20003a98

08001774 <PID>:


void PID(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
	int leftAngError = motorState.velocity - leftVCW.velocity;
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <PID+0x104>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	461a      	mov	r2, r3
 8001780:	4b3e      	ldr	r3, [pc, #248]	; (800187c <PID+0x108>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	60fb      	str	r3, [r7, #12]
	int rightAngError = motorState.velocity - rightVCW.velocity;
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <PID+0x104>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	461a      	mov	r2, r3
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <PID+0x10c>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	60bb      	str	r3, [r7, #8]
	int leftError = pidState.kp * leftAngError * CYCLES_PER_ANG_VEL;
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <PID+0x110>)
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	ee17 0a90 	vmov	r0, s15
 80017ae:	f7fe fee3 	bl	8000578 <__aeabi_f2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <PID+0x114>)
 80017b8:	f7fe ff36 	bl	8000628 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff f942 	bl	8000a4c <__aeabi_d2iz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	607b      	str	r3, [r7, #4]
	int rightError = pidState.kp * rightAngError * CYCLES_PER_ANG_VEL;
 80017cc:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <PID+0x110>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e0:	ee17 0a90 	vmov	r0, s15
 80017e4:	f7fe fec8 	bl	8000578 <__aeabi_f2d>
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <PID+0x114>)
 80017ee:	f7fe ff1b 	bl	8000628 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff f927 	bl	8000a4c <__aeabi_d2iz>
 80017fe:	4603      	mov	r3, r0
 8001800:	603b      	str	r3, [r7, #0]
	if(TIM3->CCR3 + leftError < ARR_VALUE) TIM3->CCR3 += leftError;
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <PID+0x118>)
 8001804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	f640 620e 	movw	r2, #3598	; 0xe0e
 800180e:	4293      	cmp	r3, r2
 8001810:	d805      	bhi.n	800181e <PID+0xaa>
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <PID+0x118>)
 8001814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	491c      	ldr	r1, [pc, #112]	; (800188c <PID+0x118>)
 800181a:	4413      	add	r3, r2
 800181c:	63cb      	str	r3, [r1, #60]	; 0x3c
	if(TIM3->CCR1 + rightError < ARR_VALUE) TIM3->CCR1 += rightError;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <PID+0x118>)
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	4413      	add	r3, r2
 8001826:	f640 620e 	movw	r2, #3598	; 0xe0e
 800182a:	4293      	cmp	r3, r2
 800182c:	d805      	bhi.n	800183a <PID+0xc6>
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <PID+0x118>)
 8001830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4915      	ldr	r1, [pc, #84]	; (800188c <PID+0x118>)
 8001836:	4413      	add	r3, r2
 8001838:	634b      	str	r3, [r1, #52]	; 0x34

	printf("Current left velocity: %d; Target velocity: %d; Diff: %d; PWM: %d; \r\n" , leftVCW.velocity, motorState.velocity, leftAngError, TIM3->CCR1);
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <PID+0x108>)
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <PID+0x104>)
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <PID+0x118>)
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4811      	ldr	r0, [pc, #68]	; (8001890 <PID+0x11c>)
 800184c:	f009 fc8e 	bl	800b16c <iprintf>
	printf("Current right velocity: %d; Target velocity: %d; Diff: %d; PWM: %d; \r\n" , rightVCW.velocity, motorState.velocity, rightAngError, TIM3->CCR3);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <PID+0x10c>)
 8001852:	6919      	ldr	r1, [r3, #16]
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <PID+0x104>)
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <PID+0x118>)
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <PID+0x120>)
 8001862:	f009 fc83 	bl	800b16c <iprintf>

//	printf("Right Velocity: %u; (Diff) = %d ;(Target) - %u ;(Tracking). PWM: %d\r\n;", rightAngError, motorState.velocity, rightVCW.velocity, TIM3->CCR3);
//	printf("left Velocity: %u; (Diff) = %d ;(Target) - %u ;(Tracking). PWM: %d\r\n;", leftAngError, motorState.velocity, leftVCW.velocity, TIM3->CCR1);
	GetExpiryValTick(&BufferTick, 10);
 8001866:	210a      	movs	r1, #10
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <PID+0x124>)
 800186a:	f001 fbb9 	bl	8002fe0 <GetExpiryValTick>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20003a4c 	.word	0x20003a4c
 800187c:	20003a58 	.word	0x20003a58
 8001880:	20003a70 	.word	0x20003a70
 8001884:	20003a88 	.word	0x20003a88
 8001888:	40140000 	.word	0x40140000
 800188c:	40000400 	.word	0x40000400
 8001890:	0800d048 	.word	0x0800d048
 8001894:	0800d090 	.word	0x0800d090
 8001898:	20003974 	.word	0x20003974

0800189c <WordSearch>:
		printf("Prepended to UART1: %s\r\n", uartState[UART1].rxbufferAdd);
	}
}

void WordSearch(uint8_t huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	if (uartState[huart].dataSize!=6)
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a96      	ldr	r2, [pc, #600]	; (8001b04 <WordSearch+0x268>)
 80018aa:	214c      	movs	r1, #76	; 0x4c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	331c      	adds	r3, #28
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d027      	beq.n	800190a <WordSearch+0x6e>
	{
		if (stateMachine == AUTO_SERVER || stateMachine == AUTO_LISTEN){
 80018ba:	4b93      	ldr	r3, [pc, #588]	; (8001b08 <WordSearch+0x26c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d003      	beq.n	80018ca <WordSearch+0x2e>
 80018c2:	4b91      	ldr	r3, [pc, #580]	; (8001b08 <WordSearch+0x26c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d109      	bne.n	80018de <WordSearch+0x42>
			uartState[huart].rxState = Idle;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a8d      	ldr	r2, [pc, #564]	; (8001b04 <WordSearch+0x268>)
 80018ce:	214c      	movs	r1, #76	; 0x4c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3318      	adds	r3, #24
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
			return;
 80018dc:	e10e      	b.n	8001afc <WordSearch+0x260>
		}
		if(stateMachine == TEST || stateMachine == TPIX || stateMachine == TMOT){
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <WordSearch+0x26c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <WordSearch+0x5a>
 80018e6:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <WordSearch+0x26c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d003      	beq.n	80018f6 <WordSearch+0x5a>
 80018ee:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <WordSearch+0x26c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d109      	bne.n	800190a <WordSearch+0x6e>
			uartState[huart].rxState = GotData;
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	4a82      	ldr	r2, [pc, #520]	; (8001b04 <WordSearch+0x268>)
 80018fa:	214c      	movs	r1, #76	; 0x4c
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	3318      	adds	r3, #24
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
			return;
 8001908:	e0f8      	b.n	8001afc <WordSearch+0x260>
		}
	}

	const char* autoFind = "AUTO\r\n";
 800190a:	4b80      	ldr	r3, [pc, #512]	; (8001b0c <WordSearch+0x270>)
 800190c:	61fb      	str	r3, [r7, #28]
	const char* testFind = "TEST\r\n";
 800190e:	4b80      	ldr	r3, [pc, #512]	; (8001b10 <WordSearch+0x274>)
 8001910:	61bb      	str	r3, [r7, #24]
	const char* tpixFind = "TPIX\r\n";
 8001912:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <WordSearch+0x278>)
 8001914:	617b      	str	r3, [r7, #20]
	const char* tmotFind = "TMOT\r\n";
 8001916:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <WordSearch+0x27c>)
 8001918:	613b      	str	r3, [r7, #16]
	uint8_t buffer[6];
	memcpy(buffer, uartState[huart].rxbufferAdd + uartState[huart].rxbuffDex, uartState[huart].dataSize);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a79      	ldr	r2, [pc, #484]	; (8001b04 <WordSearch+0x268>)
 800191e:	214c      	movs	r1, #76	; 0x4c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3314      	adds	r3, #20
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	4975      	ldr	r1, [pc, #468]	; (8001b04 <WordSearch+0x268>)
 800192e:	204c      	movs	r0, #76	; 0x4c
 8001930:	fb00 f202 	mul.w	r2, r0, r2
 8001934:	440a      	add	r2, r1
 8001936:	321e      	adds	r2, #30
 8001938:	8812      	ldrh	r2, [r2, #0]
 800193a:	1899      	adds	r1, r3, r2
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <WordSearch+0x268>)
 8001940:	204c      	movs	r0, #76	; 0x4c
 8001942:	fb00 f303 	mul.w	r3, r0, r3
 8001946:	4413      	add	r3, r2
 8001948:	331c      	adds	r3, #28
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4618      	mov	r0, r3
 8001954:	f009 fbf4 	bl	800b140 <memcpy>

	if (strcmp((char*)buffer, autoFind) == 0)   //if uart2 rxbuffer contains AUTO, do something
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	69f9      	ldr	r1, [r7, #28]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc3e 	bl	80001e0 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d121      	bne.n	80019ae <WordSearch+0x112>
	{
		HAL_UART_AbortTransmit(&huart2);
 800196a:	486c      	ldr	r0, [pc, #432]	; (8001b1c <WordSearch+0x280>)
 800196c:	f008 f90a 	bl	8009b84 <HAL_UART_AbortTransmit>
		if(stateMachine == AUTO_SERVER)
 8001970:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <WordSearch+0x26c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <WordSearch+0xe8>
		{
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Already on AUTO Mode!\r\n", 23);
 8001978:	2217      	movs	r2, #23
 800197a:	4969      	ldr	r1, [pc, #420]	; (8001b20 <WordSearch+0x284>)
 800197c:	4867      	ldr	r0, [pc, #412]	; (8001b1c <WordSearch+0x280>)
 800197e:	f008 f885 	bl	8009a8c <HAL_UART_Transmit_DMA>
 8001982:	e00a      	b.n	800199a <WordSearch+0xfe>
		}
		else
		{
			stateFlag.rxFlag = 0;
 8001984:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <WordSearch+0x288>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
			stateMachine = AUTO_SERVER;
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <WordSearch+0x26c>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Switching to AUTO Mode!\r\n", 25);
 8001990:	2219      	movs	r2, #25
 8001992:	4965      	ldr	r1, [pc, #404]	; (8001b28 <WordSearch+0x28c>)
 8001994:	4861      	ldr	r0, [pc, #388]	; (8001b1c <WordSearch+0x280>)
 8001996:	f008 f879 	bl	8009a8c <HAL_UART_Transmit_DMA>
//			ClearAllData(UART1);
//			ClearAllData(UART2);
//			memset(uartState[UART1].rxbufferAdd, 0, MaxBufferSize);
//			memset(uartState[UART2].rxbufferAdd, 0, MaxBufferSize);
		}
		uartState[huart].rxState = Idle;
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <WordSearch+0x268>)
 800199e:	214c      	movs	r1, #76	; 0x4c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3318      	adds	r3, #24
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]
		{
			uartState[huart].rxState = GotData;
			return;
		}
	}
	return;
 80019ac:	e0a5      	b.n	8001afa <WordSearch+0x25e>
	else if (strcmp((char*)buffer, tpixFind) == 0)
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fc13 	bl	80001e0 <strcmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11e      	bne.n	80019fe <WordSearch+0x162>
		if(stateMachine == TPIX)
 80019c0:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <WordSearch+0x26c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d105      	bne.n	80019d4 <WordSearch+0x138>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Already on TPIX Mode!\r\n", 23);
 80019c8:	2217      	movs	r2, #23
 80019ca:	4958      	ldr	r1, [pc, #352]	; (8001b2c <WordSearch+0x290>)
 80019cc:	4853      	ldr	r0, [pc, #332]	; (8001b1c <WordSearch+0x280>)
 80019ce:	f008 f85d 	bl	8009a8c <HAL_UART_Transmit_DMA>
 80019d2:	e00a      	b.n	80019ea <WordSearch+0x14e>
			stateMachine = TPIX;
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <WordSearch+0x26c>)
 80019d6:	2203      	movs	r2, #3
 80019d8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Switching to TPIX Mode!\r\n", 25);
 80019da:	2219      	movs	r2, #25
 80019dc:	4954      	ldr	r1, [pc, #336]	; (8001b30 <WordSearch+0x294>)
 80019de:	484f      	ldr	r0, [pc, #316]	; (8001b1c <WordSearch+0x280>)
 80019e0:	f008 f854 	bl	8009a8c <HAL_UART_Transmit_DMA>
			pixyState.spiState = Idle;
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <WordSearch+0x298>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	721a      	strb	r2, [r3, #8]
		uartState[huart].rxState = Idle;
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <WordSearch+0x268>)
 80019ee:	214c      	movs	r1, #76	; 0x4c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3318      	adds	r3, #24
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
	return;
 80019fc:	e07d      	b.n	8001afa <WordSearch+0x25e>
	else if (strcmp((char*)buffer, testFind) == 0)   //if uart2 rxbuffer contains TEST, do something
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fbeb 	bl	80001e0 <strcmp>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d121      	bne.n	8001a54 <WordSearch+0x1b8>
		if (stateMachine == TEST)
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <WordSearch+0x26c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <WordSearch+0x188>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Already on TEST Mode!\r\n", 23);
 8001a18:	2217      	movs	r2, #23
 8001a1a:	4947      	ldr	r1, [pc, #284]	; (8001b38 <WordSearch+0x29c>)
 8001a1c:	483f      	ldr	r0, [pc, #252]	; (8001b1c <WordSearch+0x280>)
 8001a1e:	f008 f835 	bl	8009a8c <HAL_UART_Transmit_DMA>
 8001a22:	e00d      	b.n	8001a40 <WordSearch+0x1a4>
			stateFlag.autoinitFlag = 0;
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <WordSearch+0x288>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	705a      	strb	r2, [r3, #1]
			stateFlag.rxFlag = 0;
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <WordSearch+0x288>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			stateMachine = TEST;
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <WordSearch+0x26c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Switching to TEST Mode!\r\n", 25);
 8001a36:	2219      	movs	r2, #25
 8001a38:	4940      	ldr	r1, [pc, #256]	; (8001b3c <WordSearch+0x2a0>)
 8001a3a:	4838      	ldr	r0, [pc, #224]	; (8001b1c <WordSearch+0x280>)
 8001a3c:	f008 f826 	bl	8009a8c <HAL_UART_Transmit_DMA>
		uartState[huart].rxState = Idle;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a30      	ldr	r2, [pc, #192]	; (8001b04 <WordSearch+0x268>)
 8001a44:	214c      	movs	r1, #76	; 0x4c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
	return;
 8001a52:	e052      	b.n	8001afa <WordSearch+0x25e>
	else if (strcmp((char*)buffer, tmotFind) == 0)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fbc0 	bl	80001e0 <strcmp>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d121      	bne.n	8001aaa <WordSearch+0x20e>
		if (stateMachine == TMOT)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <WordSearch+0x26c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d105      	bne.n	8001a7a <WordSearch+0x1de>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Already on TMOT Mode!\r\n", 23);
 8001a6e:	2217      	movs	r2, #23
 8001a70:	4933      	ldr	r1, [pc, #204]	; (8001b40 <WordSearch+0x2a4>)
 8001a72:	482a      	ldr	r0, [pc, #168]	; (8001b1c <WordSearch+0x280>)
 8001a74:	f008 f80a 	bl	8009a8c <HAL_UART_Transmit_DMA>
 8001a78:	e00d      	b.n	8001a96 <WordSearch+0x1fa>
			stateFlag.autoinitFlag = 0;
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <WordSearch+0x288>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	705a      	strb	r2, [r3, #1]
			stateFlag.rxFlag = 0;
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <WordSearch+0x288>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
			stateMachine = TMOT;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <WordSearch+0x26c>)
 8001a88:	2204      	movs	r2, #4
 8001a8a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)"Switching to TMOT Mode!\r\n", 25);
 8001a8c:	2219      	movs	r2, #25
 8001a8e:	492d      	ldr	r1, [pc, #180]	; (8001b44 <WordSearch+0x2a8>)
 8001a90:	4822      	ldr	r0, [pc, #136]	; (8001b1c <WordSearch+0x280>)
 8001a92:	f007 fffb 	bl	8009a8c <HAL_UART_Transmit_DMA>
		uartState[huart].rxState = Idle;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <WordSearch+0x268>)
 8001a9a:	214c      	movs	r1, #76	; 0x4c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	701a      	strb	r2, [r3, #0]
	return;
 8001aa8:	e027      	b.n	8001afa <WordSearch+0x25e>
		if(stateMachine == AUTO_SERVER || stateMachine == AUTO_LISTEN)
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <WordSearch+0x26c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d003      	beq.n	8001aba <WordSearch+0x21e>
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <WordSearch+0x26c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d109      	bne.n	8001ace <WordSearch+0x232>
			uartState[huart].rxState = Idle;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <WordSearch+0x268>)
 8001abe:	214c      	movs	r1, #76	; 0x4c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	2202      	movs	r2, #2
 8001aca:	701a      	strb	r2, [r3, #0]
			return;
 8001acc:	e016      	b.n	8001afc <WordSearch+0x260>
		if (stateMachine == TEST || stateMachine == TPIX || stateMachine == TMOT)
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <WordSearch+0x26c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <WordSearch+0x24a>
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <WordSearch+0x26c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d003      	beq.n	8001ae6 <WordSearch+0x24a>
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <WordSearch+0x26c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d109      	bne.n	8001afa <WordSearch+0x25e>
			uartState[huart].rxState = GotData;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <WordSearch+0x268>)
 8001aea:	214c      	movs	r1, #76	; 0x4c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3318      	adds	r3, #24
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
			return;
 8001af8:	e000      	b.n	8001afc <WordSearch+0x260>
	return;
 8001afa:	bf00      	nop
}
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200039a8 	.word	0x200039a8
 8001b08:	20002798 	.word	0x20002798
 8001b0c:	0800f440 	.word	0x0800f440
 8001b10:	0800f448 	.word	0x0800f448
 8001b14:	0800f450 	.word	0x0800f450
 8001b18:	0800f458 	.word	0x0800f458
 8001b1c:	20000250 	.word	0x20000250
 8001b20:	0800f460 	.word	0x0800f460
 8001b24:	20003a40 	.word	0x20003a40
 8001b28:	0800f478 	.word	0x0800f478
 8001b2c:	0800f494 	.word	0x0800f494
 8001b30:	0800f4ac 	.word	0x0800f4ac
 8001b34:	20003978 	.word	0x20003978
 8001b38:	0800f4c8 	.word	0x0800f4c8
 8001b3c:	0800f4e0 	.word	0x0800f4e0
 8001b40:	0800f4fc 	.word	0x0800f4fc
 8001b44:	0800f514 	.word	0x0800f514

08001b48 <AFC1Search>:

uint8_t AFC1Search(uint8_t* buffer, uint16_t* pose, uint16_t* size)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
	uint16_t Start = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	83fb      	strh	r3, [r7, #30]
	uint16_t End = MaxSpiSize;
 8001b58:	2384      	movs	r3, #132	; 0x84
 8001b5a:	837b      	strh	r3, [r7, #26]
	uint16_t bBegin;
	uint16_t bEnd;
	uint16_t checksum;
	uint16_t calc_checksum = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	83bb      	strh	r3, [r7, #28]

	/* Look for Header AF C1 */
	while (Start < (End-1) && (!((buffer[Start]==0xAF)&&(buffer[Start+1]==0xC1))))
 8001b60:	e002      	b.n	8001b68 <AFC1Search+0x20>
	{
		Start++;
 8001b62:	8bfb      	ldrh	r3, [r7, #30]
 8001b64:	3301      	adds	r3, #1
 8001b66:	83fb      	strh	r3, [r7, #30]
	while (Start < (End-1) && (!((buffer[Start]==0xAF)&&(buffer[Start+1]==0xC1))))
 8001b68:	8bfa      	ldrh	r2, [r7, #30]
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	da0c      	bge.n	8001b8c <AFC1Search+0x44>
 8001b72:	8bfb      	ldrh	r3, [r7, #30]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2baf      	cmp	r3, #175	; 0xaf
 8001b7c:	d1f1      	bne.n	8001b62 <AFC1Search+0x1a>
 8001b7e:	8bfb      	ldrh	r3, [r7, #30]
 8001b80:	3301      	adds	r3, #1
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2bc1      	cmp	r3, #193	; 0xc1
 8001b8a:	d1ea      	bne.n	8001b62 <AFC1Search+0x1a>
	}

	/* Read Data */
	if (Start < (End-1))
 8001b8c:	8bfa      	ldrh	r2, [r7, #30]
 8001b8e:	8b7b      	ldrh	r3, [r7, #26]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	429a      	cmp	r2, r3
 8001b94:	da4e      	bge.n	8001c34 <AFC1Search+0xec>
	{
//		printf("AFC1 Found\r\n");

		/* set the buffer starting index to point at AFC1 */
		*pose+=Start;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	8bfb      	ldrh	r3, [r7, #30]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	801a      	strh	r2, [r3, #0]
//			printf(" %x", pixyState.rxbufferAdd[i]);
//		}
//		printf("\r\n");

		/* 2 bytes header, 1 byte packet type, 1 byte data length, 2 bytes checksum */
		*size =  buffer[Start+3] + 6; // 4th byte is data length, only counts length after checksum
 8001ba4:	8bfb      	ldrh	r3, [r7, #30]
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3306      	adds	r3, #6
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	801a      	strh	r2, [r3, #0]

		/* 5th & 6th byte is Checksum in Little Endian, convert to Big Endian */
		checksum = (uint16_t)(buffer[Start+4]) | (uint16_t)((buffer[Start+5]) << 8);
 8001bb8:	8bfb      	ldrh	r3, [r7, #30]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	8bfb      	ldrh	r3, [r7, #30]
 8001bc6:	3305      	adds	r3, #5
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	440b      	add	r3, r1
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	833b      	strh	r3, [r7, #24]

		/* Offset start by Size to find End */
		End = Start + (*size);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	881a      	ldrh	r2, [r3, #0]
 8001bdc:	8bfb      	ldrh	r3, [r7, #30]
 8001bde:	4413      	add	r3, r2
 8001be0:	837b      	strh	r3, [r7, #26]

		/* Offset start by 6 bytes for first feature type */
		Start += 6;
 8001be2:	8bfb      	ldrh	r3, [r7, #30]
 8001be4:	3306      	adds	r3, #6
 8001be6:	83fb      	strh	r3, [r7, #30]

		/* Mark where Feature Data Starts and Ends */
		bBegin = Start;
 8001be8:	8bfb      	ldrh	r3, [r7, #30]
 8001bea:	82fb      	strh	r3, [r7, #22]
		bEnd = End;
 8001bec:	8b7b      	ldrh	r3, [r7, #26]
 8001bee:	82bb      	strh	r3, [r7, #20]

		while (Start < End)
 8001bf0:	e00a      	b.n	8001c08 <AFC1Search+0xc0>
		{
			/* summing up payload 16 bytes to check if it corresponds to payload bytes */
			calc_checksum+=(uint16_t)buffer[Start];
 8001bf2:	8bfb      	ldrh	r3, [r7, #30]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8bbb      	ldrh	r3, [r7, #28]
 8001bfe:	4413      	add	r3, r2
 8001c00:	83bb      	strh	r3, [r7, #28]
			Start++;
 8001c02:	8bfb      	ldrh	r3, [r7, #30]
 8001c04:	3301      	adds	r3, #1
 8001c06:	83fb      	strh	r3, [r7, #30]
		while (Start < End)
 8001c08:	8bfa      	ldrh	r2, [r7, #30]
 8001c0a:	8b7b      	ldrh	r3, [r7, #26]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3f0      	bcc.n	8001bf2 <AFC1Search+0xaa>
		}

		/* Validate Checksum */
		if(checksum == calc_checksum)
 8001c10:	8b3a      	ldrh	r2, [r7, #24]
 8001c12:	8bbb      	ldrh	r3, [r7, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10b      	bne.n	8001c30 <AFC1Search+0xe8>
		{
//			printf("Checksum Passed\r\n");

			if(stateMachine == AUTO_LISTEN)
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <AFC1Search+0xf8>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d105      	bne.n	8001c2c <AFC1Search+0xe4>
			{
				/* Search for Feature */
				findFeature(buffer, bBegin, bEnd);
 8001c20:	8aba      	ldrh	r2, [r7, #20]
 8001c22:	8afb      	ldrh	r3, [r7, #22]
 8001c24:	4619      	mov	r1, r3
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f80c 	bl	8001c44 <findFeature>
			}

			return 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e002      	b.n	8001c36 <AFC1Search+0xee>
		}
		else {
//			printf("Checksum Failed\r\n");
			return 2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	e000      	b.n	8001c36 <AFC1Search+0xee>
		}
	}
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20002798 	.word	0x20002798

08001c44 <findFeature>:

void findFeature(uint8_t* buffer, uint16_t start, uint16_t end)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	803b      	strh	r3, [r7, #0]
	uint8_t featureSize;
	while(start < end)
 8001c54:	e04c      	b.n	8001cf0 <findFeature+0xac>
	{
		featureSize = buffer[start+1];
 8001c56:	887b      	ldrh	r3, [r7, #2]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	73fb      	strb	r3, [r7, #15]
		switch(buffer[start])
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d028      	beq.n	8001cc0 <findFeature+0x7c>
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	dc37      	bgt.n	8001ce2 <findFeature+0x9e>
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d002      	beq.n	8001c7c <findFeature+0x38>
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d019      	beq.n	8001cae <findFeature+0x6a>
 8001c7a:	e032      	b.n	8001ce2 <findFeature+0x9e>
		{
		case 0x01:	// Vector
			pixyState.vectorX = buffer[start+4]; // Vector Destination x-coord
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <findFeature+0x164>)
 8001c88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			pixyState.vectorY = buffer[start+5];
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	3305      	adds	r3, #5
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <findFeature+0x164>)
 8001c98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			pixyState.branchCount = 0; // Reset Branch Count
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <findFeature+0x164>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			pixyState.barcodeId = BARCODE_NULL; // Set Barcode ID to NULL
 8001ca4:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <findFeature+0x164>)
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			break;
 8001cac:	e019      	b.n	8001ce2 <findFeature+0x9e>
		case 0x02:	// Intersection
			pixyState.branchCount = buffer[start+4]; // Set Branch Count
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <findFeature+0x164>)
 8001cba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			break;
 8001cbe:	e010      	b.n	8001ce2 <findFeature+0x9e>
		case 0x04:	// Barcode
			pixyState.barcodeY = buffer[start+3];
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <findFeature+0x164>)
 8001ccc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			pixyState.barcodeId = buffer[start+5]; // Set Barcode ID
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	3305      	adds	r3, #5
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <findFeature+0x164>)
 8001cdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			break;
 8001ce0:	bf00      	nop
		}
		/* Increment Buffer Pointer to next Feature */
		start += (2 + featureSize);
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3302      	adds	r3, #2
 8001cee:	807b      	strh	r3, [r7, #2]
	while(start < end)
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	883b      	ldrh	r3, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3ae      	bcc.n	8001c56 <findFeature+0x12>
	}
//	printf("Vector Destination X-Coord: %d\r\n", pixyState.vectorX);
//	printf("Intersection Branch Count: %d\r\n", pixyState.branchCount);
//	printf("Barcode Number: %d\r\n", pixyState.barcodeId);
	if(pixyState.barcodeId == BARCODE_STOP)
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <findFeature+0x164>)
 8001cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d104      	bne.n	8001d0c <findFeature+0xc8>
	{
		pixyState.spiTurnState = MOVE_STOP;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <findFeature+0x164>)
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
	}
//	if(pixyState.spiTurnState==MOVE_FORWARD){printf("LINE SAYS: FEED\r\n");}
//	else if(pixyState.spiTurnState==MOVE_LEFT){printf("LINE SAYS: LEFT\r\n");}
//	else if(pixyState.spiTurnState==MOVE_RIGHT){printf("LINE SAYS: RIGHT\r\n");}
}
 8001d0a:	e046      	b.n	8001d9a <findFeature+0x156>
	else if(pixyState.barcodeId == BARCODE_NULL)
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <findFeature+0x164>)
 8001d0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d118      	bne.n	8001d48 <findFeature+0x104>
		if(pixyState.vectorX < 25)
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <findFeature+0x164>)
 8001d18:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d804      	bhi.n	8001d2a <findFeature+0xe6>
			pixyState.spiTurnState = MOVE_LEFT;
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <findFeature+0x164>)
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001d28:	e037      	b.n	8001d9a <findFeature+0x156>
		else if(pixyState.vectorX > 53)
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <findFeature+0x164>)
 8001d2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d30:	2b35      	cmp	r3, #53	; 0x35
 8001d32:	d904      	bls.n	8001d3e <findFeature+0xfa>
			pixyState.spiTurnState = MOVE_RIGHT;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <findFeature+0x164>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001d3c:	e02d      	b.n	8001d9a <findFeature+0x156>
			pixyState.spiTurnState = MOVE_FORWARD;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <findFeature+0x164>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001d46:	e028      	b.n	8001d9a <findFeature+0x156>
	else if(pixyState.branchCount > 1)
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <findFeature+0x164>)
 8001d4a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d923      	bls.n	8001d9a <findFeature+0x156>
			if(pixyState.barcodeId == BARCODE_LEFT)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <findFeature+0x164>)
 8001d54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d108      	bne.n	8001d6e <findFeature+0x12a>
				pixyState.spiTurnState = MOVE_LEFT;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <findFeature+0x164>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				pixyState.IntersectionDecision = MOVE_LEFT;
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <findFeature+0x164>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001d6c:	e015      	b.n	8001d9a <findFeature+0x156>
			else if(pixyState.barcodeId == BARCODE_RIGHT)
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <findFeature+0x164>)
 8001d70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d108      	bne.n	8001d8a <findFeature+0x146>
				pixyState.spiTurnState = MOVE_RIGHT;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <findFeature+0x164>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				pixyState.IntersectionDecision = MOVE_RIGHT;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <findFeature+0x164>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001d88:	e007      	b.n	8001d9a <findFeature+0x156>
				pixyState.spiTurnState = MOVE_FORWARD;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <findFeature+0x164>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				pixyState.IntersectionDecision = MOVE_FORWARD;
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <findFeature+0x164>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20003978 	.word	0x20003978

08001dac <printLCD>:

void printLCD(uint8_t IPbuffer[]){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    uint8_t IPCopy[16];
    HD44780_Clear();
 8001db4:	f000 fede 	bl	8002b74 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8001db8:	2100      	movs	r1, #0
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 fef0 	bl	8002ba0 <HD44780_SetCursor>
    for (int i = 24, j =0; i < 39; i++, j++){
 8001dc0:	2318      	movs	r3, #24
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e00f      	b.n	8001dea <printLCD+0x3e>
        IPCopy[j] = IPbuffer[i];
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	7819      	ldrb	r1, [r3, #0]
 8001dd2:	f107 0208 	add.w	r2, r7, #8
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4413      	add	r3, r2
 8001dda:	460a      	mov	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
    for (int i = 24, j =0; i < 39; i++, j++){
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	3301      	adds	r3, #1
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	2b26      	cmp	r3, #38	; 0x26
 8001dee:	ddec      	ble.n	8001dca <printLCD+0x1e>
    }
    //printf("\"%s\"\r\n", IPAddress);
    HD44780_PrintStr((const char*)IPCopy);
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 ff44 	bl	8002c82 <HD44780_PrintStr>
    HAL_Delay(100);
 8001dfa:	2064      	movs	r0, #100	; 0x64
 8001dfc:	f002 fbf2 	bl	80045e4 <HAL_Delay>
}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_SPI_TxRxCpltCallback>:
 *
 */
#include "esp_webserver_uart_ring_buffer_pixy.h"

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	if(stateMachine == TPIX)
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_SPI_TxRxCpltCallback+0x24>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d102      	bne.n	8001e1e <HAL_SPI_TxRxCpltCallback+0x16>
	{
		pixyState.spiState = GotData;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_SPI_TxRxCpltCallback+0x28>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	721a      	strb	r2, [r3, #8]
	}
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20002798 	.word	0x20002798
 8001e30:	20003978 	.word	0x20003978

08001e34 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	if(stateMachine == AUTO_LISTEN)
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_SPI_TxCpltCallback+0x2c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d108      	bne.n	8001e56 <HAL_SPI_TxCpltCallback+0x22>
	{
		HAL_SPI_Receive_IT(pixyState.hspi, pixyState.rxbufferAdd, pixyState.dataSize);
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_SPI_TxCpltCallback+0x30>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_SPI_TxCpltCallback+0x30>)
 8001e4a:	6851      	ldr	r1, [r2, #4]
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_SPI_TxCpltCallback+0x30>)
 8001e4e:	8952      	ldrh	r2, [r2, #10]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f005 fb2d 	bl	80074b0 <HAL_SPI_Receive_IT>
	}
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20002798 	.word	0x20002798
 8001e64:	20003978 	.word	0x20003978

08001e68 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if(stateMachine == AUTO_LISTEN)
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_SPI_RxCpltCallback+0x24>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d102      	bne.n	8001e7e <HAL_SPI_RxCpltCallback+0x16>
	{
		pixyState.spiState = GotData;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_SPI_RxCpltCallback+0x28>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	721a      	strb	r2, [r3, #8]
	}
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20002798 	.word	0x20002798
 8001e90:	20003978 	.word	0x20003978

08001e94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	uint8_t nUART;
	if (huart->Instance == huart1.Instance)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_UART_TxCpltCallback+0x48>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d102      	bne.n	8001eae <HAL_UART_TxCpltCallback+0x1a>
	{
		nUART = UART1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e007      	b.n	8001ebe <HAL_UART_TxCpltCallback+0x2a>
	}
	else if (huart->Instance == huart2.Instance)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_UART_TxCpltCallback+0x4c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_TxCpltCallback+0x2a>
	{
		nUART = UART2;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
	}
	uartState[nUART].txState = Idle;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_UART_TxCpltCallback+0x50>)
 8001ec2:	214c      	movs	r1, #76	; 0x4c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3319      	adds	r3, #25
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	200001c8 	.word	0x200001c8
 8001ee0:	20000250 	.word	0x20000250
 8001ee4:	200039a8 	.word	0x200039a8

08001ee8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
	uint8_t nUART;
	if (huart->Instance == huart1.Instance)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_UARTEx_RxEventCallback+0x94>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d11c      	bne.n	8001f3a <HAL_UARTEx_RxEventCallback+0x52>
	{
		nUART = UART1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
		if (stateMachine == AUTO_SERVER)
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_UARTEx_RxEventCallback+0x98>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d102      	bne.n	8001f12 <HAL_UARTEx_RxEventCallback+0x2a>
		{
			autoServerSize = Size;
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <HAL_UARTEx_RxEventCallback+0x9c>)
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	8013      	strh	r3, [r2, #0]
		}
		if (stateMachine == AUTO_LISTEN)
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_UARTEx_RxEventCallback+0x98>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d105      	bne.n	8001f26 <HAL_UARTEx_RxEventCallback+0x3e>
		{
			webRequest.request = 1;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	709a      	strb	r2, [r3, #2]
			autoServerSize = Size;
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_UARTEx_RxEventCallback+0x9c>)
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	8013      	strh	r3, [r2, #0]
		}
		uartState[nUART].rxState = GotData;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8001f2a:	214c      	movs	r1, #76	; 0x4c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	3318      	adds	r3, #24
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e010      	b.n	8001f5c <HAL_UARTEx_RxEventCallback+0x74>
	}
	else if (huart->Instance == huart2.Instance)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_UARTEx_RxEventCallback+0xa8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d10a      	bne.n	8001f5c <HAL_UARTEx_RxEventCallback+0x74>
	{
		nUART = UART2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
		uartState[nUART].rxState = TestAutoCheck;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8001f4e:	214c      	movs	r1, #76	; 0x4c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3318      	adds	r3, #24
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
	}
	uartState[nUART].dataSize = Size;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8001f60:	214c      	movs	r1, #76	; 0x4c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	331c      	adds	r3, #28
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	801a      	strh	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	200001c8 	.word	0x200001c8
 8001f80:	20002798 	.word	0x20002798
 8001f84:	2000279a 	.word	0x2000279a
 8001f88:	20003a44 	.word	0x20003a44
 8001f8c:	200039a8 	.word	0x200039a8
 8001f90:	20000250 	.word	0x20000250

08001f94 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_UART_ErrorCallback+0x4c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_UART_ErrorCallback+0x22>
	{
		uartState[UART1].InError = TRUE;
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_UART_ErrorCallback+0x50>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	769a      	strb	r2, [r3, #26]
		uartState[UART1].rxState = Error;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_UART_ErrorCallback+0x50>)
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	761a      	strb	r2, [r3, #24]
	else if (huart->Instance == huart2.Instance)
	{
		uartState[UART2].InError = TRUE;
		uartState[UART2].rxState = Error;
	}
}
 8001fb4:	e00d      	b.n	8001fd2 <HAL_UART_ErrorCallback+0x3e>
	else if (huart->Instance == huart2.Instance)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_UART_ErrorCallback+0x54>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d107      	bne.n	8001fd2 <HAL_UART_ErrorCallback+0x3e>
		uartState[UART2].InError = TRUE;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_UART_ErrorCallback+0x50>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		uartState[UART2].rxState = Error;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_UART_ErrorCallback+0x50>)
 8001fcc:	2205      	movs	r2, #5
 8001fce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200001c8 	.word	0x200001c8
 8001fe4:	200039a8 	.word	0x200039a8
 8001fe8:	20000250 	.word	0x20000250

08001fec <Auto_Init>:
 *
 */
#include "esp_webserver_uart_ring_buffer_pixy.h"

void Auto_Init(uint8_t IPbuffer[])
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	f6ad 1dd8 	subw	sp, sp, #2520	; 0x9d8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8001ff8:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8001ffc:	6018      	str	r0, [r3, #0]
	uint8_t buffer[2501] = "";
 8001ffe:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8002002:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	3304      	adds	r3, #4
 800200c:	f640 12c1 	movw	r2, #2497	; 0x9c1
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f009 f8a2 	bl	800b15c <memset>
    switch (stateFlag.rxFlag) {
 8002018:	4bb8      	ldr	r3, [pc, #736]	; (80022fc <Auto_Init+0x310>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b0e      	cmp	r3, #14
 800201e:	f200 8194 	bhi.w	800234a <Auto_Init+0x35e>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <Auto_Init+0x3c>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002065 	.word	0x08002065
 800202c:	0800207f 	.word	0x0800207f
 8002030:	080020b5 	.word	0x080020b5
 8002034:	080020cf 	.word	0x080020cf
 8002038:	08002105 	.word	0x08002105
 800203c:	0800213b 	.word	0x0800213b
 8002040:	08002171 	.word	0x08002171
 8002044:	0800218b 	.word	0x0800218b
 8002048:	08002205 	.word	0x08002205
 800204c:	0800221f 	.word	0x0800221f
 8002050:	08002253 	.word	0x08002253
 8002054:	0800226d 	.word	0x0800226d
 8002058:	080022a1 	.word	0x080022a1
 800205c:	080022bb 	.word	0x080022bb
 8002060:	080022ef 	.word	0x080022ef
	case 0:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)AT, strlen((const char*)AT)) != HAL_OK) {}
 8002064:	bf00      	nop
 8002066:	2204      	movs	r2, #4
 8002068:	49a5      	ldr	r1, [pc, #660]	; (8002300 <Auto_Init+0x314>)
 800206a:	48a6      	ldr	r0, [pc, #664]	; (8002304 <Auto_Init+0x318>)
 800206c:	f007 fd0e 	bl	8009a8c <HAL_UART_Transmit_DMA>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f7      	bne.n	8002066 <Auto_Init+0x7a>
		stateFlag.rxFlag = 1;
 8002076:	4ba1      	ldr	r3, [pc, #644]	; (80022fc <Auto_Init+0x310>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
		break;
 800207c:	e165      	b.n	800234a <Auto_Init+0x35e>

	case 1:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 800207e:	4ba2      	ldr	r3, [pc, #648]	; (8002308 <Auto_Init+0x31c>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4aa1      	ldr	r2, [pc, #644]	; (8002308 <Auto_Init+0x31c>)
 8002084:	8bd2      	ldrh	r2, [r2, #30]
 8002086:	1899      	adds	r1, r3, r2
 8002088:	4ba0      	ldr	r3, [pc, #640]	; (800230c <Auto_Init+0x320>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4618      	mov	r0, r3
 8002094:	f009 f854 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, AT_OK) != NULL){
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	499c      	ldr	r1, [pc, #624]	; (8002310 <Auto_Init+0x324>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f009 f98b 	bl	800b3ba <strstr>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8125 	beq.w	80022f6 <Auto_Init+0x30a>
			stateFlag.rxFlag = 2;
 80020ac:	4b93      	ldr	r3, [pc, #588]	; (80022fc <Auto_Init+0x310>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020b2:	e120      	b.n	80022f6 <Auto_Init+0x30a>

	case 2:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)CWMODE, strlen((const char*)CWMODE)) != HAL_OK) {}
 80020b4:	bf00      	nop
 80020b6:	220d      	movs	r2, #13
 80020b8:	4996      	ldr	r1, [pc, #600]	; (8002314 <Auto_Init+0x328>)
 80020ba:	4892      	ldr	r0, [pc, #584]	; (8002304 <Auto_Init+0x318>)
 80020bc:	f007 fce6 	bl	8009a8c <HAL_UART_Transmit_DMA>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f7      	bne.n	80020b6 <Auto_Init+0xca>
		stateFlag.rxFlag = 3;
 80020c6:	4b8d      	ldr	r3, [pc, #564]	; (80022fc <Auto_Init+0x310>)
 80020c8:	2203      	movs	r2, #3
 80020ca:	701a      	strb	r2, [r3, #0]
		break;
 80020cc:	e13d      	b.n	800234a <Auto_Init+0x35e>

	case 3:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 80020ce:	4b8e      	ldr	r3, [pc, #568]	; (8002308 <Auto_Init+0x31c>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4a8d      	ldr	r2, [pc, #564]	; (8002308 <Auto_Init+0x31c>)
 80020d4:	8bd2      	ldrh	r2, [r2, #30]
 80020d6:	1899      	adds	r1, r3, r2
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <Auto_Init+0x320>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4618      	mov	r0, r3
 80020e4:	f009 f82c 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, AT_OK) != NULL){
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	4988      	ldr	r1, [pc, #544]	; (8002310 <Auto_Init+0x324>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f009 f963 	bl	800b3ba <strstr>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 811c 	beq.w	8002334 <Auto_Init+0x348>
			stateFlag.rxFlag = 4;
 80020fc:	4b7f      	ldr	r3, [pc, #508]	; (80022fc <Auto_Init+0x310>)
 80020fe:	2204      	movs	r2, #4
 8002100:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002102:	e117      	b.n	8002334 <Auto_Init+0x348>

	case 4:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)CWJAP, strlen((const char*)CWJAP)) != HAL_OK) {}
 8002104:	bf00      	nop
 8002106:	2222      	movs	r2, #34	; 0x22
 8002108:	4983      	ldr	r1, [pc, #524]	; (8002318 <Auto_Init+0x32c>)
 800210a:	487e      	ldr	r0, [pc, #504]	; (8002304 <Auto_Init+0x318>)
 800210c:	f007 fcbe 	bl	8009a8c <HAL_UART_Transmit_DMA>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f7      	bne.n	8002106 <Auto_Init+0x11a>
		for(int x = 0; x < 1000; x++){};
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 800211c:	e004      	b.n	8002128 <Auto_Init+0x13c>
 800211e:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8002122:	3301      	adds	r3, #1
 8002124:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 8002128:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800212c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002130:	dbf5      	blt.n	800211e <Auto_Init+0x132>
		stateFlag.rxFlag = 5;
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <Auto_Init+0x310>)
 8002134:	2205      	movs	r2, #5
 8002136:	701a      	strb	r2, [r3, #0]
		break;
 8002138:	e107      	b.n	800234a <Auto_Init+0x35e>

	case 5:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 800213a:	4b73      	ldr	r3, [pc, #460]	; (8002308 <Auto_Init+0x31c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a72      	ldr	r2, [pc, #456]	; (8002308 <Auto_Init+0x31c>)
 8002140:	8bd2      	ldrh	r2, [r2, #30]
 8002142:	1899      	adds	r1, r3, r2
 8002144:	4b71      	ldr	r3, [pc, #452]	; (800230c <Auto_Init+0x320>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f008 fff6 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, AT_OK) != NULL) {
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	496d      	ldr	r1, [pc, #436]	; (8002310 <Auto_Init+0x324>)
 800215a:	4618      	mov	r0, r3
 800215c:	f009 f92d 	bl	800b3ba <strstr>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80e8 	beq.w	8002338 <Auto_Init+0x34c>
		 stateFlag.rxFlag = 6;
 8002168:	4b64      	ldr	r3, [pc, #400]	; (80022fc <Auto_Init+0x310>)
 800216a:	2206      	movs	r2, #6
 800216c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800216e:	e0e3      	b.n	8002338 <Auto_Init+0x34c>

	case 6:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)CIFSR, strlen((const char*)CIFSR)) != HAL_OK) {}
 8002170:	bf00      	nop
 8002172:	220a      	movs	r2, #10
 8002174:	4969      	ldr	r1, [pc, #420]	; (800231c <Auto_Init+0x330>)
 8002176:	4863      	ldr	r0, [pc, #396]	; (8002304 <Auto_Init+0x318>)
 8002178:	f007 fc88 	bl	8009a8c <HAL_UART_Transmit_DMA>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f7      	bne.n	8002172 <Auto_Init+0x186>
		stateFlag.rxFlag = 7;
 8002182:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <Auto_Init+0x310>)
 8002184:	2207      	movs	r2, #7
 8002186:	701a      	strb	r2, [r3, #0]
		break;
 8002188:	e0df      	b.n	800234a <Auto_Init+0x35e>

	case 7:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <Auto_Init+0x31c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4a5e      	ldr	r2, [pc, #376]	; (8002308 <Auto_Init+0x31c>)
 8002190:	8bd2      	ldrh	r2, [r2, #30]
 8002192:	1899      	adds	r1, r3, r2
 8002194:	4b5d      	ldr	r3, [pc, #372]	; (800230c <Auto_Init+0x320>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	4618      	mov	r0, r3
 80021a0:	f008 ffce 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, "+CIFSR:") != NULL) {
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	495d      	ldr	r1, [pc, #372]	; (8002320 <Auto_Init+0x334>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f009 f905 	bl	800b3ba <strstr>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d018      	beq.n	80021e8 <Auto_Init+0x1fc>
			memcpy(IPbuffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <Auto_Init+0x31c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a53      	ldr	r2, [pc, #332]	; (8002308 <Auto_Init+0x31c>)
 80021bc:	8bd2      	ldrh	r2, [r2, #30]
 80021be:	1899      	adds	r1, r3, r2
 80021c0:	4b52      	ldr	r3, [pc, #328]	; (800230c <Auto_Init+0x320>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80021ca:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	f008 ffb6 	bl	800b140 <memcpy>
			printLCD(IPbuffer);
 80021d4:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80021d8:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f7ff fde5 	bl	8001dac <printLCD>
			stateFlag.rxFlag = 8;
 80021e2:	4b46      	ldr	r3, [pc, #280]	; (80022fc <Auto_Init+0x310>)
 80021e4:	2208      	movs	r2, #8
 80021e6:	701a      	strb	r2, [r3, #0]
		}
		if (strstr((char*)buffer,"busy")!= NULL)
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	494d      	ldr	r1, [pc, #308]	; (8002324 <Auto_Init+0x338>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f009 f8e3 	bl	800b3ba <strstr>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80a0 	beq.w	800233c <Auto_Init+0x350>
		{
			stateFlag.rxFlag = 4;
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <Auto_Init+0x310>)
 80021fe:	2204      	movs	r2, #4
 8002200:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002202:	e09b      	b.n	800233c <Auto_Init+0x350>

	case 8:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)CIPMUX, strlen((const char*)CIPMUX)) != HAL_OK) {}
 8002204:	bf00      	nop
 8002206:	220d      	movs	r2, #13
 8002208:	4947      	ldr	r1, [pc, #284]	; (8002328 <Auto_Init+0x33c>)
 800220a:	483e      	ldr	r0, [pc, #248]	; (8002304 <Auto_Init+0x318>)
 800220c:	f007 fc3e 	bl	8009a8c <HAL_UART_Transmit_DMA>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f7      	bne.n	8002206 <Auto_Init+0x21a>
		stateFlag.rxFlag = 9;
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <Auto_Init+0x310>)
 8002218:	2209      	movs	r2, #9
 800221a:	701a      	strb	r2, [r3, #0]
		break;
 800221c:	e095      	b.n	800234a <Auto_Init+0x35e>

	case 9:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <Auto_Init+0x31c>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4a39      	ldr	r2, [pc, #228]	; (8002308 <Auto_Init+0x31c>)
 8002224:	8bd2      	ldrh	r2, [r2, #30]
 8002226:	1899      	adds	r1, r3, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <Auto_Init+0x320>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4618      	mov	r0, r3
 8002234:	f008 ff84 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, AT_OK) != NULL) {
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	4934      	ldr	r1, [pc, #208]	; (8002310 <Auto_Init+0x324>)
 800223e:	4618      	mov	r0, r3
 8002240:	f009 f8bb 	bl	800b3ba <strstr>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07a      	beq.n	8002340 <Auto_Init+0x354>
			stateFlag.rxFlag = 10;
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <Auto_Init+0x310>)
 800224c:	220a      	movs	r2, #10
 800224e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002250:	e076      	b.n	8002340 <Auto_Init+0x354>

	case 10:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)CIPSERVER, strlen((const char*)CIPSERVER)) != HAL_OK) {}
 8002252:	bf00      	nop
 8002254:	2213      	movs	r2, #19
 8002256:	4935      	ldr	r1, [pc, #212]	; (800232c <Auto_Init+0x340>)
 8002258:	482a      	ldr	r0, [pc, #168]	; (8002304 <Auto_Init+0x318>)
 800225a:	f007 fc17 	bl	8009a8c <HAL_UART_Transmit_DMA>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f7      	bne.n	8002254 <Auto_Init+0x268>
		stateFlag.rxFlag = 11;
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <Auto_Init+0x310>)
 8002266:	220b      	movs	r2, #11
 8002268:	701a      	strb	r2, [r3, #0]
		break;
 800226a:	e06e      	b.n	800234a <Auto_Init+0x35e>

	case 11:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 800226c:	4b26      	ldr	r3, [pc, #152]	; (8002308 <Auto_Init+0x31c>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <Auto_Init+0x31c>)
 8002272:	8bd2      	ldrh	r2, [r2, #30]
 8002274:	1899      	adds	r1, r3, r2
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <Auto_Init+0x320>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4618      	mov	r0, r3
 8002282:	f008 ff5d 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, AT_OK) != NULL) {
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	4921      	ldr	r1, [pc, #132]	; (8002310 <Auto_Init+0x324>)
 800228c:	4618      	mov	r0, r3
 800228e:	f009 f894 	bl	800b3ba <strstr>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d055      	beq.n	8002344 <Auto_Init+0x358>
			stateFlag.rxFlag = 12;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <Auto_Init+0x310>)
 800229a:	220c      	movs	r2, #12
 800229c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800229e:	e051      	b.n	8002344 <Auto_Init+0x358>

	case 12:
		while (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)CIPSTATUS, strlen((const char*)CIPSTATUS)) != HAL_OK) {}
 80022a0:	bf00      	nop
 80022a2:	220e      	movs	r2, #14
 80022a4:	4922      	ldr	r1, [pc, #136]	; (8002330 <Auto_Init+0x344>)
 80022a6:	4817      	ldr	r0, [pc, #92]	; (8002304 <Auto_Init+0x318>)
 80022a8:	f007 fbf0 	bl	8009a8c <HAL_UART_Transmit_DMA>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f7      	bne.n	80022a2 <Auto_Init+0x2b6>
		stateFlag.rxFlag = 13;
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <Auto_Init+0x310>)
 80022b4:	220d      	movs	r2, #13
 80022b6:	701a      	strb	r2, [r3, #0]
		break;
 80022b8:	e047      	b.n	800234a <Auto_Init+0x35e>

	case 13:
		memcpy(buffer, uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex, autoServerSize);
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <Auto_Init+0x31c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <Auto_Init+0x31c>)
 80022c0:	8bd2      	ldrh	r2, [r2, #30]
 80022c2:	1899      	adds	r1, r3, r2
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <Auto_Init+0x320>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	4618      	mov	r0, r3
 80022d0:	f008 ff36 	bl	800b140 <memcpy>
		if (strstr((char*)buffer, AT_OK) != NULL) {
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	490d      	ldr	r1, [pc, #52]	; (8002310 <Auto_Init+0x324>)
 80022da:	4618      	mov	r0, r3
 80022dc:	f009 f86d 	bl	800b3ba <strstr>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d030      	beq.n	8002348 <Auto_Init+0x35c>
			stateFlag.rxFlag = 14;
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <Auto_Init+0x310>)
 80022e8:	220e      	movs	r2, #14
 80022ea:	701a      	strb	r2, [r3, #0]
		}
//		else {
//			stateFlag.rxFlag = 0;
//		}
		break;
 80022ec:	e02c      	b.n	8002348 <Auto_Init+0x35c>

	case 14:
		stateFlag.rxFlag =15;
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <Auto_Init+0x310>)
 80022f0:	220f      	movs	r2, #15
 80022f2:	701a      	strb	r2, [r3, #0]
		break;
 80022f4:	e029      	b.n	800234a <Auto_Init+0x35e>
		break;
 80022f6:	bf00      	nop
 80022f8:	e027      	b.n	800234a <Auto_Init+0x35e>
 80022fa:	bf00      	nop
 80022fc:	20003a40 	.word	0x20003a40
 8002300:	0800f530 	.word	0x0800f530
 8002304:	200001c8 	.word	0x200001c8
 8002308:	200039a8 	.word	0x200039a8
 800230c:	2000279a 	.word	0x2000279a
 8002310:	0800f538 	.word	0x0800f538
 8002314:	0800f540 	.word	0x0800f540
 8002318:	0800f550 	.word	0x0800f550
 800231c:	0800f574 	.word	0x0800f574
 8002320:	0800f580 	.word	0x0800f580
 8002324:	0800f588 	.word	0x0800f588
 8002328:	0800f590 	.word	0x0800f590
 800232c:	0800f5a0 	.word	0x0800f5a0
 8002330:	0800f5b4 	.word	0x0800f5b4
		break;
 8002334:	bf00      	nop
 8002336:	e008      	b.n	800234a <Auto_Init+0x35e>
		break;
 8002338:	bf00      	nop
 800233a:	e006      	b.n	800234a <Auto_Init+0x35e>
		break;
 800233c:	bf00      	nop
 800233e:	e004      	b.n	800234a <Auto_Init+0x35e>
		break;
 8002340:	bf00      	nop
 8002342:	e002      	b.n	800234a <Auto_Init+0x35e>
		break;
 8002344:	bf00      	nop
 8002346:	e000      	b.n	800234a <Auto_Init+0x35e>
		break;
 8002348:	bf00      	nop
    }
}
 800234a:	bf00      	nop
 800234c:	f607 17d8 	addw	r7, r7, #2520	; 0x9d8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <RequestHandle>:

void RequestHandle(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
	uint8_t circPtr = uartState[UART1].txCircArrayPtr;
 800235a:	4bb1      	ldr	r3, [pc, #708]	; (8002620 <RequestHandle+0x2cc>)
 800235c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002360:	73fb      	strb	r3, [r7, #15]
	uint16_t buffIdx = uartState[UART1].circArray[circPtr][Index];
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	4aae      	ldr	r2, [pc, #696]	; (8002620 <RequestHandle+0x2cc>)
 8002366:	3308      	adds	r3, #8
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	81bb      	strh	r3, [r7, #12]
	char* buf = (char*)&(uartState[UART1].rxbufferAdd[buffIdx]);
 8002370:	4bab      	ldr	r3, [pc, #684]	; (8002620 <RequestHandle+0x2cc>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	89bb      	ldrh	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]
	char* tempIPD;
	char* req;

	if(((req = strstr(buf,"GET /"))!= NULL) && ((tempIPD = strstr(buf, "IPD,"))!=NULL))
 800237a:	49aa      	ldr	r1, [pc, #680]	; (8002624 <RequestHandle+0x2d0>)
 800237c:	68b8      	ldr	r0, [r7, #8]
 800237e:	f009 f81c 	bl	800b3ba <strstr>
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80ae 	beq.w	80024e8 <RequestHandle+0x194>
 800238c:	49a6      	ldr	r1, [pc, #664]	; (8002628 <RequestHandle+0x2d4>)
 800238e:	68b8      	ldr	r0, [r7, #8]
 8002390:	f009 f813 	bl	800b3ba <strstr>
 8002394:	6038      	str	r0, [r7, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a5 	beq.w	80024e8 <RequestHandle+0x194>
	{

		webRequest.get = *(req+5);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3305      	adds	r3, #5
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	4ba1      	ldr	r3, [pc, #644]	; (800262c <RequestHandle+0x2d8>)
 80023a6:	715a      	strb	r2, [r3, #5]
		webRequest.ipd = *(tempIPD+4);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3304      	adds	r3, #4
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	4b9f      	ldr	r3, [pc, #636]	; (800262c <RequestHandle+0x2d8>)
 80023b0:	711a      	strb	r2, [r3, #4]
		switch(webRequest.get)
 80023b2:	4b9e      	ldr	r3, [pc, #632]	; (800262c <RequestHandle+0x2d8>)
 80023b4:	795b      	ldrb	r3, [r3, #5]
 80023b6:	2b34      	cmp	r3, #52	; 0x34
 80023b8:	dc34      	bgt.n	8002424 <RequestHandle+0xd0>
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f2c0 812c 	blt.w	8002618 <RequestHandle+0x2c4>
 80023c0:	3b20      	subs	r3, #32
 80023c2:	2b14      	cmp	r3, #20
 80023c4:	f200 8128 	bhi.w	8002618 <RequestHandle+0x2c4>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <RequestHandle+0x7c>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	0800242b 	.word	0x0800242b
 80023d4:	08002619 	.word	0x08002619
 80023d8:	08002619 	.word	0x08002619
 80023dc:	08002619 	.word	0x08002619
 80023e0:	08002619 	.word	0x08002619
 80023e4:	08002619 	.word	0x08002619
 80023e8:	08002619 	.word	0x08002619
 80023ec:	08002619 	.word	0x08002619
 80023f0:	08002619 	.word	0x08002619
 80023f4:	08002619 	.word	0x08002619
 80023f8:	08002619 	.word	0x08002619
 80023fc:	08002619 	.word	0x08002619
 8002400:	08002619 	.word	0x08002619
 8002404:	08002619 	.word	0x08002619
 8002408:	08002619 	.word	0x08002619
 800240c:	08002619 	.word	0x08002619
 8002410:	08002619 	.word	0x08002619
 8002414:	0800244f 	.word	0x0800244f
 8002418:	08002475 	.word	0x08002475
 800241c:	0800249b 	.word	0x0800249b
 8002420:	0800249b 	.word	0x0800249b
 8002424:	2b66      	cmp	r3, #102	; 0x66
 8002426:	d04b      	beq.n	80024c0 <RequestHandle+0x16c>
 8002428:	e0f6      	b.n	8002618 <RequestHandle+0x2c4>
		{
		case ' ':
			webRequest.process = WebServer;
 800242a:	4b80      	ldr	r3, [pc, #512]	; (800262c <RequestHandle+0x2d8>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
			buffer[11] = (uint8_t)webRequest.ipd;
 8002430:	4b7e      	ldr	r3, [pc, #504]	; (800262c <RequestHandle+0x2d8>)
 8002432:	791a      	ldrb	r2, [r3, #4]
 8002434:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <RequestHandle+0x2dc>)
 8002436:	72da      	strb	r2, [r3, #11]
			TransmitESP(&buffer[0], strlen((const char*)&buffer[0]),TRUE);
 8002438:	487d      	ldr	r0, [pc, #500]	; (8002630 <RequestHandle+0x2dc>)
 800243a:	f7fd fedb 	bl	80001f4 <strlen>
 800243e:	4603      	mov	r3, r0
 8002440:	b29b      	uxth	r3, r3
 8002442:	2201      	movs	r2, #1
 8002444:	4619      	mov	r1, r3
 8002446:	487a      	ldr	r0, [pc, #488]	; (8002630 <RequestHandle+0x2dc>)
 8002448:	f7fe fc84 	bl	8000d54 <TransmitESP>
			break;
 800244c:	e04b      	b.n	80024e6 <RequestHandle+0x192>

		case '1':
			webRequest.process = ToggleBlueLED;
 800244e:	4b77      	ldr	r3, [pc, #476]	; (800262c <RequestHandle+0x2d8>)
 8002450:	2202      	movs	r2, #2
 8002452:	701a      	strb	r2, [r3, #0]
			buffer[51] = (uint8_t)webRequest.ipd;
 8002454:	4b75      	ldr	r3, [pc, #468]	; (800262c <RequestHandle+0x2d8>)
 8002456:	791a      	ldrb	r2, [r3, #4]
 8002458:	4b75      	ldr	r3, [pc, #468]	; (8002630 <RequestHandle+0x2dc>)
 800245a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			TransmitESP(&buffer[40],strlen((const char*)&buffer[40]),TRUE);
 800245e:	4875      	ldr	r0, [pc, #468]	; (8002634 <RequestHandle+0x2e0>)
 8002460:	f7fd fec8 	bl	80001f4 <strlen>
 8002464:	4603      	mov	r3, r0
 8002466:	b29b      	uxth	r3, r3
 8002468:	2201      	movs	r2, #1
 800246a:	4619      	mov	r1, r3
 800246c:	4871      	ldr	r0, [pc, #452]	; (8002634 <RequestHandle+0x2e0>)
 800246e:	f7fe fc71 	bl	8000d54 <TransmitESP>
			break;
 8002472:	e038      	b.n	80024e6 <RequestHandle+0x192>

		case '2':
			webRequest.process = ToggleRedLED;
 8002474:	4b6d      	ldr	r3, [pc, #436]	; (800262c <RequestHandle+0x2d8>)
 8002476:	2203      	movs	r2, #3
 8002478:	701a      	strb	r2, [r3, #0]
			buffer[51] = (uint8_t)webRequest.ipd;
 800247a:	4b6c      	ldr	r3, [pc, #432]	; (800262c <RequestHandle+0x2d8>)
 800247c:	791a      	ldrb	r2, [r3, #4]
 800247e:	4b6c      	ldr	r3, [pc, #432]	; (8002630 <RequestHandle+0x2dc>)
 8002480:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			TransmitESP(&buffer[40],strlen((const char*)&buffer[40]),TRUE);
 8002484:	486b      	ldr	r0, [pc, #428]	; (8002634 <RequestHandle+0x2e0>)
 8002486:	f7fd feb5 	bl	80001f4 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	b29b      	uxth	r3, r3
 800248e:	2201      	movs	r2, #1
 8002490:	4619      	mov	r1, r3
 8002492:	4868      	ldr	r0, [pc, #416]	; (8002634 <RequestHandle+0x2e0>)
 8002494:	f7fe fc5e 	bl	8000d54 <TransmitESP>
			break;
 8002498:	e025      	b.n	80024e6 <RequestHandle+0x192>

		case '3':
		case '4':
			webRequest.process = GetGreenLED;
 800249a:	4b64      	ldr	r3, [pc, #400]	; (800262c <RequestHandle+0x2d8>)
 800249c:	2204      	movs	r2, #4
 800249e:	701a      	strb	r2, [r3, #0]
			buffer[51] = (uint8_t)webRequest.ipd;
 80024a0:	4b62      	ldr	r3, [pc, #392]	; (800262c <RequestHandle+0x2d8>)
 80024a2:	791a      	ldrb	r2, [r3, #4]
 80024a4:	4b62      	ldr	r3, [pc, #392]	; (8002630 <RequestHandle+0x2dc>)
 80024a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			TransmitESP(&buffer[40],strlen((const char*)&buffer[40]),TRUE);
 80024aa:	4862      	ldr	r0, [pc, #392]	; (8002634 <RequestHandle+0x2e0>)
 80024ac:	f7fd fea2 	bl	80001f4 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2201      	movs	r2, #1
 80024b6:	4619      	mov	r1, r3
 80024b8:	485e      	ldr	r0, [pc, #376]	; (8002634 <RequestHandle+0x2e0>)
 80024ba:	f7fe fc4b 	bl	8000d54 <TransmitESP>
			break;
 80024be:	e012      	b.n	80024e6 <RequestHandle+0x192>

		case 'f':
			webRequest.process = Spam;
 80024c0:	4b5a      	ldr	r3, [pc, #360]	; (800262c <RequestHandle+0x2d8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
			buffer[33] = (uint8_t)webRequest.ipd;
 80024c6:	4b59      	ldr	r3, [pc, #356]	; (800262c <RequestHandle+0x2d8>)
 80024c8:	791a      	ldrb	r2, [r3, #4]
 80024ca:	4b59      	ldr	r3, [pc, #356]	; (8002630 <RequestHandle+0x2dc>)
 80024cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			TransmitESP(&buffer[21], strlen((const char*)&buffer[21]), TRUE);
 80024d0:	4859      	ldr	r0, [pc, #356]	; (8002638 <RequestHandle+0x2e4>)
 80024d2:	f7fd fe8f 	bl	80001f4 <strlen>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	4619      	mov	r1, r3
 80024de:	4856      	ldr	r0, [pc, #344]	; (8002638 <RequestHandle+0x2e4>)
 80024e0:	f7fe fc38 	bl	8000d54 <TransmitESP>
			break;
 80024e4:	bf00      	nop
		switch(webRequest.get)
 80024e6:	e097      	b.n	8002618 <RequestHandle+0x2c4>

		}
	}
	else if ((req = strstr(buf, "OK\r\n>"))!=NULL){ //SEND BITS
 80024e8:	4954      	ldr	r1, [pc, #336]	; (800263c <RequestHandle+0x2e8>)
 80024ea:	68b8      	ldr	r0, [r7, #8]
 80024ec:	f008 ff65 	bl	800b3ba <strstr>
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d054      	beq.n	80025a2 <RequestHandle+0x24e>
		switch(webRequest.process)
 80024f8:	4b4c      	ldr	r3, [pc, #304]	; (800262c <RequestHandle+0x2d8>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	2b03      	cmp	r3, #3
 8002500:	f200 808a 	bhi.w	8002618 <RequestHandle+0x2c4>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <RequestHandle+0x1b8>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002533 	.word	0x08002533
 8002514:	0800253b 	.word	0x0800253b
 8002518:	08002543 	.word	0x08002543
		{
		case WebServer:
			TransmitESP(&buffer[100], strlen((const char*)&buffer[100]), TRUE); //AT+CIPSEND=IPD,1850
 800251c:	4848      	ldr	r0, [pc, #288]	; (8002640 <RequestHandle+0x2ec>)
 800251e:	f7fd fe69 	bl	80001f4 <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	b29b      	uxth	r3, r3
 8002526:	2201      	movs	r2, #1
 8002528:	4619      	mov	r1, r3
 800252a:	4845      	ldr	r0, [pc, #276]	; (8002640 <RequestHandle+0x2ec>)
 800252c:	f7fe fc12 	bl	8000d54 <TransmitESP>
			break;
 8002530:	e072      	b.n	8002618 <RequestHandle+0x2c4>

		case ToggleBlueLED:
			ToggleLED(Blue);
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f890 	bl	8002658 <ToggleLED>
			break;
 8002538:	e06e      	b.n	8002618 <RequestHandle+0x2c4>

		case ToggleRedLED:
			ToggleLED(Red);
 800253a:	2001      	movs	r0, #1
 800253c:	f000 f88c 	bl	8002658 <ToggleLED>
			break;
 8002540:	e06a      	b.n	8002618 <RequestHandle+0x2c4>

		case GetGreenLED:
			if(pixyState.spiTurnState==MOVE_FORWARD){TransmitESP(&buffer[80],strlen((const char*)&buffer[80]), TRUE);}
 8002542:	4b40      	ldr	r3, [pc, #256]	; (8002644 <RequestHandle+0x2f0>)
 8002544:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <RequestHandle+0x20e>
 800254c:	483e      	ldr	r0, [pc, #248]	; (8002648 <RequestHandle+0x2f4>)
 800254e:	f7fd fe51 	bl	80001f4 <strlen>
 8002552:	4603      	mov	r3, r0
 8002554:	b29b      	uxth	r3, r3
 8002556:	2201      	movs	r2, #1
 8002558:	4619      	mov	r1, r3
 800255a:	483b      	ldr	r0, [pc, #236]	; (8002648 <RequestHandle+0x2f4>)
 800255c:	f7fe fbfa 	bl	8000d54 <TransmitESP>
			else if(pixyState.spiTurnState==MOVE_LEFT){TransmitESP(&buffer[85],strlen((const char*)&buffer[85]), TRUE);}
			else if(pixyState.spiTurnState==MOVE_RIGHT){TransmitESP(&buffer[90],strlen((const char*)&buffer[90]), TRUE);}
			break;
 8002560:	e059      	b.n	8002616 <RequestHandle+0x2c2>
			else if(pixyState.spiTurnState==MOVE_LEFT){TransmitESP(&buffer[85],strlen((const char*)&buffer[85]), TRUE);}
 8002562:	4b38      	ldr	r3, [pc, #224]	; (8002644 <RequestHandle+0x2f0>)
 8002564:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002568:	2b02      	cmp	r3, #2
 800256a:	d10a      	bne.n	8002582 <RequestHandle+0x22e>
 800256c:	4837      	ldr	r0, [pc, #220]	; (800264c <RequestHandle+0x2f8>)
 800256e:	f7fd fe41 	bl	80001f4 <strlen>
 8002572:	4603      	mov	r3, r0
 8002574:	b29b      	uxth	r3, r3
 8002576:	2201      	movs	r2, #1
 8002578:	4619      	mov	r1, r3
 800257a:	4834      	ldr	r0, [pc, #208]	; (800264c <RequestHandle+0x2f8>)
 800257c:	f7fe fbea 	bl	8000d54 <TransmitESP>
			break;
 8002580:	e049      	b.n	8002616 <RequestHandle+0x2c2>
			else if(pixyState.spiTurnState==MOVE_RIGHT){TransmitESP(&buffer[90],strlen((const char*)&buffer[90]), TRUE);}
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <RequestHandle+0x2f0>)
 8002584:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002588:	2b01      	cmp	r3, #1
 800258a:	d144      	bne.n	8002616 <RequestHandle+0x2c2>
 800258c:	4830      	ldr	r0, [pc, #192]	; (8002650 <RequestHandle+0x2fc>)
 800258e:	f7fd fe31 	bl	80001f4 <strlen>
 8002592:	4603      	mov	r3, r0
 8002594:	b29b      	uxth	r3, r3
 8002596:	2201      	movs	r2, #1
 8002598:	4619      	mov	r1, r3
 800259a:	482d      	ldr	r0, [pc, #180]	; (8002650 <RequestHandle+0x2fc>)
 800259c:	f7fe fbda 	bl	8000d54 <TransmitESP>
			break;
 80025a0:	e039      	b.n	8002616 <RequestHandle+0x2c2>
		}
	}
	else if ((req = strstr(buf, "SEND OK"))!=NULL){ //CIPCLOSE
 80025a2:	492c      	ldr	r1, [pc, #176]	; (8002654 <RequestHandle+0x300>)
 80025a4:	68b8      	ldr	r0, [r7, #8]
 80025a6:	f008 ff08 	bl	800b3ba <strstr>
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00f      	beq.n	80025d2 <RequestHandle+0x27e>
		buffer[33] = (uint8_t)webRequest.ipd;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <RequestHandle+0x2d8>)
 80025b4:	791a      	ldrb	r2, [r3, #4]
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <RequestHandle+0x2dc>)
 80025b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		TransmitESP(&buffer[21], strlen((const char*)&buffer[21]), TRUE);
 80025bc:	481e      	ldr	r0, [pc, #120]	; (8002638 <RequestHandle+0x2e4>)
 80025be:	f7fd fe19 	bl	80001f4 <strlen>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2201      	movs	r2, #1
 80025c8:	4619      	mov	r1, r3
 80025ca:	481b      	ldr	r0, [pc, #108]	; (8002638 <RequestHandle+0x2e4>)
 80025cc:	f7fe fbc2 	bl	8000d54 <TransmitESP>
		}
		if(uartState[UART1].rxState == Wait){
			uartState[UART1].rxState = GotData;
		}
	}
}
 80025d0:	e022      	b.n	8002618 <RequestHandle+0x2c4>
		uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz] = 0;
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <RequestHandle+0x2cc>)
 80025d4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80025d8:	4a11      	ldr	r2, [pc, #68]	; (8002620 <RequestHandle+0x2cc>)
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	2200      	movs	r2, #0
 80025e0:	84da      	strh	r2, [r3, #38]	; 0x26
		if ((uartState[UART1].txCircArrayPtr) == (CircSize-1)){
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <RequestHandle+0x2cc>)
 80025e4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80025e8:	2b09      	cmp	r3, #9
 80025ea:	d104      	bne.n	80025f6 <RequestHandle+0x2a2>
			uartState[UART1].txCircArrayPtr = 0;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <RequestHandle+0x2cc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80025f4:	e007      	b.n	8002606 <RequestHandle+0x2b2>
			uartState[UART1].txCircArrayPtr+=1;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <RequestHandle+0x2cc>)
 80025f8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80025fc:	3301      	adds	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <RequestHandle+0x2cc>)
 8002602:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		if(uartState[UART1].rxState == Wait){
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <RequestHandle+0x2cc>)
 8002608:	7e1b      	ldrb	r3, [r3, #24]
 800260a:	2b05      	cmp	r3, #5
 800260c:	d104      	bne.n	8002618 <RequestHandle+0x2c4>
			uartState[UART1].rxState = GotData;
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <RequestHandle+0x2cc>)
 8002610:	2201      	movs	r2, #1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	e000      	b.n	8002618 <RequestHandle+0x2c4>
			break;
 8002616:	bf00      	nop
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200039a8 	.word	0x200039a8
 8002624:	0800f5c4 	.word	0x0800f5c4
 8002628:	0800f5cc 	.word	0x0800f5cc
 800262c:	20003a44 	.word	0x20003a44
 8002630:	2000279c 	.word	0x2000279c
 8002634:	200027c4 	.word	0x200027c4
 8002638:	200027b1 	.word	0x200027b1
 800263c:	0800f5d4 	.word	0x0800f5d4
 8002640:	20002800 	.word	0x20002800
 8002644:	20003978 	.word	0x20003978
 8002648:	200027ec 	.word	0x200027ec
 800264c:	200027f1 	.word	0x200027f1
 8002650:	200027f6 	.word	0x200027f6
 8002654:	0800f5dc 	.word	0x0800f5dc

08002658 <ToggleLED>:

void ToggleLED(uint8_t led)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	switch(led) //SET is off RESET is on
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <ToggleLED+0x16>
 8002668:	2b01      	cmp	r3, #1
 800266a:	d023      	beq.n	80026b4 <ToggleLED+0x5c>
			TransmitESP(&buffer[70],strlen((const char*)&buffer[70]),TRUE);
		}
		HAL_GPIO_TogglePin(Red_LD_GPIO_Port, Red_LD_Pin);
		break;
	}
}
 800266c:	e045      	b.n	80026fa <ToggleLED+0xa2>
		if(HAL_GPIO_ReadPin(Blue_LD_GPIO_Port, Blue_LD_Pin) == GPIO_PIN_SET){
 800266e:	2101      	movs	r1, #1
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f002 fcac 	bl	8004fd0 <HAL_GPIO_ReadPin>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d10a      	bne.n	8002694 <ToggleLED+0x3c>
			TransmitESP(&buffer[65],strlen((const char*)&buffer[65]),TRUE);
 800267e:	4821      	ldr	r0, [pc, #132]	; (8002704 <ToggleLED+0xac>)
 8002680:	f7fd fdb8 	bl	80001f4 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	b29b      	uxth	r3, r3
 8002688:	2201      	movs	r2, #1
 800268a:	4619      	mov	r1, r3
 800268c:	481d      	ldr	r0, [pc, #116]	; (8002704 <ToggleLED+0xac>)
 800268e:	f7fe fb61 	bl	8000d54 <TransmitESP>
 8002692:	e009      	b.n	80026a8 <ToggleLED+0x50>
			TransmitESP(&buffer[60],strlen((const char*)&buffer[60]),TRUE);
 8002694:	481c      	ldr	r0, [pc, #112]	; (8002708 <ToggleLED+0xb0>)
 8002696:	f7fd fdad 	bl	80001f4 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	b29b      	uxth	r3, r3
 800269e:	2201      	movs	r2, #1
 80026a0:	4619      	mov	r1, r3
 80026a2:	4819      	ldr	r0, [pc, #100]	; (8002708 <ToggleLED+0xb0>)
 80026a4:	f7fe fb56 	bl	8000d54 <TransmitESP>
		HAL_GPIO_TogglePin(Blue_LD_GPIO_Port, Blue_LD_Pin);
 80026a8:	2101      	movs	r1, #1
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ae:	f002 fcbf 	bl	8005030 <HAL_GPIO_TogglePin>
		break;
 80026b2:	e022      	b.n	80026fa <ToggleLED+0xa2>
		if(HAL_GPIO_ReadPin(Red_LD_GPIO_Port, Red_LD_Pin) == GPIO_PIN_SET){
 80026b4:	2102      	movs	r1, #2
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f002 fc89 	bl	8004fd0 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10a      	bne.n	80026da <ToggleLED+0x82>
			TransmitESP(&buffer[75],strlen((const char*)&buffer[75]),TRUE);
 80026c4:	4811      	ldr	r0, [pc, #68]	; (800270c <ToggleLED+0xb4>)
 80026c6:	f7fd fd95 	bl	80001f4 <strlen>
 80026ca:	4603      	mov	r3, r0
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2201      	movs	r2, #1
 80026d0:	4619      	mov	r1, r3
 80026d2:	480e      	ldr	r0, [pc, #56]	; (800270c <ToggleLED+0xb4>)
 80026d4:	f7fe fb3e 	bl	8000d54 <TransmitESP>
 80026d8:	e009      	b.n	80026ee <ToggleLED+0x96>
			TransmitESP(&buffer[70],strlen((const char*)&buffer[70]),TRUE);
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <ToggleLED+0xb8>)
 80026dc:	f7fd fd8a 	bl	80001f4 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2201      	movs	r2, #1
 80026e6:	4619      	mov	r1, r3
 80026e8:	4809      	ldr	r0, [pc, #36]	; (8002710 <ToggleLED+0xb8>)
 80026ea:	f7fe fb33 	bl	8000d54 <TransmitESP>
		HAL_GPIO_TogglePin(Red_LD_GPIO_Port, Red_LD_Pin);
 80026ee:	2102      	movs	r1, #2
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f4:	f002 fc9c 	bl	8005030 <HAL_GPIO_TogglePin>
		break;
 80026f8:	bf00      	nop
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200027dd 	.word	0x200027dd
 8002708:	200027d8 	.word	0x200027d8
 800270c:	200027e7 	.word	0x200027e7
 8002710:	200027e2 	.word	0x200027e2

08002714 <Uart_Init>:
 *
 */
#include "esp_webserver_uart_ring_buffer_pixy.h"

void Uart_Init(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
	uartState[UART1].huartAdd 		= &huart1;
 800271a:	4b44      	ldr	r3, [pc, #272]	; (800282c <Uart_Init+0x118>)
 800271c:	4a44      	ldr	r2, [pc, #272]	; (8002830 <Uart_Init+0x11c>)
 800271e:	601a      	str	r2, [r3, #0]
	uartState[UART1].txbufferAdd 	= buffArray[UART2];
 8002720:	4b42      	ldr	r3, [pc, #264]	; (800282c <Uart_Init+0x118>)
 8002722:	4a44      	ldr	r2, [pc, #272]	; (8002834 <Uart_Init+0x120>)
 8002724:	611a      	str	r2, [r3, #16]
	uartState[UART1].txDex 			= UART2;
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <Uart_Init+0x118>)
 8002728:	2201      	movs	r2, #1
 800272a:	731a      	strb	r2, [r3, #12]
	uartState[UART1].rxdmaAdd 		= &hdma_usart1_rx;
 800272c:	4b3f      	ldr	r3, [pc, #252]	; (800282c <Uart_Init+0x118>)
 800272e:	4a42      	ldr	r2, [pc, #264]	; (8002838 <Uart_Init+0x124>)
 8002730:	605a      	str	r2, [r3, #4]
	uartState[UART1].txdmaAdd 		= &hdma_usart1_tx;
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <Uart_Init+0x118>)
 8002734:	4a41      	ldr	r2, [pc, #260]	; (800283c <Uart_Init+0x128>)
 8002736:	609a      	str	r2, [r3, #8]

	uartState[UART2].huartAdd 		= &huart2;
 8002738:	4b3c      	ldr	r3, [pc, #240]	; (800282c <Uart_Init+0x118>)
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <Uart_Init+0x12c>)
 800273c:	64da      	str	r2, [r3, #76]	; 0x4c
	uartState[UART2].txbufferAdd 	= buffArray[UART1];
 800273e:	4b3b      	ldr	r3, [pc, #236]	; (800282c <Uart_Init+0x118>)
 8002740:	4a40      	ldr	r2, [pc, #256]	; (8002844 <Uart_Init+0x130>)
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
	uartState[UART2].txDex 			= UART1;
 8002744:	4b39      	ldr	r3, [pc, #228]	; (800282c <Uart_Init+0x118>)
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	uartState[UART2].rxdmaAdd 		= &hdma_usart2_rx;
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <Uart_Init+0x118>)
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <Uart_Init+0x134>)
 8002750:	651a      	str	r2, [r3, #80]	; 0x50
	uartState[UART2].txdmaAdd 		= &hdma_usart2_tx;
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <Uart_Init+0x118>)
 8002754:	4a3d      	ldr	r2, [pc, #244]	; (800284c <Uart_Init+0x138>)
 8002756:	655a      	str	r2, [r3, #84]	; 0x54

	for (int i = 0; i <2; ++i)
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e05c      	b.n	8002818 <Uart_Init+0x104>
	{
		uartState[i].txState 		= Idle;
 800275e:	4a33      	ldr	r2, [pc, #204]	; (800282c <Uart_Init+0x118>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	214c      	movs	r1, #76	; 0x4c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3319      	adds	r3, #25
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]
		uartState[i].rxState 		= Idle;
 8002770:	4a2e      	ldr	r2, [pc, #184]	; (800282c <Uart_Init+0x118>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	214c      	movs	r1, #76	; 0x4c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3318      	adds	r3, #24
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
		uartState[i].InError 		= FALSE;
 8002782:	4a2a      	ldr	r2, [pc, #168]	; (800282c <Uart_Init+0x118>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	214c      	movs	r1, #76	; 0x4c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	331a      	adds	r3, #26
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
		uartState[i].rxbufferAdd 	= buffArray[i];
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f241 1295 	movw	r2, #4501	; 0x1195
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	4a29      	ldr	r2, [pc, #164]	; (8002844 <Uart_Init+0x130>)
 80027a0:	441a      	add	r2, r3
 80027a2:	4922      	ldr	r1, [pc, #136]	; (800282c <Uart_Init+0x118>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	204c      	movs	r0, #76	; 0x4c
 80027a8:	fb00 f303 	mul.w	r3, r0, r3
 80027ac:	440b      	add	r3, r1
 80027ae:	3314      	adds	r3, #20
 80027b0:	601a      	str	r2, [r3, #0]
		uartState[i].dataSize 		= 0;
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <Uart_Init+0x118>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	214c      	movs	r1, #76	; 0x4c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	331c      	adds	r3, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	801a      	strh	r2, [r3, #0]
		uartState[i].remainSize 	= MaxBufferSize;
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <Uart_Init+0x118>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	214c      	movs	r1, #76	; 0x4c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3320      	adds	r3, #32
 80027d2:	f241 1295 	movw	r2, #4501	; 0x1195
 80027d6:	801a      	strh	r2, [r3, #0]
		uartState[i].rxDex 			= i;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	b2d8      	uxtb	r0, r3
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <Uart_Init+0x118>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	214c      	movs	r1, #76	; 0x4c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	330d      	adds	r3, #13
 80027ea:	4602      	mov	r2, r0
 80027ec:	701a      	strb	r2, [r3, #0]
		uartState[i].rxCircArrayPtr = 0;
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <Uart_Init+0x118>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	214c      	movs	r1, #76	; 0x4c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3322      	adds	r3, #34	; 0x22
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
		uartState[i].txCircArrayPtr = 0;
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <Uart_Init+0x118>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	214c      	movs	r1, #76	; 0x4c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3323      	adds	r3, #35	; 0x23
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <2; ++i)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3301      	adds	r3, #1
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	dd9f      	ble.n	800275e <Uart_Init+0x4a>
	}
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	200039a8 	.word	0x200039a8
 8002830:	200001c8 	.word	0x200001c8
 8002834:	2000157d 	.word	0x2000157d
 8002838:	200002d8 	.word	0x200002d8
 800283c:	2000031c 	.word	0x2000031c
 8002840:	20000250 	.word	0x20000250
 8002844:	200003e8 	.word	0x200003e8
 8002848:	20000360 	.word	0x20000360
 800284c:	200003a4 	.word	0x200003a4

08002850 <Flag_Init>:

void Flag_Init(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	stateFlag.autoinitFlag 			= 0;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <Flag_Init+0x34>)
 8002856:	2200      	movs	r2, #0
 8002858:	705a      	strb	r2, [r3, #1]
	stateFlag.rxFlag 				= 0;
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <Flag_Init+0x34>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
	webRequest.request 				= 0;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <Flag_Init+0x38>)
 8002862:	2200      	movs	r2, #0
 8002864:	709a      	strb	r2, [r3, #2]
	webRequest.requestAction 		= 0;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <Flag_Init+0x38>)
 8002868:	2200      	movs	r2, #0
 800286a:	705a      	strb	r2, [r3, #1]
	webRequest.process 				= 0;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <Flag_Init+0x38>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
	webRequest.action 				= 0;
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <Flag_Init+0x38>)
 8002874:	2200      	movs	r2, #0
 8002876:	70da      	strb	r2, [r3, #3]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20003a40 	.word	0x20003a40
 8002888:	20003a44 	.word	0x20003a44

0800288c <Pixy_Init>:

void Pixy_Init(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
	pixyState.hspi					= &hspi2;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <Pixy_Init+0x7c>)
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <Pixy_Init+0x80>)
 8002894:	601a      	str	r2, [r3, #0]
	pixyState.rxbufferAdd			= spiBuffArray;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <Pixy_Init+0x7c>)
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <Pixy_Init+0x84>)
 800289a:	605a      	str	r2, [r3, #4]
	pixyState.spiState 				= Idle;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <Pixy_Init+0x7c>)
 800289e:	2202      	movs	r2, #2
 80028a0:	721a      	strb	r2, [r3, #8]
	pixyState.spiChecksum 			= 3;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <Pixy_Init+0x7c>)
 80028a4:	2203      	movs	r2, #3
 80028a6:	725a      	strb	r2, [r3, #9]
	pixyState.dataSize				= MaxSpiSize;
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <Pixy_Init+0x7c>)
 80028aa:	2284      	movs	r2, #132	; 0x84
 80028ac:	815a      	strh	r2, [r3, #10]

	pixyState.getVersion	 		= pixyGetVersion;
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <Pixy_Init+0x7c>)
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <Pixy_Init+0x88>)
 80028b2:	60da      	str	r2, [r3, #12]
	pixyState.setLamp	 			= pixySetLamp;
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <Pixy_Init+0x7c>)
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <Pixy_Init+0x8c>)
 80028b8:	611a      	str	r2, [r3, #16]
	pixyState.getAllFeatures	 	= pixyGetAllFeatures;
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <Pixy_Init+0x7c>)
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <Pixy_Init+0x90>)
 80028be:	615a      	str	r2, [r3, #20]
	pixyState.getMainFeatures	 	= pixyGetMainFeatures;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <Pixy_Init+0x7c>)
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <Pixy_Init+0x94>)
 80028c4:	619a      	str	r2, [r3, #24]

	pixyState.IntersectionDecision  = NONE;
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <Pixy_Init+0x7c>)
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pixyState.vectorX				= 0;
 80028ce:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <Pixy_Init+0x7c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pixyState.vectorY               = 0;
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <Pixy_Init+0x7c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pixyState.branchCount			= 0;
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <Pixy_Init+0x7c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pixyState.barcodeId				= BARCODE_NULL;
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <Pixy_Init+0x7c>)
 80028e8:	2210      	movs	r2, #16
 80028ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pixyState.barcodeY              = 0;
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <Pixy_Init+0x7c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	pixyState.spiTurnState			= MOVE_FORWARD;
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <Pixy_Init+0x7c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	20003978 	.word	0x20003978
 800290c:	20000118 	.word	0x20000118
 8002910:	20002714 	.word	0x20002714
 8002914:	20000014 	.word	0x20000014
 8002918:	20000018 	.word	0x20000018
 800291c:	20000028 	.word	0x20000028
 8002920:	20000020 	.word	0x20000020

08002924 <Motor_Init>:

void Motor_Init(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	motorState.leftSpd              = 0;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <Motor_Init+0x1c>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
	motorState.rightSpd             = 0;
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <Motor_Init+0x1c>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20003a4c 	.word	0x20003a4c

08002944 <String_Init>:

void String_Init(uint8_t* buffer)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	strcpy((char*)&buffer[0],(char*)CIPSEND); 		//AT+CIPSEND= ,SizeofHTML
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a38      	ldr	r2, [pc, #224]	; (8002a30 <String_Init+0xec>)
 8002950:	461d      	mov	r5, r3
 8002952:	4614      	mov	r4, r2
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	6028      	str	r0, [r5, #0]
 8002958:	6069      	str	r1, [r5, #4]
 800295a:	60aa      	str	r2, [r5, #8]
 800295c:	60eb      	str	r3, [r5, #12]
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	6128      	str	r0, [r5, #16]
	strcpy((char*)&buffer[21],(char*)CIPCLOSE); 	//AT+CIPCLOSE=
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3315      	adds	r3, #21
 8002966:	4a33      	ldr	r2, [pc, #204]	; (8002a34 <String_Init+0xf0>)
 8002968:	461c      	mov	r4, r3
 800296a:	4615      	mov	r5, r2
 800296c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296e:	6020      	str	r0, [r4, #0]
 8002970:	6061      	str	r1, [r4, #4]
 8002972:	60a2      	str	r2, [r4, #8]
 8002974:	60e3      	str	r3, [r4, #12]
	strcpy((char*)&buffer[40],(char*)CIPSENDLED);	//AT+CIPSEND= ,2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3328      	adds	r3, #40	; 0x28
 800297a:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <String_Init+0xf4>)
 800297c:	461d      	mov	r5, r3
 800297e:	4614      	mov	r4, r2
 8002980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002982:	6028      	str	r0, [r5, #0]
 8002984:	6069      	str	r1, [r5, #4]
 8002986:	60aa      	str	r2, [r5, #8]
 8002988:	60eb      	str	r3, [r5, #12]
 800298a:	7823      	ldrb	r3, [r4, #0]
 800298c:	742b      	strb	r3, [r5, #16]
	strcpy((char*)&buffer[60],(char*)BlueLEDOFF);	//Blue LED OFF
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	333c      	adds	r3, #60	; 0x3c
 8002992:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <String_Init+0xf8>)
 8002994:	6810      	ldr	r0, [r2, #0]
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	7912      	ldrb	r2, [r2, #4]
 800299a:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[65],(char*)BlueLEDON);	//Blue LED ON
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3341      	adds	r3, #65	; 0x41
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <String_Init+0xfc>)
 80029a2:	6810      	ldr	r0, [r2, #0]
 80029a4:	6018      	str	r0, [r3, #0]
 80029a6:	7912      	ldrb	r2, [r2, #4]
 80029a8:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[70],(char*)RedLEDOFF);	//Red LED OFF
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3346      	adds	r3, #70	; 0x46
 80029ae:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <String_Init+0x100>)
 80029b0:	6810      	ldr	r0, [r2, #0]
 80029b2:	6018      	str	r0, [r3, #0]
 80029b4:	7912      	ldrb	r2, [r2, #4]
 80029b6:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[75],(char*)RedLEDON);		//Red LED ON
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	334b      	adds	r3, #75	; 0x4b
 80029bc:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <String_Init+0x104>)
 80029be:	6810      	ldr	r0, [r2, #0]
 80029c0:	6018      	str	r0, [r3, #0]
 80029c2:	7912      	ldrb	r2, [r2, #4]
 80029c4:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[80],(char*)PixyTurnFEED);	//Pixy move forward
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3350      	adds	r3, #80	; 0x50
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <String_Init+0x108>)
 80029cc:	6810      	ldr	r0, [r2, #0]
 80029ce:	6018      	str	r0, [r3, #0]
 80029d0:	7912      	ldrb	r2, [r2, #4]
 80029d2:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[85],(char*)PixyTurnLEFT);	//Pixy turn left
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3355      	adds	r3, #85	; 0x55
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <String_Init+0x10c>)
 80029da:	6810      	ldr	r0, [r2, #0]
 80029dc:	6018      	str	r0, [r3, #0]
 80029de:	7912      	ldrb	r2, [r2, #4]
 80029e0:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[90],(char*)PixyTurnRIGHT);//Pixy turn right
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	335a      	adds	r3, #90	; 0x5a
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <String_Init+0x110>)
 80029e8:	6810      	ldr	r0, [r2, #0]
 80029ea:	6018      	str	r0, [r3, #0]
 80029ec:	7912      	ldrb	r2, [r2, #4]
 80029ee:	711a      	strb	r2, [r3, #4]
	strcpy((char*)&buffer[100],(char*)html);		//Webserver HTML
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3364      	adds	r3, #100	; 0x64
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <String_Init+0x114>)
 80029f6:	4618      	mov	r0, r3
 80029f8:	4611      	mov	r1, r2
 80029fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80029fe:	461a      	mov	r2, r3
 8002a00:	f008 fb9e 	bl	800b140 <memcpy>
	strcpy((char*)&tpixBuffer[0],(char*)SpiPASSED);	//SPI Checksum Passed
 8002a04:	4a15      	ldr	r2, [pc, #84]	; (8002a5c <String_Init+0x118>)
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <String_Init+0x11c>)
 8002a08:	4614      	mov	r4, r2
 8002a0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a0c:	6020      	str	r0, [r4, #0]
 8002a0e:	6061      	str	r1, [r4, #4]
 8002a10:	60a2      	str	r2, [r4, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	7323      	strb	r3, [r4, #12]
	strcpy((char*)&tpixBuffer[13],(char*)SpiFAILED);//SPI Checksum Failed
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <String_Init+0x120>)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <String_Init+0x124>)
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a1e:	6020      	str	r0, [r4, #0]
 8002a20:	6061      	str	r1, [r4, #4]
 8002a22:	60a2      	str	r2, [r4, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	7323      	strb	r3, [r4, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a30:	0800f5e4 	.word	0x0800f5e4
 8002a34:	0800f5f8 	.word	0x0800f5f8
 8002a38:	0800f608 	.word	0x0800f608
 8002a3c:	0800f61c 	.word	0x0800f61c
 8002a40:	0800f624 	.word	0x0800f624
 8002a44:	0800f62c 	.word	0x0800f62c
 8002a48:	0800f634 	.word	0x0800f634
 8002a4c:	0800f63c 	.word	0x0800f63c
 8002a50:	0800f644 	.word	0x0800f644
 8002a54:	0800f64c 	.word	0x0800f64c
 8002a58:	0800f654 	.word	0x0800f654
 8002a5c:	20003930 	.word	0x20003930
 8002a60:	0800fe24 	.word	0x0800fe24
 8002a64:	2000393d 	.word	0x2000393d
 8002a68:	0800fe34 	.word	0x0800fe34

08002a6c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8002a76:	4a38      	ldr	r2, [pc, #224]	; (8002b58 <HD44780_Init+0xec>)
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8002a7c:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HD44780_Init+0xf0>)
 8002a7e:	2208      	movs	r2, #8
 8002a80:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HD44780_Init+0xf4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8002a88:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HD44780_Init+0xec>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d907      	bls.n	8002aa0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8002a90:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HD44780_Init+0xf4>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	f043 0308 	orr.w	r3, r3, #8
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HD44780_Init+0xf4>)
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e006      	b.n	8002aae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HD44780_Init+0xf4>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HD44780_Init+0xf4>)
 8002aac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8002aae:	f000 f985 	bl	8002dbc <DelayInit>
  HAL_Delay(50);
 8002ab2:	2032      	movs	r0, #50	; 0x32
 8002ab4:	f001 fd96 	bl	80045e4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HD44780_Init+0xf0>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f943 	bl	8002d48 <ExpanderWrite>
  HAL_Delay(1000);
 8002ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac6:	f001 fd8d 	bl	80045e4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8002aca:	2030      	movs	r0, #48	; 0x30
 8002acc:	f000 f92b 	bl	8002d26 <Write4Bits>
  DelayUS(4500);
 8002ad0:	f241 1094 	movw	r0, #4500	; 0x1194
 8002ad4:	f000 f99c 	bl	8002e10 <DelayUS>

  Write4Bits(0x03 << 4);
 8002ad8:	2030      	movs	r0, #48	; 0x30
 8002ada:	f000 f924 	bl	8002d26 <Write4Bits>
  DelayUS(4500);
 8002ade:	f241 1094 	movw	r0, #4500	; 0x1194
 8002ae2:	f000 f995 	bl	8002e10 <DelayUS>

  Write4Bits(0x03 << 4);
 8002ae6:	2030      	movs	r0, #48	; 0x30
 8002ae8:	f000 f91d 	bl	8002d26 <Write4Bits>
  DelayUS(4500);
 8002aec:	f241 1094 	movw	r0, #4500	; 0x1194
 8002af0:	f000 f98e 	bl	8002e10 <DelayUS>

  Write4Bits(0x02 << 4);
 8002af4:	2020      	movs	r0, #32
 8002af6:	f000 f916 	bl	8002d26 <Write4Bits>
  DelayUS(100);
 8002afa:	2064      	movs	r0, #100	; 0x64
 8002afc:	f000 f988 	bl	8002e10 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HD44780_Init+0xf4>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f043 0320 	orr.w	r3, r3, #32
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f8ce 	bl	8002cac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HD44780_Init+0xf8>)
 8002b12:	2204      	movs	r2, #4
 8002b14:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8002b16:	f000 f875 	bl	8002c04 <HD44780_Display>
  HD44780_Clear();
 8002b1a:	f000 f82b 	bl	8002b74 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HD44780_Init+0xfc>)
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <HD44780_Init+0xfc>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f8bc 	bl	8002cac <SendCommand>
  DelayUS(4500);
 8002b34:	f241 1094 	movw	r0, #4500	; 0x1194
 8002b38:	f000 f96a 	bl	8002e10 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002b3c:	490b      	ldr	r1, [pc, #44]	; (8002b6c <HD44780_Init+0x100>)
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f876 	bl	8002c30 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8002b44:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HD44780_Init+0x104>)
 8002b46:	2001      	movs	r0, #1
 8002b48:	f000 f872 	bl	8002c30 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002b4c:	f000 f81d 	bl	8002b8a <HD44780_Home>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200000bf 	.word	0x200000bf
 8002b5c:	200000c0 	.word	0x200000c0
 8002b60:	200000bc 	.word	0x200000bc
 8002b64:	200000bd 	.word	0x200000bd
 8002b68:	200000be 	.word	0x200000be
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000008 	.word	0x20000008

08002b74 <HD44780_Clear>:

void HD44780_Clear()
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f000 f897 	bl	8002cac <SendCommand>
  DelayUS(2000);
 8002b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b82:	f000 f945 	bl	8002e10 <DelayUS>
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HD44780_Home>:

void HD44780_Home()
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f000 f88c 	bl	8002cac <SendCommand>
  DelayUS(2000);
 8002b94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b98:	f000 f93a 	bl	8002e10 <DelayUS>
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460a      	mov	r2, r1
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HD44780_SetCursor+0x5c>)
 8002bb2:	f107 0408 	add.w	r4, r7, #8
 8002bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HD44780_SetCursor+0x60>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	79ba      	ldrb	r2, [r7, #6]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d303      	bcc.n	8002bce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HD44780_SetCursor+0x60>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8002bce:	79bb      	ldrb	r3, [r7, #6]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	4413      	add	r3, r2
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f85d 	bl	8002cac <SendCommand>
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0800fe44 	.word	0x0800fe44
 8002c00:	200000bf 	.word	0x200000bf

08002c04 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HD44780_Display+0x28>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HD44780_Display+0x28>)
 8002c14:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HD44780_Display+0x28>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f843 	bl	8002cac <SendCommand>
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200000bd 	.word	0x200000bd

08002c30 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f82a 	bl	8002cac <SendCommand>
  for (int i=0; i<8; i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e009      	b.n	8002c72 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f82e 	bl	8002cc8 <SendChar>
  for (int i=0; i<8; i++)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b07      	cmp	r3, #7
 8002c76:	ddf2      	ble.n	8002c5e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8002c8a:	e006      	b.n	8002c9a <HD44780_PrintStr+0x18>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f817 	bl	8002cc8 <SendChar>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f4      	bne.n	8002c8c <HD44780_PrintStr+0xa>
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f812 	bl	8002ce4 <Send>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f804 	bl	8002ce4 <Send>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	460a      	mov	r2, r1
 8002cee:	71fb      	strb	r3, [r7, #7]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f023 030f 	bic.w	r3, r3, #15
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f80b 	bl	8002d26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8002d10:	7bba      	ldrb	r2, [r7, #14]
 8002d12:	79bb      	ldrb	r3, [r7, #6]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f804 	bl	8002d26 <Write4Bits>
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f808 	bl	8002d48 <ExpanderWrite>
  PulseEnable(value);
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f820 	bl	8002d80 <PulseEnable>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <ExpanderWrite+0x30>)
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002d5e:	f107 020f 	add.w	r2, r7, #15
 8002d62:	230a      	movs	r3, #10
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2301      	movs	r3, #1
 8002d68:	214e      	movs	r1, #78	; 0x4e
 8002d6a:	4804      	ldr	r0, [pc, #16]	; (8002d7c <ExpanderWrite+0x34>)
 8002d6c:	f002 fa22 	bl	80051b4 <HAL_I2C_Master_Transmit>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200000c0 	.word	0x200000c0
 8002d7c:	200000c4 	.word	0x200000c4

08002d80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ffd8 	bl	8002d48 <ExpanderWrite>
  DelayUS(20);
 8002d98:	2014      	movs	r0, #20
 8002d9a:	f000 f839 	bl	8002e10 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffce 	bl	8002d48 <ExpanderWrite>
  DelayUS(20);
 8002dac:	2014      	movs	r0, #20
 8002dae:	f000 f82f 	bl	8002e10 <DelayUS>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <DelayInit>:

static void DelayInit(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <DelayInit+0x4c>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <DelayInit+0x4c>)
 8002dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <DelayInit+0x4c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <DelayInit+0x4c>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <DelayInit+0x50>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <DelayInit+0x50>)
 8002dde:	f023 0301 	bic.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <DelayInit+0x50>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <DelayInit+0x50>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <DelayInit+0x50>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002df6:	bf00      	nop
  __ASM volatile ("NOP");
 8002df8:	bf00      	nop
  __ASM volatile ("NOP");
 8002dfa:	bf00      	nop
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000edf0 	.word	0xe000edf0
 8002e0c:	e0001000 	.word	0xe0001000

08002e10 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <DelayUS+0x44>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <DelayUS+0x48>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9a      	lsrs	r2, r3, #18
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <DelayUS+0x4c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <DelayUS+0x4c>)
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8f6      	bhi.n	8002e32 <DelayUS+0x22>
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000030 	.word	0x20000030
 8002e58:	431bde83 	.word	0x431bde83
 8002e5c:	e0001000 	.word	0xe0001000

08002e60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002e68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002e78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002e80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002e88:	e000      	b.n	8002e8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002e8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002e8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f9      	beq.n	8002e8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002e96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e009      	b.n	8002ed4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60ba      	str	r2, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ffc9 	bl	8002e60 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dbf1      	blt.n	8002ec0 <_write+0x12>
	}
	return len;
 8002edc:	687b      	ldr	r3, [r7, #4]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef8:	d007      	beq.n	8002f0a <HAL_GPIO_EXTI_Callback+0x22>
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efe:	dc5f      	bgt.n	8002fc0 <HAL_GPIO_EXTI_Callback+0xd8>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d021      	beq.n	8002f48 <HAL_GPIO_EXTI_Callback+0x60>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d03d      	beq.n	8002f84 <HAL_GPIO_EXTI_Callback+0x9c>
				rightVCW.FallCount++;
				rightVCW.TimeDiff = uwTick - rightVCW.RiseTime;
			}
			break;
	}
}
 8002f08:	e05a      	b.n	8002fc0 <HAL_GPIO_EXTI_Callback+0xd8>
			 switch (delay_value) {
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_EXTI_Callback+0x3e>
 8002f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f1a:	d108      	bne.n	8002f2e <HAL_GPIO_EXTI_Callback+0x46>
				  case LONG_DELAY: delay_value = MEDIUM_DELAY;break;
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	e008      	b.n	8002f38 <HAL_GPIO_EXTI_Callback+0x50>
				  case MEDIUM_DELAY: delay_value = SHORT_DELAY;break;
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f28:	22fa      	movs	r2, #250	; 0xfa
 8002f2a:	801a      	strh	r2, [r3, #0]
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_EXTI_Callback+0x50>
				  default: delay_value = LONG_DELAY;break;
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	bf00      	nop
			 printf("The blink duration is %u milliseconds.\n", delay_value);
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4822      	ldr	r0, [pc, #136]	; (8002fcc <HAL_GPIO_EXTI_Callback+0xe4>)
 8002f42:	f008 f913 	bl	800b16c <iprintf>
			 break;
 8002f46:	e03b      	b.n	8002fc0 <HAL_GPIO_EXTI_Callback+0xd8>
			if(HAL_GPIO_ReadPin(left_vcw_GPIO_Port, left_vcw_Pin)){
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4821      	ldr	r0, [pc, #132]	; (8002fd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002f4c:	f002 f840 	bl	8004fd0 <HAL_GPIO_ReadPin>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_GPIO_EXTI_Callback+0x82>
				leftVCW.RiseCount++;
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f5e:	6013      	str	r3, [r2, #0]
				leftVCW.RiseTime = uwTick;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f66:	6093      	str	r3, [r2, #8]
			break;
 8002f68:	e02a      	b.n	8002fc0 <HAL_GPIO_EXTI_Callback+0xd8>
				leftVCW.FallCount++;
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f72:	6053      	str	r3, [r2, #4]
				leftVCW.TimeDiff = uwTick - leftVCW.RiseTime;
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <HAL_GPIO_EXTI_Callback+0xec>)
 8002f80:	60d3      	str	r3, [r2, #12]
			break;
 8002f82:	e01d      	b.n	8002fc0 <HAL_GPIO_EXTI_Callback+0xd8>
			if(HAL_GPIO_ReadPin(right_vcw_GPIO_Port, right_vcw_Pin)){
 8002f84:	2102      	movs	r1, #2
 8002f86:	4812      	ldr	r0, [pc, #72]	; (8002fd0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002f88:	f002 f822 	bl	8004fd0 <HAL_GPIO_ReadPin>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_GPIO_EXTI_Callback+0xbe>
				rightVCW.RiseCount++;
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002f9a:	6013      	str	r3, [r2, #0]
				rightVCW.RiseTime = uwTick;
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002fa2:	6093      	str	r3, [r2, #8]
			break;
 8002fa4:	e00b      	b.n	8002fbe <HAL_GPIO_EXTI_Callback+0xd6>
				rightVCW.FallCount++;
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002fae:	6053      	str	r3, [r2, #4]
				rightVCW.TimeDiff = uwTick - rightVCW.RiseTime;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <HAL_GPIO_EXTI_Callback+0xf4>)
 8002fbc:	60d3      	str	r3, [r2, #12]
			break;
 8002fbe:	bf00      	nop
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000010 	.word	0x20000010
 8002fcc:	0800fe54 	.word	0x0800fe54
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	20003a58 	.word	0x20003a58
 8002fd8:	20003a98 	.word	0x20003a98
 8002fdc:	20003a70 	.word	0x20003a70

08002fe0 <GetExpiryValTick>:
void GetExpiryValTick(uint32_t * maxTickVal, uint32_t delayMs){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	uint32_t currentTick = uwTick;
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <GetExpiryValTick+0x38>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
	*maxTickVal = ((0xFFFFFFFF - currentTick) >= delayMs) ? (currentTick + delayMs) : 0xFFFFFFFF ;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d803      	bhi.n	8003002 <GetExpiryValTick+0x22>
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	e001      	b.n	8003006 <GetExpiryValTick+0x26>
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20003a98 	.word	0x20003a98

0800301c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b0b8      	sub	sp, #224	; 0xe0
 8003020:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003022:	f001 fa79 	bl	8004518 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003026:	f000 fc35 	bl	8003894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800302a:	f000 fe45 	bl	8003cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800302e:	f000 fe0d 	bl	8003c4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003032:	f000 fddb 	bl	8003bec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8003036:	f000 fda9 	bl	8003b8c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800303a:	f000 fc95 	bl	8003968 <MX_I2C1_Init>
  MX_SPI2_Init();
 800303e:	f000 fcd3 	bl	80039e8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003042:	f000 fd0f 	bl	8003a64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t ExpiryTick;
  uint32_t AutoTick;

  Uart_Init();
 8003046:	f7ff fb65 	bl	8002714 <Uart_Init>
  String_Init(buffer);
 800304a:	48c2      	ldr	r0, [pc, #776]	; (8003354 <main+0x338>)
 800304c:	f7ff fc7a 	bl	8002944 <String_Init>
  Flag_Init();
 8003050:	f7ff fbfe 	bl	8002850 <Flag_Init>
  Pixy_Init();
 8003054:	f7ff fc1a 	bl	800288c <Pixy_Init>
  Motor_Init();
 8003058:	f7ff fc64 	bl	8002924 <Motor_Init>

  HD44780_Init(2);
 800305c:	2002      	movs	r0, #2
 800305e:	f7ff fd05 	bl	8002a6c <HD44780_Init>
  HD44780_Clear();
 8003062:	f7ff fd87 	bl	8002b74 <HD44780_Clear>

  pidState.kp = 0.2;
 8003066:	4bbc      	ldr	r3, [pc, #752]	; (8003358 <main+0x33c>)
 8003068:	4abc      	ldr	r2, [pc, #752]	; (800335c <main+0x340>)
 800306a:	601a      	str	r2, [r3, #0]
  motorState.leftSpd = 900;
 800306c:	4bbc      	ldr	r3, [pc, #752]	; (8003360 <main+0x344>)
 800306e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003072:	601a      	str	r2, [r3, #0]
  motorState.rightSpd = 900;
 8003074:	4bba      	ldr	r3, [pc, #744]	; (8003360 <main+0x344>)
 8003076:	f44f 7261 	mov.w	r2, #900	; 0x384
 800307a:	605a      	str	r2, [r3, #4]

  uint8_t IPbuffer[200];

  HAL_GPIO_WritePin(Blue_LD_GPIO_Port, Blue_LD_Pin, GPIO_PIN_SET);
 800307c:	2201      	movs	r2, #1
 800307e:	2101      	movs	r1, #1
 8003080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003084:	f001 ffbc 	bl	8005000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Red_LD_GPIO_Port, Red_LD_Pin, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	2102      	movs	r1, #2
 800308c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003090:	f001 ffb6 	bl	8005000 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GetExpiryValTick(&AutoTick, 200);
 8003094:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003098:	21c8      	movs	r1, #200	; 0xc8
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ffa0 	bl	8002fe0 <GetExpiryValTick>
  GetExpiryValTick(&ExpiryTick, (uint32_t) delay_value);
 80030a0:	4bb0      	ldr	r3, [pc, #704]	; (8003364 <main+0x348>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff96 	bl	8002fe0 <GetExpiryValTick>
  while (1)
  {
	if (uwTick >= ExpiryTick){
 80030b4:	4bac      	ldr	r3, [pc, #688]	; (8003368 <main+0x34c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030bc:	429a      	cmp	r2, r3
 80030be:	d30e      	bcc.n	80030de <main+0xc2>
	  HAL_GPIO_TogglePin(Green_LD2_GPIO_Port, Green_LD2_Pin);
 80030c0:	2120      	movs	r1, #32
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c6:	f001 ffb3 	bl	8005030 <HAL_GPIO_TogglePin>
	  GetExpiryValTick(&ExpiryTick, (uint32_t) delay_value);
 80030ca:	4ba6      	ldr	r3, [pc, #664]	; (8003364 <main+0x348>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff81 	bl	8002fe0 <GetExpiryValTick>
//		printf("Barcode ID: %u\r\n", pixyState.barcodeId);
//	  }
	}

	/* If UART Error when Rx, Abort */
	for (uint8_t nUART = 0; nUART <2; nUART++)
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030e4:	e07c      	b.n	80031e0 <main+0x1c4>
	{
		if (uartState[nUART].InError == TRUE)
 80030e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80030ea:	4aa0      	ldr	r2, [pc, #640]	; (800336c <main+0x350>)
 80030ec:	214c      	movs	r1, #76	; 0x4c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	331a      	adds	r3, #26
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d16c      	bne.n	80031d6 <main+0x1ba>
		{
			printf("UART%d Error Code: \"%lu\" ", (nUART+1), uartState[nUART].huartAdd->ErrorCode);
 80030fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003106:	4a99      	ldr	r2, [pc, #612]	; (800336c <main+0x350>)
 8003108:	204c      	movs	r0, #76	; 0x4c
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	4413      	add	r3, r2
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	461a      	mov	r2, r3
 8003118:	4895      	ldr	r0, [pc, #596]	; (8003370 <main+0x354>)
 800311a:	f008 f827 	bl	800b16c <iprintf>
			PrintError(uartState[nUART].huartAdd->ErrorCode, nUART);
 800311e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003122:	4a92      	ldr	r2, [pc, #584]	; (800336c <main+0x350>)
 8003124:	214c      	movs	r1, #76	; 0x4c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fff2 	bl	8001124 <PrintError>
			ClearAllData(nUART);
 8003140:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fcc9 	bl	8000adc <ClearAllData>
			memset(uartState[nUART].rxbufferAdd, 0, MaxBufferSize);
 800314a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800314e:	4a87      	ldr	r2, [pc, #540]	; (800336c <main+0x350>)
 8003150:	214c      	movs	r1, #76	; 0x4c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3314      	adds	r3, #20
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f241 1295 	movw	r2, #4501	; 0x1195
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f007 fffa 	bl	800b15c <memset>
	        if(uartState[nUART].huartAdd->ErrorCode >= 0b00010000)
 8003168:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800316c:	4a7f      	ldr	r2, [pc, #508]	; (800336c <main+0x350>)
 800316e:	214c      	movs	r1, #76	; 0x4c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d90b      	bls.n	8003198 <main+0x17c>
	        {
	        	HAL_DMA_Abort(uartState[nUART].rxdmaAdd);
 8003180:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8003184:	4a79      	ldr	r2, [pc, #484]	; (800336c <main+0x350>)
 8003186:	214c      	movs	r1, #76	; 0x4c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fc01 	bl	800499a <HAL_DMA_Abort>
	        }
	        HAL_UART_AbortReceive(uartState[nUART].huartAdd);
 8003198:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800319c:	4a73      	ldr	r2, [pc, #460]	; (800336c <main+0x350>)
 800319e:	214c      	movs	r1, #76	; 0x4c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f006 fd53 	bl	8009c54 <HAL_UART_AbortReceive>
			uartState[nUART].rxState = Idle;
 80031ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80031b2:	4a6e      	ldr	r2, [pc, #440]	; (800336c <main+0x350>)
 80031b4:	214c      	movs	r1, #76	; 0x4c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3318      	adds	r3, #24
 80031be:	2202      	movs	r2, #2
 80031c0:	701a      	strb	r2, [r3, #0]
			uartState[nUART].InError = FALSE;
 80031c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <main+0x350>)
 80031c8:	214c      	movs	r1, #76	; 0x4c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	331a      	adds	r3, #26
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
	for (uint8_t nUART = 0; nUART <2; nUART++)
 80031d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80031da:	3301      	adds	r3, #1
 80031dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	f67f af7e 	bls.w	80030e6 <main+0xca>
		}
	}

	/* Check for State Machine change prompt */
	if (uartState[UART2].rxState == TestAutoCheck){WordSearch(UART2);}
 80031ea:	4b60      	ldr	r3, [pc, #384]	; (800336c <main+0x350>)
 80031ec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80031f0:	2b06      	cmp	r3, #6
 80031f2:	d102      	bne.n	80031fa <main+0x1de>
 80031f4:	2001      	movs	r0, #1
 80031f6:	f7fe fb51 	bl	800189c <WordSearch>

	/* TEST mode */
	if (stateMachine == TEST)
 80031fa:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <main+0x358>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 808c 	bne.w	800331c <main+0x300>
	{
		for (uint8_t nUART = 0; nUART <2; nUART++)
 8003204:	2300      	movs	r3, #0
 8003206:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800320a:	e03a      	b.n	8003282 <main+0x266>
		{
			/* If RxIdle, Start Rx */
			if (uartState[nUART].rxState == Idle){StartReceiver(nUART);}
 800320c:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003210:	4a56      	ldr	r2, [pc, #344]	; (800336c <main+0x350>)
 8003212:	214c      	movs	r1, #76	; 0x4c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3318      	adds	r3, #24
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d104      	bne.n	800322c <main+0x210>
 8003222:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fcaa 	bl	8000b80 <StartReceiver>

			/* If RxGotData & Size != 0 */
			if (uartState[nUART].rxState == GotData && uartState[nUART].dataSize!=0){
 800322c:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003230:	4a4e      	ldr	r2, [pc, #312]	; (800336c <main+0x350>)
 8003232:	214c      	movs	r1, #76	; 0x4c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3318      	adds	r3, #24
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d11a      	bne.n	8003278 <main+0x25c>
 8003242:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003246:	4a49      	ldr	r2, [pc, #292]	; (800336c <main+0x350>)
 8003248:	214c      	movs	r1, #76	; 0x4c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	331c      	adds	r3, #28
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <main+0x25c>
				RecordIntoCirc(nUART, FALSE);
 8003258:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fe08 	bl	8000e74 <RecordIntoCirc>
				uartState[nUART].rxState = Idle;
 8003264:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003268:	4a40      	ldr	r2, [pc, #256]	; (800336c <main+0x350>)
 800326a:	214c      	movs	r1, #76	; 0x4c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3318      	adds	r3, #24
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]
		for (uint8_t nUART = 0; nUART <2; nUART++)
 8003278:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800327c:	3301      	adds	r3, #1
 800327e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8003282:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8003286:	2b01      	cmp	r3, #1
 8003288:	d9c0      	bls.n	800320c <main+0x1f0>
			}
		}
		/* If TxIdle & Size > 0 */
		if (uartState[UART1].txState == Idle && uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz] > 0){
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <main+0x350>)
 800328c:	7e5b      	ldrb	r3, [r3, #25]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d120      	bne.n	80032d4 <main+0x2b8>
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <main+0x350>)
 8003294:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003298:	4a34      	ldr	r2, [pc, #208]	; (800336c <main+0x350>)
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <main+0x2b8>
			Transmit(UART1, (uartState[UART1].txbufferAdd),uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Index],uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz], TRUE);
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <main+0x350>)
 80032a8:	6919      	ldr	r1, [r3, #16]
 80032aa:	4b30      	ldr	r3, [pc, #192]	; (800336c <main+0x350>)
 80032ac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80032b0:	4a2e      	ldr	r2, [pc, #184]	; (800336c <main+0x350>)
 80032b2:	331b      	adds	r3, #27
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	889a      	ldrh	r2, [r3, #4]
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <main+0x350>)
 80032bc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80032c0:	482a      	ldr	r0, [pc, #168]	; (800336c <main+0x350>)
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4403      	add	r3, r0
 80032c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80032ca:	2001      	movs	r0, #1
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fd fca4 	bl	8000c1c <Transmit>
		}
		if (uartState[UART2].txState == Idle && uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz] > 0){
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <main+0x350>)
 80032d6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d11e      	bne.n	800331c <main+0x300>
 80032de:	4b23      	ldr	r3, [pc, #140]	; (800336c <main+0x350>)
 80032e0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <main+0x350>)
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <main+0x300>
			Transmit(UART2, (uartState[UART2].txbufferAdd),uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Index],uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz], TRUE);
 80032f0:	4b1e      	ldr	r3, [pc, #120]	; (800336c <main+0x350>)
 80032f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <main+0x350>)
 80032f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <main+0x350>)
 80032fc:	3308      	adds	r3, #8
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	889a      	ldrh	r2, [r3, #4]
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <main+0x350>)
 8003306:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800330a:	4818      	ldr	r0, [pc, #96]	; (800336c <main+0x350>)
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4403      	add	r3, r0
 8003310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003312:	2001      	movs	r0, #1
 8003314:	9000      	str	r0, [sp, #0]
 8003316:	2001      	movs	r0, #1
 8003318:	f7fd fc80 	bl	8000c1c <Transmit>
		}
	}

	/* AUTO mode Flag, call ESP Init */
	if (stateMachine == AUTO_SERVER)
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <main+0x358>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 80b3 	bne.w	800348c <main+0x470>
	{
		Auto_Init(IPbuffer);
 8003326:	463b      	mov	r3, r7
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fe5f 	bl	8001fec <Auto_Init>
		if (stateFlag.rxFlag == 15)
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <main+0x35c>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	d10a      	bne.n	800334c <main+0x330>
		{
			/* if circular buffer completes, change to AUTO mode */
			if (uartState[UART1].rxCircArrayPtr == (uartState[UART1].txCircArrayPtr))
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <main+0x350>)
 8003338:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <main+0x350>)
 800333e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003342:	429a      	cmp	r2, r3
 8003344:	d102      	bne.n	800334c <main+0x330>
			{
//				ClearAllData(UART1);
				stateMachine = AUTO_LISTEN;
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <main+0x358>)
 8003348:	2202      	movs	r2, #2
 800334a:	701a      	strb	r2, [r3, #0]
			}
		}

		for (uint8_t nUART = 0; nUART <2; nUART++)
 800334c:	2300      	movs	r3, #0
 800334e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8003352:	e04e      	b.n	80033f2 <main+0x3d6>
 8003354:	2000279c 	.word	0x2000279c
 8003358:	20003a88 	.word	0x20003a88
 800335c:	3e4ccccd 	.word	0x3e4ccccd
 8003360:	20003a4c 	.word	0x20003a4c
 8003364:	20000010 	.word	0x20000010
 8003368:	20003a98 	.word	0x20003a98
 800336c:	200039a8 	.word	0x200039a8
 8003370:	0800fe7c 	.word	0x0800fe7c
 8003374:	20002798 	.word	0x20002798
 8003378:	20003a40 	.word	0x20003a40
		{
			/* If RxIdle, Start Rx */
			if (uartState[nUART].rxState == Idle){StartReceiver(nUART);}
 800337c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003380:	4aa7      	ldr	r2, [pc, #668]	; (8003620 <main+0x604>)
 8003382:	214c      	movs	r1, #76	; 0x4c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3318      	adds	r3, #24
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d104      	bne.n	800339c <main+0x380>
 8003392:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fbf2 	bl	8000b80 <StartReceiver>

			/* If RxGotData & Size != 0 */
			if (uartState[nUART].rxState == GotData && uartState[nUART].dataSize!=0){
 800339c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80033a0:	4a9f      	ldr	r2, [pc, #636]	; (8003620 <main+0x604>)
 80033a2:	214c      	movs	r1, #76	; 0x4c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3318      	adds	r3, #24
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d11a      	bne.n	80033e8 <main+0x3cc>
 80033b2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80033b6:	4a9a      	ldr	r2, [pc, #616]	; (8003620 <main+0x604>)
 80033b8:	214c      	movs	r1, #76	; 0x4c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	331c      	adds	r3, #28
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00f      	beq.n	80033e8 <main+0x3cc>
				RecordIntoCirc(nUART, FALSE);
 80033c8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd fd50 	bl	8000e74 <RecordIntoCirc>
				uartState[nUART].rxState = Idle;
 80033d4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80033d8:	4a91      	ldr	r2, [pc, #580]	; (8003620 <main+0x604>)
 80033da:	214c      	movs	r1, #76	; 0x4c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	3318      	adds	r3, #24
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
		for (uint8_t nUART = 0; nUART <2; nUART++)
 80033e8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80033ec:	3301      	adds	r3, #1
 80033ee:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80033f2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d9c0      	bls.n	800337c <main+0x360>
			}
		}
		/* If TxIdle & Size > 0 */
		if (uartState[UART1].txState == Idle && uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz] > 0){
 80033fa:	4b89      	ldr	r3, [pc, #548]	; (8003620 <main+0x604>)
 80033fc:	7e5b      	ldrb	r3, [r3, #25]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d120      	bne.n	8003444 <main+0x428>
 8003402:	4b87      	ldr	r3, [pc, #540]	; (8003620 <main+0x604>)
 8003404:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003408:	4a85      	ldr	r2, [pc, #532]	; (8003620 <main+0x604>)
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <main+0x428>
			Transmit(UART1, (uartState[UART1].txbufferAdd),uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Index],uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz], TRUE);
 8003416:	4b82      	ldr	r3, [pc, #520]	; (8003620 <main+0x604>)
 8003418:	6919      	ldr	r1, [r3, #16]
 800341a:	4b81      	ldr	r3, [pc, #516]	; (8003620 <main+0x604>)
 800341c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003420:	4a7f      	ldr	r2, [pc, #508]	; (8003620 <main+0x604>)
 8003422:	331b      	adds	r3, #27
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	889a      	ldrh	r2, [r3, #4]
 800342a:	4b7d      	ldr	r3, [pc, #500]	; (8003620 <main+0x604>)
 800342c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003430:	487b      	ldr	r0, [pc, #492]	; (8003620 <main+0x604>)
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800343a:	2001      	movs	r0, #1
 800343c:	9000      	str	r0, [sp, #0]
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fbec 	bl	8000c1c <Transmit>
		}
		if (uartState[UART2].txState == Idle && uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz] > 0){
 8003444:	4b76      	ldr	r3, [pc, #472]	; (8003620 <main+0x604>)
 8003446:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800344a:	2b02      	cmp	r3, #2
 800344c:	d11e      	bne.n	800348c <main+0x470>
 800344e:	4b74      	ldr	r3, [pc, #464]	; (8003620 <main+0x604>)
 8003450:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003454:	4a72      	ldr	r2, [pc, #456]	; (8003620 <main+0x604>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <main+0x470>
			Transmit(UART2, (uartState[UART2].txbufferAdd),uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Index],uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz], TRUE);
 8003460:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <main+0x604>)
 8003462:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003464:	4b6e      	ldr	r3, [pc, #440]	; (8003620 <main+0x604>)
 8003466:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800346a:	4a6d      	ldr	r2, [pc, #436]	; (8003620 <main+0x604>)
 800346c:	3308      	adds	r3, #8
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	889a      	ldrh	r2, [r3, #4]
 8003474:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <main+0x604>)
 8003476:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800347a:	4869      	ldr	r0, [pc, #420]	; (8003620 <main+0x604>)
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4403      	add	r3, r0
 8003480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003482:	2001      	movs	r0, #1
 8003484:	9000      	str	r0, [sp, #0]
 8003486:	2001      	movs	r0, #1
 8003488:	f7fd fbc8 	bl	8000c1c <Transmit>
		}
	}

	/* AUTO mode */
	if (stateMachine == AUTO_LISTEN)
 800348c:	4b65      	ldr	r3, [pc, #404]	; (8003624 <main+0x608>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	f040 80a9 	bne.w	80035e8 <main+0x5cc>
	{
		/* If UART1 RxIdle, start Rx */
		if (uartState[UART1].rxState == Idle){StartReceiver(UART1);}
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <main+0x604>)
 8003498:	7e1b      	ldrb	r3, [r3, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d102      	bne.n	80034a4 <main+0x488>
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd fb6e 	bl	8000b80 <StartReceiver>

		/* If UART1 RxGotData & Size != 0 */
		if (uartState[UART1].rxState == GotData && uartState[UART1].dataSize!=0){
 80034a4:	4b5e      	ldr	r3, [pc, #376]	; (8003620 <main+0x604>)
 80034a6:	7e1b      	ldrb	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10a      	bne.n	80034c2 <main+0x4a6>
 80034ac:	4b5c      	ldr	r3, [pc, #368]	; (8003620 <main+0x604>)
 80034ae:	8b9b      	ldrh	r3, [r3, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <main+0x4a6>
			RecordIntoCirc(UART1, TRUE);
 80034b4:	2101      	movs	r1, #1
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fd fcdc 	bl	8000e74 <RecordIntoCirc>
			uartState[UART1].rxState = Idle;
 80034bc:	4b58      	ldr	r3, [pc, #352]	; (8003620 <main+0x604>)
 80034be:	2202      	movs	r2, #2
 80034c0:	761a      	strb	r2, [r3, #24]
		}

		/* If UART1 TxIdle */
		if (uartState[UART1].txState == Idle)
 80034c2:	4b57      	ldr	r3, [pc, #348]	; (8003620 <main+0x604>)
 80034c4:	7e5b      	ldrb	r3, [r3, #25]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d10a      	bne.n	80034e0 <main+0x4c4>
		{
			/* If UART1 TxCirc Size = 0 */
			if(uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz] > 0)
 80034ca:	4b55      	ldr	r3, [pc, #340]	; (8003620 <main+0x604>)
 80034cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80034d0:	4a53      	ldr	r2, [pc, #332]	; (8003620 <main+0x604>)
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <main+0x4c4>
			{
				RequestHandle();
 80034dc:	f7fe ff3a 	bl	8002354 <RequestHandle>
			}
		}
		/* If SPI2 Idle */
		if (pixyState.spiState == Idle)
 80034e0:	4b51      	ldr	r3, [pc, #324]	; (8003628 <main+0x60c>)
 80034e2:	7a1b      	ldrb	r3, [r3, #8]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d156      	bne.n	8003596 <main+0x57a>
		{
		/* Flush SPI2 Rx Buffer */
			memset(pixyState.rxbufferAdd, 0, MaxSpiSize);
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <main+0x60c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2284      	movs	r2, #132	; 0x84
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f007 fe33 	bl	800b15c <memset>

			/* Set dataSize to Max SPI Size */
			pixyState.dataSize = MaxSpiSize;
 80034f6:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <main+0x60c>)
 80034f8:	2284      	movs	r2, #132	; 0x84
 80034fa:	815a      	strh	r2, [r3, #10]
			if (pixySetLampFlag == TRUE && pixyState.IntersectionDecision!= NONE)
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <main+0x610>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d12d      	bne.n	8003560 <main+0x544>
 8003504:	4b48      	ldr	r3, [pc, #288]	; (8003628 <main+0x60c>)
 8003506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800350a:	2b05      	cmp	r3, #5
 800350c:	d028      	beq.n	8003560 <main+0x544>
			{
				switch(pixyState.IntersectionDecision)
 800350e:	4b46      	ldr	r3, [pc, #280]	; (8003628 <main+0x60c>)
 8003510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003514:	2b02      	cmp	r3, #2
 8003516:	d00e      	beq.n	8003536 <main+0x51a>
 8003518:	2b02      	cmp	r3, #2
 800351a:	dc1c      	bgt.n	8003556 <main+0x53a>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <main+0x50a>
 8003520:	2b01      	cmp	r3, #1
 8003522:	d010      	beq.n	8003546 <main+0x52a>
 8003524:	e017      	b.n	8003556 <main+0x53a>
				{
				case MOVE_FORWARD:
					HAL_SPI_Transmit_IT(pixyState.hspi, pixyState.IntersectionGoStraight, 6);
 8003526:	4b40      	ldr	r3, [pc, #256]	; (8003628 <main+0x60c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <main+0x60c>)
 800352c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800352e:	2206      	movs	r2, #6
 8003530:	4618      	mov	r0, r3
 8003532:	f003 ff2f 	bl	8007394 <HAL_SPI_Transmit_IT>
				case MOVE_LEFT:
					HAL_SPI_Transmit_IT(pixyState.hspi, pixyState.IntersectionTurnLeft, 6);
 8003536:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <main+0x60c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3b      	ldr	r2, [pc, #236]	; (8003628 <main+0x60c>)
 800353c:	69d1      	ldr	r1, [r2, #28]
 800353e:	2206      	movs	r2, #6
 8003540:	4618      	mov	r0, r3
 8003542:	f003 ff27 	bl	8007394 <HAL_SPI_Transmit_IT>
				case MOVE_RIGHT:
					HAL_SPI_Transmit_IT(pixyState.hspi, pixyState.IntersectionTurnRight, 6);
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <main+0x60c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a37      	ldr	r2, [pc, #220]	; (8003628 <main+0x60c>)
 800354c:	6a11      	ldr	r1, [r2, #32]
 800354e:	2206      	movs	r2, #6
 8003550:	4618      	mov	r0, r3
 8003552:	f003 ff1f 	bl	8007394 <HAL_SPI_Transmit_IT>
				}
				pixyState.IntersectionDecision = NONE;
 8003556:	4b34      	ldr	r3, [pc, #208]	; (8003628 <main+0x60c>)
 8003558:	2205      	movs	r2, #5
 800355a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800355e:	e017      	b.n	8003590 <main+0x574>
			}
			else if(pixySetLampFlag == TRUE)
 8003560:	4b32      	ldr	r3, [pc, #200]	; (800362c <main+0x610>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d108      	bne.n	800357a <main+0x55e>
			{
//				if (uwTick >= AutoTick){
				/* Transmit GetAllFeatures */
				HAL_SPI_Transmit_IT(pixyState.hspi, pixyState.getAllFeatures, 6);
 8003568:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <main+0x60c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <main+0x60c>)
 800356e:	6951      	ldr	r1, [r2, #20]
 8003570:	2206      	movs	r2, #6
 8003572:	4618      	mov	r0, r3
 8003574:	f003 ff0e 	bl	8007394 <HAL_SPI_Transmit_IT>
 8003578:	e00a      	b.n	8003590 <main+0x574>
//				}
			}
			else
			{
				/* Transmit SetLamp */
				HAL_SPI_Transmit_IT(pixyState.hspi, pixyState.setLamp, 6);
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <main+0x60c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <main+0x60c>)
 8003580:	6911      	ldr	r1, [r2, #16]
 8003582:	2206      	movs	r2, #6
 8003584:	4618      	mov	r0, r3
 8003586:	f003 ff05 	bl	8007394 <HAL_SPI_Transmit_IT>
				pixySetLampFlag = TRUE;
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <main+0x610>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
			}

			/* Set SPI2 to Busy */
			pixyState.spiState = Busy;
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <main+0x60c>)
 8003592:	2207      	movs	r2, #7
 8003594:	721a      	strb	r2, [r3, #8]
		}

		if(pixyState.spiState == Busy)
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <main+0x60c>)
 8003598:	7a1b      	ldrb	r3, [r3, #8]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d112      	bne.n	80035c4 <main+0x5a8>
		{
			if(uwTick>=AutoTick)
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <main+0x614>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d30c      	bcc.n	80035c4 <main+0x5a8>
			{
				HAL_SPI_Abort_IT(&hspi2);
 80035aa:	4822      	ldr	r0, [pc, #136]	; (8003634 <main+0x618>)
 80035ac:	f004 f8e0 	bl	8007770 <HAL_SPI_Abort_IT>
				pixyState.spiState = Idle;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <main+0x60c>)
 80035b2:	2202      	movs	r2, #2
 80035b4:	721a      	strb	r2, [r3, #8]
				GetExpiryValTick(&AutoTick, 500);
 80035b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fd0e 	bl	8002fe0 <GetExpiryValTick>
			}
		}

		/* If SPI2 GotData */
		if(pixyState.spiState == GotData)
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <main+0x60c>)
 80035c6:	7a1b      	ldrb	r3, [r3, #8]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10d      	bne.n	80035e8 <main+0x5cc>
		{
			/* Process Data */
			pixyState.spiChecksum = AFC1Search(pixyState.rxbufferAdd, 0, &pixyState.dataSize);
 80035cc:	4b16      	ldr	r3, [pc, #88]	; (8003628 <main+0x60c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <main+0x61c>)
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fab7 	bl	8001b48 <AFC1Search>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <main+0x60c>)
 80035e0:	725a      	strb	r2, [r3, #9]

			/* Set SPI2 to Idle */
			pixyState.spiState = Idle;
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <main+0x60c>)
 80035e4:	2202      	movs	r2, #2
 80035e6:	721a      	strb	r2, [r3, #8]
		}
	}

	/* TPIX mode */
	if (stateMachine == TPIX)
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <main+0x608>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	f040 80fe 	bne.w	80037ee <main+0x7d2>
	{
		/* If UART2 RxIdle, start Rx */
		if(uartState[UART2].rxState == Idle){StartReceiver(UART2);}
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <main+0x604>)
 80035f4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d102      	bne.n	8003602 <main+0x5e6>
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7fd fabf 	bl	8000b80 <StartReceiver>

		/* If UART2 RxGotData */
		if (uartState[UART2].rxState == GotData)
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <main+0x604>)
 8003604:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003608:	2b01      	cmp	r3, #1
 800360a:	d134      	bne.n	8003676 <main+0x65a>
		{
			/* Clear out buffer of Max SPI Size before receiving data */
			for(uint16_t i = uartState[UART2].rxbuffDex + uartState[UART2].dataSize; i < (MaxSpiSize + uartState[UART2].rxbuffDex); i++)
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <main+0x604>)
 800360e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8003612:	4b03      	ldr	r3, [pc, #12]	; (8003620 <main+0x604>)
 8003614:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003618:	4413      	add	r3, r2
 800361a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 800361e:	e019      	b.n	8003654 <main+0x638>
 8003620:	200039a8 	.word	0x200039a8
 8003624:	20002798 	.word	0x20002798
 8003628:	20003978 	.word	0x20003978
 800362c:	20003a90 	.word	0x20003a90
 8003630:	20003a98 	.word	0x20003a98
 8003634:	20000118 	.word	0x20000118
 8003638:	20003982 	.word	0x20003982
			{
				uartState[UART2].rxbufferAdd[i] = 0;
 800363c:	4b8b      	ldr	r3, [pc, #556]	; (800386c <main+0x850>)
 800363e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003640:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003644:	4413      	add	r3, r2
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
			for(uint16_t i = uartState[UART2].rxbuffDex + uartState[UART2].dataSize; i < (MaxSpiSize + uartState[UART2].rxbuffDex); i++)
 800364a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800364e:	3301      	adds	r3, #1
 8003650:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8003654:	4b85      	ldr	r3, [pc, #532]	; (800386c <main+0x850>)
 8003656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800365a:	f103 0283 	add.w	r2, r3, #131	; 0x83
 800365e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003662:	429a      	cmp	r2, r3
 8003664:	daea      	bge.n	800363c <main+0x620>
			}

			/* Set Size to Max SPI Size */
			uartState[UART2].dataSize = MaxSpiSize;
 8003666:	4b81      	ldr	r3, [pc, #516]	; (800386c <main+0x850>)
 8003668:	2284      	movs	r2, #132	; 0x84
 800366a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
			RecordIntoCirc(UART2, FALSE);
 800366e:	2100      	movs	r1, #0
 8003670:	2001      	movs	r0, #1
 8003672:	f7fd fbff 	bl	8000e74 <RecordIntoCirc>
		}

		/* If PixyIdle */
		if (pixyState.spiState == Idle)
 8003676:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <main+0x854>)
 8003678:	7a1b      	ldrb	r3, [r3, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d14e      	bne.n	800371c <main+0x700>
		{
			/* If UART2 Circular Buffer is not empty */
			if (uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz]!=0)
 800367e:	4b7b      	ldr	r3, [pc, #492]	; (800386c <main+0x850>)
 8003680:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003684:	4a79      	ldr	r2, [pc, #484]	; (800386c <main+0x850>)
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800368e:	2b00      	cmp	r3, #0
 8003690:	d044      	beq.n	800371c <main+0x700>
			{
				/* Set Size to Max SPI Size */
				uartState[UART1].dataSize = MaxSpiSize;
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <main+0x850>)
 8003694:	2284      	movs	r2, #132	; 0x84
 8003696:	839a      	strh	r2, [r3, #28]

				/* Transmit and Receive the Max SPI Size */
				HAL_SPI_TransmitReceive_IT(&hspi2, &(uartState[UART2].rxbufferAdd[uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Index]]), (uartState[UART1].rxbufferAdd + uartState[UART1].rxbuffDex), uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz]);
 8003698:	4b74      	ldr	r3, [pc, #464]	; (800386c <main+0x850>)
 800369a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800369c:	4b73      	ldr	r3, [pc, #460]	; (800386c <main+0x850>)
 800369e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80036a2:	4972      	ldr	r1, [pc, #456]	; (800386c <main+0x850>)
 80036a4:	331b      	adds	r3, #27
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	889b      	ldrh	r3, [r3, #4]
 80036ac:	18d1      	adds	r1, r2, r3
 80036ae:	4b6f      	ldr	r3, [pc, #444]	; (800386c <main+0x850>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4a6e      	ldr	r2, [pc, #440]	; (800386c <main+0x850>)
 80036b4:	8bd2      	ldrh	r2, [r2, #30]
 80036b6:	441a      	add	r2, r3
 80036b8:	4b6c      	ldr	r3, [pc, #432]	; (800386c <main+0x850>)
 80036ba:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80036be:	486b      	ldr	r0, [pc, #428]	; (800386c <main+0x850>)
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80036c8:	486a      	ldr	r0, [pc, #424]	; (8003874 <main+0x858>)
 80036ca:	f003 ffa1 	bl	8007610 <HAL_SPI_TransmitReceive_IT>

				/* Set SPI State to Busy */
				pixyState.spiState = Busy;
 80036ce:	4b68      	ldr	r3, [pc, #416]	; (8003870 <main+0x854>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	721a      	strb	r2, [r3, #8]

				/* Set UART2 Circular Buffer to empty */
				uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz] = 0;
 80036d4:	4b65      	ldr	r3, [pc, #404]	; (800386c <main+0x850>)
 80036d6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80036da:	4a64      	ldr	r2, [pc, #400]	; (800386c <main+0x850>)
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

				if (uartState[UART2].txCircArrayPtr == (CircSize - 1))
 80036e6:	4b61      	ldr	r3, [pc, #388]	; (800386c <main+0x850>)
 80036e8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d104      	bne.n	80036fa <main+0x6de>
				{
					uartState[UART2].txCircArrayPtr = 0;
 80036f0:	4b5e      	ldr	r3, [pc, #376]	; (800386c <main+0x850>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 80036f8:	e007      	b.n	800370a <main+0x6ee>
				}
				else
				{
					uartState[UART2].txCircArrayPtr+=1;
 80036fa:	4b5c      	ldr	r3, [pc, #368]	; (800386c <main+0x850>)
 80036fc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003700:	3301      	adds	r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <main+0x850>)
 8003706:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
				}

				if(uartState[UART2].rxState == Wait)
 800370a:	4b58      	ldr	r3, [pc, #352]	; (800386c <main+0x850>)
 800370c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003710:	2b05      	cmp	r3, #5
 8003712:	d103      	bne.n	800371c <main+0x700>
				{
					uartState[UART2].rxState = GotData;
 8003714:	4b55      	ldr	r3, [pc, #340]	; (800386c <main+0x850>)
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				}
			}
		}

		/* If PixyGotData */
		if (pixyState.spiState == GotData)
 800371c:	4b54      	ldr	r3, [pc, #336]	; (8003870 <main+0x854>)
 800371e:	7a1b      	ldrb	r3, [r3, #8]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d140      	bne.n	80037a6 <main+0x78a>
		{
			/* Search for header bytes, validate checksum */
			pixyState.spiChecksum = AFC1Search(&(uartState[UART1].rxbufferAdd[uartState[UART1].rxbuffDex]), &uartState[UART1].rxbuffDex, &uartState[UART1].dataSize);
 8003724:	4b51      	ldr	r3, [pc, #324]	; (800386c <main+0x850>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4a50      	ldr	r2, [pc, #320]	; (800386c <main+0x850>)
 800372a:	8bd2      	ldrh	r2, [r2, #30]
 800372c:	4413      	add	r3, r2
 800372e:	4a52      	ldr	r2, [pc, #328]	; (8003878 <main+0x85c>)
 8003730:	4952      	ldr	r1, [pc, #328]	; (800387c <main+0x860>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fa08 	bl	8001b48 <AFC1Search>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <main+0x854>)
 800373e:	725a      	strb	r2, [r3, #9]

			/* If checksum valid */
			if (pixyState.spiChecksum == 2)
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <main+0x854>)
 8003742:	7a5b      	ldrb	r3, [r3, #9]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d10c      	bne.n	8003762 <main+0x746>
			{
				strcpy((char*)(&(uartState[UART1].rxbufferAdd[uartState[UART1].rxbuffDex + uartState[UART1].dataSize])),(char*)&(tpixBuffer[13]));
 8003748:	4b48      	ldr	r3, [pc, #288]	; (800386c <main+0x850>)
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	4a47      	ldr	r2, [pc, #284]	; (800386c <main+0x850>)
 800374e:	8bd2      	ldrh	r2, [r2, #30]
 8003750:	4611      	mov	r1, r2
 8003752:	4a46      	ldr	r2, [pc, #280]	; (800386c <main+0x850>)
 8003754:	8b92      	ldrh	r2, [r2, #28]
 8003756:	440a      	add	r2, r1
 8003758:	4413      	add	r3, r2
 800375a:	4949      	ldr	r1, [pc, #292]	; (8003880 <main+0x864>)
 800375c:	4618      	mov	r0, r3
 800375e:	f007 fe24 	bl	800b3aa <strcpy>
			}

			/* If checksum invalid */
			if (pixyState.spiChecksum == 1)
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <main+0x854>)
 8003764:	7a5b      	ldrb	r3, [r3, #9]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10c      	bne.n	8003784 <main+0x768>
			{
				strcpy((char*)(&(uartState[UART1].rxbufferAdd[uartState[UART1].rxbuffDex + uartState[UART1].dataSize])),(char*)&(tpixBuffer[0]));
 800376a:	4b40      	ldr	r3, [pc, #256]	; (800386c <main+0x850>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4a3f      	ldr	r2, [pc, #252]	; (800386c <main+0x850>)
 8003770:	8bd2      	ldrh	r2, [r2, #30]
 8003772:	4611      	mov	r1, r2
 8003774:	4a3d      	ldr	r2, [pc, #244]	; (800386c <main+0x850>)
 8003776:	8b92      	ldrh	r2, [r2, #28]
 8003778:	440a      	add	r2, r1
 800377a:	4413      	add	r3, r2
 800377c:	4941      	ldr	r1, [pc, #260]	; (8003884 <main+0x868>)
 800377e:	4618      	mov	r0, r3
 8003780:	f007 fe13 	bl	800b3aa <strcpy>
			}

			/* If checksum was found */
			if (pixyState.spiChecksum > 0)
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <main+0x854>)
 8003786:	7a5b      	ldrb	r3, [r3, #9]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <main+0x784>
			{
				uartState[UART1].dataSize += 12;
 800378c:	4b37      	ldr	r3, [pc, #220]	; (800386c <main+0x850>)
 800378e:	8b9b      	ldrh	r3, [r3, #28]
 8003790:	330c      	adds	r3, #12
 8003792:	b29a      	uxth	r2, r3
 8003794:	4b35      	ldr	r3, [pc, #212]	; (800386c <main+0x850>)
 8003796:	839a      	strh	r2, [r3, #28]
				RecordIntoCirc(UART1,FALSE);
 8003798:	2100      	movs	r1, #0
 800379a:	2000      	movs	r0, #0
 800379c:	f7fd fb6a 	bl	8000e74 <RecordIntoCirc>
			}

			/* Set SPI State to Idle */
			pixyState.spiState = Idle;
 80037a0:	4b33      	ldr	r3, [pc, #204]	; (8003870 <main+0x854>)
 80037a2:	2202      	movs	r2, #2
 80037a4:	721a      	strb	r2, [r3, #8]
		}

		/* If UART2 TxIdle */
		if (uartState[UART2].txState == Idle){
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <main+0x850>)
 80037a8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11e      	bne.n	80037ee <main+0x7d2>
			if(uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz] > 0){
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <main+0x850>)
 80037b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80037b6:	4a2d      	ldr	r2, [pc, #180]	; (800386c <main+0x850>)
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d015      	beq.n	80037ee <main+0x7d2>
			Transmit(UART2, (uartState[UART2].txbufferAdd),uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Index],uartState[UART1].circArray[uartState[UART1].txCircArrayPtr][Sz], TRUE);
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <main+0x850>)
 80037c4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <main+0x850>)
 80037c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <main+0x850>)
 80037ce:	3308      	adds	r3, #8
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	889a      	ldrh	r2, [r3, #4]
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <main+0x850>)
 80037d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80037dc:	4823      	ldr	r0, [pc, #140]	; (800386c <main+0x850>)
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4403      	add	r3, r0
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	2001      	movs	r0, #1
 80037e6:	9000      	str	r0, [sp, #0]
 80037e8:	2001      	movs	r0, #1
 80037ea:	f7fd fa17 	bl	8000c1c <Transmit>
			}
		}
	}

	if (stateMachine == TMOT)
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <main+0x86c>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	f47f ac5e 	bne.w	80030b4 <main+0x98>
	{
		/* If UART2 RxIdle, start Rx */
		if (uartState[UART2].rxState == Idle){StartReceiver(UART2);}
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <main+0x850>)
 80037fa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d102      	bne.n	8003808 <main+0x7ec>
 8003802:	2001      	movs	r0, #1
 8003804:	f7fd f9bc 	bl	8000b80 <StartReceiver>

		/* If UART2 RxGotData & Size != 0 */
		if (uartState[UART2].rxState == GotData && uartState[UART2].dataSize!=0){
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <main+0x850>)
 800380a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10c      	bne.n	800382c <main+0x810>
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <main+0x850>)
 8003814:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <main+0x810>
			RecordIntoCirc(UART2, FALSE);
 800381c:	2100      	movs	r1, #0
 800381e:	2001      	movs	r0, #1
 8003820:	f7fd fb28 	bl	8000e74 <RecordIntoCirc>
			uartState[UART2].rxState = Idle;
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <main+0x850>)
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		}

		/* If UART2 TxIdle */
		if (uartState[UART2].txState == Idle && uartState[UART2].circArray[uartState[UART2].txCircArrayPtr][Sz] > 0)
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <main+0x850>)
 800382e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003832:	2b02      	cmp	r3, #2
 8003834:	f47f ac3e 	bne.w	80030b4 <main+0x98>
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <main+0x850>)
 800383a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800383e:	4a0b      	ldr	r2, [pc, #44]	; (800386c <main+0x850>)
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8003848:	2b00      	cmp	r3, #0
 800384a:	f43f ac33 	beq.w	80030b4 <main+0x98>
		{
			MotorRequestHandle();
 800384e:	f7fd fcff 	bl	8001250 <MotorRequestHandle>
			VCW();
 8003852:	f7fd fef5 	bl	8001640 <VCW>
			if (uwTick >= BufferTick)
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <main+0x870>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <main+0x874>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	f4ff ac28 	bcc.w	80030b4 <main+0x98>
			{
				PID();
 8003864:	f7fd ff86 	bl	8001774 <PID>
	if (uwTick >= ExpiryTick){
 8003868:	e424      	b.n	80030b4 <main+0x98>
 800386a:	bf00      	nop
 800386c:	200039a8 	.word	0x200039a8
 8003870:	20003978 	.word	0x20003978
 8003874:	20000118 	.word	0x20000118
 8003878:	200039c4 	.word	0x200039c4
 800387c:	200039c6 	.word	0x200039c6
 8003880:	2000393d 	.word	0x2000393d
 8003884:	20003930 	.word	0x20003930
 8003888:	20002798 	.word	0x20002798
 800388c:	20003a98 	.word	0x20003a98
 8003890:	20003974 	.word	0x20003974

08003894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b0a6      	sub	sp, #152	; 0x98
 8003898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800389a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800389e:	2228      	movs	r2, #40	; 0x28
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f007 fc5a 	bl	800b15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	2258      	movs	r2, #88	; 0x58
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f007 fc4c 	bl	800b15c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80038c4:	2303      	movs	r3, #3
 80038c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80038c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80038cc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038ce:	2301      	movs	r3, #1
 80038d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038d2:	2310      	movs	r3, #16
 80038d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d8:	2302      	movs	r3, #2
 80038da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80038ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fff7 	bl	80058ec <HAL_RCC_OscConfig>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003904:	f000 fa80 	bl	8003e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003908:	230f      	movs	r3, #15
 800390a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800390c:	2302      	movs	r3, #2
 800390e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003910:	2300      	movs	r3, #0
 8003912:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800391a:	2300      	movs	r3, #0
 800391c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800391e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003922:	2102      	movs	r1, #2
 8003924:	4618      	mov	r0, r3
 8003926:	f003 f835 	bl	8006994 <HAL_RCC_ClockConfig>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003930:	f000 fa6a 	bl	8003e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <SystemClock_Config+0xd0>)
 8003936:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003940:	2300      	movs	r3, #0
 8003942:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8003944:	2300      	movs	r3, #0
 8003946:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fa58 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003956:	f000 fa57 	bl	8003e08 <Error_Handler>
  }
}
 800395a:	bf00      	nop
 800395c:	3798      	adds	r7, #152	; 0x98
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	00200023 	.word	0x00200023

08003968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <MX_I2C1_Init+0x74>)
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <MX_I2C1_Init+0x78>)
 8003970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <MX_I2C1_Init+0x74>)
 8003974:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <MX_I2C1_Init+0x7c>)
 8003976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <MX_I2C1_Init+0x74>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <MX_I2C1_Init+0x74>)
 8003980:	2201      	movs	r2, #1
 8003982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <MX_I2C1_Init+0x74>)
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <MX_I2C1_Init+0x74>)
 800398c:	2200      	movs	r2, #0
 800398e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <MX_I2C1_Init+0x74>)
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <MX_I2C1_Init+0x74>)
 8003998:	2200      	movs	r2, #0
 800399a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <MX_I2C1_Init+0x74>)
 800399e:	2200      	movs	r2, #0
 80039a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039a2:	480e      	ldr	r0, [pc, #56]	; (80039dc <MX_I2C1_Init+0x74>)
 80039a4:	f001 fb76 	bl	8005094 <HAL_I2C_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039ae:	f000 fa2b 	bl	8003e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039b2:	2100      	movs	r1, #0
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <MX_I2C1_Init+0x74>)
 80039b6:	f001 ff01 	bl	80057bc <HAL_I2CEx_ConfigAnalogFilter>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039c0:	f000 fa22 	bl	8003e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039c4:	2100      	movs	r1, #0
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_I2C1_Init+0x74>)
 80039c8:	f001 ff43 	bl	8005852 <HAL_I2CEx_ConfigDigitalFilter>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039d2:	f000 fa19 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200000c4 	.word	0x200000c4
 80039e0:	40005400 	.word	0x40005400
 80039e4:	2000090e 	.word	0x2000090e

080039e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <MX_SPI2_Init+0x74>)
 80039ee:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <MX_SPI2_Init+0x78>)
 80039f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <MX_SPI2_Init+0x74>)
 80039f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <MX_SPI2_Init+0x74>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a1e:	2220      	movs	r2, #32
 8003a20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a36:	2207      	movs	r2, #7
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <MX_SPI2_Init+0x74>)
 8003a48:	f003 fbf8 	bl	800723c <HAL_SPI_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003a52:	f000 f9d9 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000118 	.word	0x20000118
 8003a60:	40003800 	.word	0x40003800

08003a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08e      	sub	sp, #56	; 0x38
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a84:	463b      	mov	r3, r7
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	611a      	str	r2, [r3, #16]
 8003a92:	615a      	str	r2, [r3, #20]
 8003a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003a98:	4a3b      	ldr	r2, [pc, #236]	; (8003b88 <MX_TIM3_Init+0x124>)
 8003a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa2:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3599;
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003aaa:	f640 620f 	movw	r2, #3599	; 0xe0f
 8003aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab0:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003abc:	4831      	ldr	r0, [pc, #196]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003abe:	f004 fe69 	bl	8008794 <HAL_TIM_Base_Init>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003ac8:	f000 f99e 	bl	8003e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	482a      	ldr	r0, [pc, #168]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003ada:	f005 f9cf 	bl	8008e7c <HAL_TIM_ConfigClockSource>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003ae4:	f000 f990 	bl	8003e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ae8:	4826      	ldr	r0, [pc, #152]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003aea:	f004 feaa 	bl	8008842 <HAL_TIM_PWM_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003af4:	f000 f988 	bl	8003e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4619      	mov	r1, r3
 8003b06:	481f      	ldr	r0, [pc, #124]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b08:	f005 fee6 	bl	80098d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003b12:	f000 f979 	bl	8003e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b16:	2360      	movs	r3, #96	; 0x60
 8003b18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 900;
 8003b1a:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003b1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b28:	463b      	mov	r3, r7
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4815      	ldr	r0, [pc, #84]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b30:	f005 f890 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003b3a:	f000 f965 	bl	8003e08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0208 	bic.w	r2, r2, #8
 8003b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b4e:	463b      	mov	r3, r7
 8003b50:	2208      	movs	r2, #8
 8003b52:	4619      	mov	r1, r3
 8003b54:	480b      	ldr	r0, [pc, #44]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b56:	f005 f87d 	bl	8008c54 <HAL_TIM_PWM_ConfigChannel>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8003b60:	f000 f952 	bl	8003e08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0208 	bic.w	r2, r2, #8
 8003b72:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b74:	4803      	ldr	r0, [pc, #12]	; (8003b84 <MX_TIM3_Init+0x120>)
 8003b76:	f000 fa21 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003b7a:	bf00      	nop
 8003b7c:	3738      	adds	r7, #56	; 0x38
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000017c 	.word	0x2000017c
 8003b88:	40000400 	.word	0x40000400

08003b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <MX_USART1_UART_Init+0x5c>)
 8003b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bce:	4805      	ldr	r0, [pc, #20]	; (8003be4 <MX_USART1_UART_Init+0x58>)
 8003bd0:	f005 ff0e 	bl	80099f0 <HAL_UART_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bda:	f000 f915 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200001c8 	.word	0x200001c8
 8003be8:	40013800 	.word	0x40013800

08003bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <MX_USART2_UART_Init+0x5c>)
 8003bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c12:	220c      	movs	r2, #12
 8003c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c2e:	4805      	ldr	r0, [pc, #20]	; (8003c44 <MX_USART2_UART_Init+0x58>)
 8003c30:	f005 fede 	bl	80099f0 <HAL_UART_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c3a:	f000 f8e5 	bl	8003e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000250 	.word	0x20000250
 8003c48:	40004400 	.word	0x40004400

08003c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <MX_DMA_Init+0x68>)
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <MX_DMA_Init+0x68>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6153      	str	r3, [r2, #20]
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <MX_DMA_Init+0x68>)
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	200e      	movs	r0, #14
 8003c70:	f000 fdb7 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c74:	200e      	movs	r0, #14
 8003c76:	f000 fdd0 	bl	800481a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	200f      	movs	r0, #15
 8003c80:	f000 fdaf 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003c84:	200f      	movs	r0, #15
 8003c86:	f000 fdc8 	bl	800481a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	2010      	movs	r0, #16
 8003c90:	f000 fda7 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003c94:	2010      	movs	r0, #16
 8003c96:	f000 fdc0 	bl	800481a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2011      	movs	r0, #17
 8003ca0:	f000 fd9f 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003ca4:	2011      	movs	r0, #17
 8003ca6:	f000 fdb8 	bl	800481a <HAL_NVIC_EnableIRQ>

}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cce:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd8:	6153      	str	r3, [r2, #20]
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ce6:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4a45      	ldr	r2, [pc, #276]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf0:	6153      	str	r3, [r2, #20]
 8003cf2:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4a3f      	ldr	r2, [pc, #252]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	6153      	str	r3, [r2, #20]
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d16:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4a39      	ldr	r2, [pc, #228]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d20:	6153      	str	r3, [r2, #20]
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <MX_GPIO_Init+0x148>)
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Blue_LD_Pin|Red_LD_Pin|Green_LD2_Pin, GPIO_PIN_RESET);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2123      	movs	r1, #35	; 0x23
 8003d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d36:	f001 f963 	bl	8005000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_B1_Pin */
  GPIO_InitStruct.Pin = Blue_B1_Pin;
 8003d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_B1_GPIO_Port, &GPIO_InitStruct);
 8003d4a:	f107 0314 	add.w	r3, r7, #20
 8003d4e:	4619      	mov	r1, r3
 8003d50:	482c      	ldr	r0, [pc, #176]	; (8003e04 <MX_GPIO_Init+0x14c>)
 8003d52:	f000 ffb3 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : left_vcw_Pin right_vcw_Pin */
  GPIO_InitStruct.Pin = left_vcw_Pin|right_vcw_Pin;
 8003d56:	2303      	movs	r3, #3
 8003d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4826      	ldr	r0, [pc, #152]	; (8003e04 <MX_GPIO_Init+0x14c>)
 8003d6c:	f000 ffa6 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Blue_LD_Pin Red_LD_Pin */
  GPIO_InitStruct.Pin = Blue_LD_Pin|Red_LD_Pin;
 8003d70:	2303      	movs	r3, #3
 8003d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003d74:	2311      	movs	r3, #17
 8003d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4619      	mov	r1, r3
 8003d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d8a:	f000 ff97 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : tact_sw_Pin */
  GPIO_InitStruct.Pin = tact_sw_Pin;
 8003d8e:	2310      	movs	r3, #16
 8003d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(tact_sw_GPIO_Port, &GPIO_InitStruct);
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da4:	f000 ff8a 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_LD2_Pin */
  GPIO_InitStruct.Pin = Green_LD2_Pin;
 8003da8:	2320      	movs	r3, #32
 8003daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dac:	2301      	movs	r3, #1
 8003dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_LD2_GPIO_Port, &GPIO_InitStruct);
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f000 ff7b 	bl	8004cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2006      	movs	r0, #6
 8003dcc:	f000 fd09 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003dd0:	2006      	movs	r0, #6
 8003dd2:	f000 fd22 	bl	800481a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2007      	movs	r0, #7
 8003ddc:	f000 fd01 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003de0:	2007      	movs	r0, #7
 8003de2:	f000 fd1a 	bl	800481a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	2028      	movs	r0, #40	; 0x28
 8003dec:	f000 fcf9 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003df0:	2028      	movs	r0, #40	; 0x28
 8003df2:	f000 fd12 	bl	800481a <HAL_NVIC_EnableIRQ>

}
 8003df6:	bf00      	nop
 8003df8:	3728      	adds	r7, #40	; 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	48000800 	.word	0x48000800

08003e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e0c:	b672      	cpsid	i
}
 8003e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <Error_Handler+0x8>
	...

08003e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_MspInit+0x44>)
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_MspInit+0x44>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6193      	str	r3, [r2, #24]
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_MspInit+0x44>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_MspInit+0x44>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <HAL_MspInit+0x44>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	61d3      	str	r3, [r2, #28]
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_MspInit+0x44>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000

08003e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_I2C_MspInit+0x7c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d128      	bne.n	8003ed0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_I2C_MspInit+0x80>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_I2C_MspInit+0x80>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	6153      	str	r3, [r2, #20]
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_I2C_MspInit+0x80>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e9c:	2312      	movs	r3, #18
 8003e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	480b      	ldr	r0, [pc, #44]	; (8003ee0 <HAL_I2C_MspInit+0x84>)
 8003eb4:	f000 ff02 	bl	8004cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_I2C_MspInit+0x80>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	4a07      	ldr	r2, [pc, #28]	; (8003edc <HAL_I2C_MspInit+0x80>)
 8003ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec2:	61d3      	str	r3, [r2, #28]
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_I2C_MspInit+0x80>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed0:	bf00      	nop
 8003ed2:	3728      	adds	r7, #40	; 0x28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40005400 	.word	0x40005400
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	48000400 	.word	0x48000400

08003ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_SPI_MspInit+0x8c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d130      	bne.n	8003f68 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f10:	61d3      	str	r3, [r2, #28]
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f28:	6153      	str	r3, [r2, #20]
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_SPI_MspInit+0x90>)
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f36:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f48:	2305      	movs	r3, #5
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	4809      	ldr	r0, [pc, #36]	; (8003f78 <HAL_SPI_MspInit+0x94>)
 8003f54:	f000 feb2 	bl	8004cbc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2024      	movs	r0, #36	; 0x24
 8003f5e:	f000 fc40 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003f62:	2024      	movs	r0, #36	; 0x24
 8003f64:	f000 fc59 	bl	800481a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40003800 	.word	0x40003800
 8003f74:	40021000 	.word	0x40021000
 8003f78:	48000400 	.word	0x48000400

08003f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_TIM_Base_MspInit+0x38>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	61d3      	str	r3, [r2, #28]
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a11      	ldr	r2, [pc, #68]	; (8004020 <HAL_TIM_MspPostInit+0x64>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d11b      	bne.n	8004016 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_TIM_MspPostInit+0x68>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <HAL_TIM_MspPostInit+0x68>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6153      	str	r3, [r2, #20]
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <HAL_TIM_MspPostInit+0x68>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003ff6:	2311      	movs	r3, #17
 8003ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004006:	2302      	movs	r3, #2
 8004008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	4619      	mov	r1, r3
 8004010:	4805      	ldr	r0, [pc, #20]	; (8004028 <HAL_TIM_MspPostInit+0x6c>)
 8004012:	f000 fe53 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004016:	bf00      	nop
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40000400 	.word	0x40000400
 8004024:	40021000 	.word	0x40021000
 8004028:	48000400 	.word	0x48000400

0800402c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 031c 	add.w	r3, r7, #28
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a83      	ldr	r2, [pc, #524]	; (8004258 <HAL_UART_MspInit+0x22c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d17e      	bne.n	800414c <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800404e:	4b83      	ldr	r3, [pc, #524]	; (800425c <HAL_UART_MspInit+0x230>)
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	4a82      	ldr	r2, [pc, #520]	; (800425c <HAL_UART_MspInit+0x230>)
 8004054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004058:	6193      	str	r3, [r2, #24]
 800405a:	4b80      	ldr	r3, [pc, #512]	; (800425c <HAL_UART_MspInit+0x230>)
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004066:	4b7d      	ldr	r3, [pc, #500]	; (800425c <HAL_UART_MspInit+0x230>)
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4a7c      	ldr	r2, [pc, #496]	; (800425c <HAL_UART_MspInit+0x230>)
 800406c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004070:	6153      	str	r3, [r2, #20]
 8004072:	4b7a      	ldr	r3, [pc, #488]	; (800425c <HAL_UART_MspInit+0x230>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800407e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004090:	2307      	movs	r3, #7
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004094:	f107 031c 	add.w	r3, r7, #28
 8004098:	4619      	mov	r1, r3
 800409a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800409e:	f000 fe0d 	bl	8004cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80040a2:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040a4:	4a6f      	ldr	r2, [pc, #444]	; (8004264 <HAL_UART_MspInit+0x238>)
 80040a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a8:	4b6d      	ldr	r3, [pc, #436]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ae:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040b4:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ba:	4b69      	ldr	r3, [pc, #420]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040bc:	2200      	movs	r2, #0
 80040be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040c0:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80040c6:	4b66      	ldr	r3, [pc, #408]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040cc:	4b64      	ldr	r3, [pc, #400]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040d2:	4863      	ldr	r0, [pc, #396]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040d4:	f000 fbbb 	bl	800484e <HAL_DMA_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80040de:	f7ff fe93 	bl	8003e08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040e6:	675a      	str	r2, [r3, #116]	; 0x74
 80040e8:	4a5d      	ldr	r2, [pc, #372]	; (8004260 <HAL_UART_MspInit+0x234>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80040ee:	4b5e      	ldr	r3, [pc, #376]	; (8004268 <HAL_UART_MspInit+0x23c>)
 80040f0:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_UART_MspInit+0x240>)
 80040f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040f4:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <HAL_UART_MspInit+0x23c>)
 80040f6:	2210      	movs	r2, #16
 80040f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040fa:	4b5b      	ldr	r3, [pc, #364]	; (8004268 <HAL_UART_MspInit+0x23c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_UART_MspInit+0x23c>)
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <HAL_UART_MspInit+0x23c>)
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800410c:	4b56      	ldr	r3, [pc, #344]	; (8004268 <HAL_UART_MspInit+0x23c>)
 800410e:	2200      	movs	r2, #0
 8004110:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004112:	4b55      	ldr	r3, [pc, #340]	; (8004268 <HAL_UART_MspInit+0x23c>)
 8004114:	2200      	movs	r2, #0
 8004116:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_UART_MspInit+0x23c>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800411e:	4852      	ldr	r0, [pc, #328]	; (8004268 <HAL_UART_MspInit+0x23c>)
 8004120:	f000 fb95 	bl	800484e <HAL_DMA_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800412a:	f7ff fe6d 	bl	8003e08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4d      	ldr	r2, [pc, #308]	; (8004268 <HAL_UART_MspInit+0x23c>)
 8004132:	671a      	str	r2, [r3, #112]	; 0x70
 8004134:	4a4c      	ldr	r2, [pc, #304]	; (8004268 <HAL_UART_MspInit+0x23c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2100      	movs	r1, #0
 800413e:	2025      	movs	r0, #37	; 0x25
 8004140:	f000 fb4f 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004144:	2025      	movs	r0, #37	; 0x25
 8004146:	f000 fb68 	bl	800481a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800414a:	e081      	b.n	8004250 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a47      	ldr	r2, [pc, #284]	; (8004270 <HAL_UART_MspInit+0x244>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d17c      	bne.n	8004250 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_UART_MspInit+0x230>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4a40      	ldr	r2, [pc, #256]	; (800425c <HAL_UART_MspInit+0x230>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	61d3      	str	r3, [r2, #28]
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <HAL_UART_MspInit+0x230>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_UART_MspInit+0x230>)
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_UART_MspInit+0x230>)
 8004174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004178:	6153      	str	r3, [r2, #20]
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_UART_MspInit+0x230>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004186:	230c      	movs	r3, #12
 8004188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004196:	2307      	movs	r3, #7
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	4619      	mov	r1, r3
 80041a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041a4:	f000 fd8a 	bl	8004cbc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80041a8:	4b32      	ldr	r3, [pc, #200]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_UART_MspInit+0x24c>)
 80041ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b4:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041ba:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041c0:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80041cc:	4b29      	ldr	r3, [pc, #164]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041d2:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80041d8:	4826      	ldr	r0, [pc, #152]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041da:	f000 fb38 	bl	800484e <HAL_DMA_Init>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 80041e4:	f7ff fe10 	bl	8003e08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a22      	ldr	r2, [pc, #136]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041ec:	675a      	str	r2, [r3, #116]	; 0x74
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_UART_MspInit+0x248>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_UART_MspInit+0x250>)
 80041f6:	4a22      	ldr	r2, [pc, #136]	; (8004280 <HAL_UART_MspInit+0x254>)
 80041f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_UART_MspInit+0x250>)
 80041fc:	2210      	movs	r2, #16
 80041fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_UART_MspInit+0x250>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_UART_MspInit+0x250>)
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_UART_MspInit+0x250>)
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <HAL_UART_MspInit+0x250>)
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004218:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_UART_MspInit+0x250>)
 800421a:	2200      	movs	r2, #0
 800421c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <HAL_UART_MspInit+0x250>)
 8004220:	2200      	movs	r2, #0
 8004222:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004224:	4815      	ldr	r0, [pc, #84]	; (800427c <HAL_UART_MspInit+0x250>)
 8004226:	f000 fb12 	bl	800484e <HAL_DMA_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8004230:	f7ff fdea 	bl	8003e08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <HAL_UART_MspInit+0x250>)
 8004238:	671a      	str	r2, [r3, #112]	; 0x70
 800423a:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_UART_MspInit+0x250>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	2026      	movs	r0, #38	; 0x26
 8004246:	f000 facc 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800424a:	2026      	movs	r0, #38	; 0x26
 800424c:	f000 fae5 	bl	800481a <HAL_NVIC_EnableIRQ>
}
 8004250:	bf00      	nop
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	200002d8 	.word	0x200002d8
 8004264:	40020058 	.word	0x40020058
 8004268:	2000031c 	.word	0x2000031c
 800426c:	40020044 	.word	0x40020044
 8004270:	40004400 	.word	0x40004400
 8004274:	20000360 	.word	0x20000360
 8004278:	4002006c 	.word	0x4002006c
 800427c:	200003a4 	.word	0x200003a4
 8004280:	40020080 	.word	0x40020080

08004284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <NMI_Handler+0x4>

0800428a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428e:	e7fe      	b.n	800428e <HardFault_Handler+0x4>

08004290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004294:	e7fe      	b.n	8004294 <MemManage_Handler+0x4>

08004296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800429a:	e7fe      	b.n	800429a <BusFault_Handler+0x4>

0800429c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <UsageFault_Handler+0x4>

080042a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d0:	f000 f968 	bl	80045a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(left_vcw_Pin);
 80042dc:	2001      	movs	r0, #1
 80042de:	f000 fec1 	bl	8005064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(right_vcw_Pin);
 80042ea:	2002      	movs	r0, #2
 80042ec:	f000 feba 	bl	8005064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <DMA1_Channel4_IRQHandler+0x10>)
 80042fa:	f000 fbc5 	bl	8004a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	2000031c 	.word	0x2000031c

08004308 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800430c:	4802      	ldr	r0, [pc, #8]	; (8004318 <DMA1_Channel5_IRQHandler+0x10>)
 800430e:	f000 fbbb 	bl	8004a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200002d8 	.word	0x200002d8

0800431c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <DMA1_Channel6_IRQHandler+0x10>)
 8004322:	f000 fbb1 	bl	8004a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000360 	.word	0x20000360

08004330 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <DMA1_Channel7_IRQHandler+0x10>)
 8004336:	f000 fba7 	bl	8004a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200003a4 	.word	0x200003a4

08004344 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <SPI2_IRQHandler+0x10>)
 800434a:	f003 fb0b 	bl	8007964 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000118 	.word	0x20000118

08004358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <USART1_IRQHandler+0x10>)
 800435e:	f005 fd29 	bl	8009db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200001c8 	.word	0x200001c8

0800436c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <USART2_IRQHandler+0x10>)
 8004372:	f005 fd1f 	bl	8009db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000250 	.word	0x20000250

08004380 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_B1_Pin);
 8004384:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004388:	f000 fe6c 	bl	8005064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}

08004390 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e00a      	b.n	80043b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043a2:	f3af 8000 	nop.w
 80043a6:	4601      	mov	r1, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	60ba      	str	r2, [r7, #8]
 80043ae:	b2ca      	uxtb	r2, r1
 80043b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3301      	adds	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	dbf0      	blt.n	80043a2 <_read+0x12>
	}

return len;
 80043c0:	687b      	ldr	r3, [r7, #4]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	return -1;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f2:	605a      	str	r2, [r3, #4]
	return 0;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <_isatty>:

int _isatty(int file)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
	return 1;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
	return 0;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <_sbrk+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <_sbrk+0x60>)
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x64>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <_sbrk+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d207      	bcs.n	8004474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004464:	f006 fe42 	bl	800b0ec <__errno>
 8004468:	4603      	mov	r3, r0
 800446a:	220c      	movs	r2, #12
 800446c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e009      	b.n	8004488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <_sbrk+0x64>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <_sbrk+0x64>)
 8004484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20010000 	.word	0x20010000
 8004494:	00000400 	.word	0x00000400
 8004498:	20003a94 	.word	0x20003a94
 800449c:	20003ab0 	.word	0x20003ab0

080044a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <SystemInit+0x20>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <SystemInit+0x20>)
 80044ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044c8:	480d      	ldr	r0, [pc, #52]	; (8004500 <LoopForever+0x6>)
  ldr r1, =_edata
 80044ca:	490e      	ldr	r1, [pc, #56]	; (8004504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044cc:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <LoopForever+0xe>)
  movs r3, #0
 80044ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d0:	e002      	b.n	80044d8 <LoopCopyDataInit>

080044d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d6:	3304      	adds	r3, #4

080044d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044dc:	d3f9      	bcc.n	80044d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <LoopForever+0x12>)
  ldr r4, =_ebss
 80044e0:	4c0b      	ldr	r4, [pc, #44]	; (8004510 <LoopForever+0x16>)
  movs r3, #0
 80044e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e4:	e001      	b.n	80044ea <LoopFillZerobss>

080044e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e8:	3204      	adds	r2, #4

080044ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044ec:	d3fb      	bcc.n	80044e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044ee:	f7ff ffd7 	bl	80044a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f2:	f006 fe01 	bl	800b0f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044f6:	f7fe fd91 	bl	800301c <main>

080044fa <LoopForever>:

LoopForever:
    b LoopForever
 80044fa:	e7fe      	b.n	80044fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004504:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004508:	08010098 	.word	0x08010098
  ldr r2, =_sbss
 800450c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004510:	20003aac 	.word	0x20003aac

08004514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC1_2_IRQHandler>
	...

08004518 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_Init+0x28>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_Init+0x28>)
 8004522:	f043 0310 	orr.w	r3, r3, #16
 8004526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004528:	2003      	movs	r0, #3
 800452a:	f000 f94f 	bl	80047cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800452e:	200f      	movs	r0, #15
 8004530:	f000 f808 	bl	8004544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004534:	f7ff fc6e 	bl	8003e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40022000 	.word	0x40022000

08004544 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_InitTick+0x54>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_InitTick+0x58>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	4619      	mov	r1, r3
 8004556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800455a:	fbb3 f3f1 	udiv	r3, r3, r1
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f967 	bl	8004836 <HAL_SYSTICK_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e00e      	b.n	8004590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b0f      	cmp	r3, #15
 8004576:	d80a      	bhi.n	800458e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004578:	2200      	movs	r2, #0
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	f000 f92f 	bl	80047e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004584:	4a06      	ldr	r2, [pc, #24]	; (80045a0 <HAL_InitTick+0x5c>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20000030 	.word	0x20000030
 800459c:	20000038 	.word	0x20000038
 80045a0:	20000034 	.word	0x20000034

080045a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_IncTick+0x20>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_IncTick+0x24>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <HAL_IncTick+0x24>)
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000038 	.word	0x20000038
 80045c8:	20003a98 	.word	0x20003a98

080045cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80045d0:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <HAL_GetTick+0x14>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20003a98 	.word	0x20003a98

080045e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045ec:	f7ff ffee 	bl	80045cc <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d005      	beq.n	800460a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fe:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <HAL_Delay+0x44>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800460a:	bf00      	nop
 800460c:	f7ff ffde 	bl	80045cc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	429a      	cmp	r2, r3
 800461a:	d8f7      	bhi.n	800460c <HAL_Delay+0x28>
  {
  }
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000038 	.word	0x20000038

0800462c <__NVIC_SetPriorityGrouping>:
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	60d3      	str	r3, [r2, #12]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_GetPriorityGrouping>:
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <__NVIC_GetPriorityGrouping+0x18>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 0307 	and.w	r3, r3, #7
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_EnableIRQ>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db0b      	blt.n	80046ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	4907      	ldr	r1, [pc, #28]	; (80046c8 <__NVIC_EnableIRQ+0x38>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2001      	movs	r0, #1
 80046b2:	fa00 f202 	lsl.w	r2, r0, r2
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000e100 	.word	0xe000e100

080046cc <__NVIC_SetPriority>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	db0a      	blt.n	80046f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	490c      	ldr	r1, [pc, #48]	; (8004718 <__NVIC_SetPriority+0x4c>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	440b      	add	r3, r1
 80046f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046f4:	e00a      	b.n	800470c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4908      	ldr	r1, [pc, #32]	; (800471c <__NVIC_SetPriority+0x50>)
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	3b04      	subs	r3, #4
 8004704:	0112      	lsls	r2, r2, #4
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	440b      	add	r3, r1
 800470a:	761a      	strb	r2, [r3, #24]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000e100 	.word	0xe000e100
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <NVIC_EncodePriority>:
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f1c3 0307 	rsb	r3, r3, #7
 800473a:	2b04      	cmp	r3, #4
 800473c:	bf28      	it	cs
 800473e:	2304      	movcs	r3, #4
 8004740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3304      	adds	r3, #4
 8004746:	2b06      	cmp	r3, #6
 8004748:	d902      	bls.n	8004750 <NVIC_EncodePriority+0x30>
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3b03      	subs	r3, #3
 800474e:	e000      	b.n	8004752 <NVIC_EncodePriority+0x32>
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	401a      	ands	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004768:	f04f 31ff 	mov.w	r1, #4294967295
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	43d9      	mvns	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	4313      	orrs	r3, r2
}
 800477a:	4618      	mov	r0, r3
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <SysTick_Config>:
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004798:	d301      	bcc.n	800479e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800479a:	2301      	movs	r3, #1
 800479c:	e00f      	b.n	80047be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <SysTick_Config+0x40>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047a6:	210f      	movs	r1, #15
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	f7ff ff8e 	bl	80046cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <SysTick_Config+0x40>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047b6:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <SysTick_Config+0x40>)
 80047b8:	2207      	movs	r2, #7
 80047ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	e000e010 	.word	0xe000e010

080047cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ff29 	bl	800462c <__NVIC_SetPriorityGrouping>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	4603      	mov	r3, r0
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047f4:	f7ff ff3e 	bl	8004674 <__NVIC_GetPriorityGrouping>
 80047f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	6978      	ldr	r0, [r7, #20]
 8004800:	f7ff ff8e 	bl	8004720 <NVIC_EncodePriority>
 8004804:	4602      	mov	r2, r0
 8004806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff5d 	bl	80046cc <__NVIC_SetPriority>
}
 8004812:	bf00      	nop
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	4603      	mov	r3, r0
 8004822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff31 	bl	8004690 <__NVIC_EnableIRQ>
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ffa2 	bl	8004788 <SysTick_Config>
 8004844:	4603      	mov	r3, r0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e037      	b.n	80048d4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800487a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800487e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9c4 	bl	8004c44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}  
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_DMA_Start_IT+0x20>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e04a      	b.n	8004992 <HAL_DMA_Start_IT+0xb6>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800490a:	2b01      	cmp	r3, #1
 800490c:	d13a      	bne.n	8004984 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f957 	bl	8004be6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 020e 	orr.w	r2, r2, #14
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e00f      	b.n	8004972 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 020a 	orr.w	r2, r2, #10
 8004960:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0204 	bic.w	r2, r2, #4
 8004970:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e005      	b.n	8004990 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800498c:	2302      	movs	r3, #2
 800498e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004990:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2204      	movs	r2, #4
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e020      	b.n	8004a00 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 020e 	bic.w	r2, r2, #14
 80049cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	2101      	movs	r1, #1
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d005      	beq.n	8004a2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e027      	b.n	8004a7e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 020e 	bic.w	r2, r2, #14
 8004a3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
    } 
  }
  return status;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d024      	beq.n	8004afa <HAL_DMA_IRQHandler+0x72>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01f      	beq.n	8004afa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0204 	bic.w	r2, r2, #4
 8004ad6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	2104      	movs	r1, #4
 8004ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d06a      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004af8:	e065      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2202      	movs	r2, #2
 8004b00:	409a      	lsls	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d02c      	beq.n	8004b64 <HAL_DMA_IRQHandler+0xdc>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d027      	beq.n	8004b64 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 020a 	bic.w	r2, r2, #10
 8004b30:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2102      	movs	r1, #2
 8004b44:	fa01 f202 	lsl.w	r2, r1, r2
 8004b48:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d035      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004b62:	e030      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2208      	movs	r2, #8
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d028      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d023      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 020e 	bic.w	r2, r2, #14
 8004b8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2101      	movs	r1, #1
 8004b98:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
    }
  }
}  
 8004bc4:	e7ff      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x13e>
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004c02:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d108      	bne.n	8004c26 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c24:	e007      	b.n	8004c36 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <DMA_CalcBaseAndBitshift+0x60>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d80f      	bhi.n	8004c78 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8004c60:	4413      	add	r3, r2
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <DMA_CalcBaseAndBitshift+0x68>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	009a      	lsls	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004c76:	e00e      	b.n	8004c96 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <DMA_CalcBaseAndBitshift+0x70>)
 8004c80:	4413      	add	r3, r2
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <DMA_CalcBaseAndBitshift+0x68>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <DMA_CalcBaseAndBitshift+0x74>)
 8004c94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40020407 	.word	0x40020407
 8004ca8:	bffdfff8 	.word	0xbffdfff8
 8004cac:	cccccccd 	.word	0xcccccccd
 8004cb0:	40020000 	.word	0x40020000
 8004cb4:	bffdfbf8 	.word	0xbffdfbf8
 8004cb8:	40020400 	.word	0x40020400

08004cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cca:	e160      	b.n	8004f8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8152 	beq.w	8004f88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d005      	beq.n	8004cfc <HAL_GPIO_Init+0x40>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d130      	bne.n	8004d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	2203      	movs	r2, #3
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d32:	2201      	movs	r2, #1
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0201 	and.w	r2, r3, #1
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d017      	beq.n	8004d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	2203      	movs	r2, #3
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d123      	bne.n	8004dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	6939      	ldr	r1, [r7, #16]
 8004dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2203      	movs	r2, #3
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80ac 	beq.w	8004f88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e30:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <HAL_GPIO_Init+0x2f0>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	4a5d      	ldr	r2, [pc, #372]	; (8004fac <HAL_GPIO_Init+0x2f0>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6193      	str	r3, [r2, #24]
 8004e3c:	4b5b      	ldr	r3, [pc, #364]	; (8004fac <HAL_GPIO_Init+0x2f0>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e48:	4a59      	ldr	r2, [pc, #356]	; (8004fb0 <HAL_GPIO_Init+0x2f4>)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	3302      	adds	r3, #2
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	220f      	movs	r2, #15
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e72:	d025      	beq.n	8004ec0 <HAL_GPIO_Init+0x204>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a4f      	ldr	r2, [pc, #316]	; (8004fb4 <HAL_GPIO_Init+0x2f8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01f      	beq.n	8004ebc <HAL_GPIO_Init+0x200>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d019      	beq.n	8004eb8 <HAL_GPIO_Init+0x1fc>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a4d      	ldr	r2, [pc, #308]	; (8004fbc <HAL_GPIO_Init+0x300>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_GPIO_Init+0x1f8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a4c      	ldr	r2, [pc, #304]	; (8004fc0 <HAL_GPIO_Init+0x304>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00d      	beq.n	8004eb0 <HAL_GPIO_Init+0x1f4>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a4b      	ldr	r2, [pc, #300]	; (8004fc4 <HAL_GPIO_Init+0x308>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <HAL_GPIO_Init+0x1f0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a4a      	ldr	r2, [pc, #296]	; (8004fc8 <HAL_GPIO_Init+0x30c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004ea4:	2306      	movs	r3, #6
 8004ea6:	e00c      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004ea8:	2307      	movs	r3, #7
 8004eaa:	e00a      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004eac:	2305      	movs	r3, #5
 8004eae:	e008      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	e006      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e004      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e002      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_GPIO_Init+0x206>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	f002 0203 	and.w	r2, r2, #3
 8004ec8:	0092      	lsls	r2, r2, #2
 8004eca:	4093      	lsls	r3, r2
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ed2:	4937      	ldr	r1, [pc, #220]	; (8004fb0 <HAL_GPIO_Init+0x2f4>)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	3302      	adds	r3, #2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee0:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f04:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f0a:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4013      	ands	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f2e:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f58:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f47f ae97 	bne.w	8004ccc <HAL_GPIO_Init+0x10>
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	48000400 	.word	0x48000400
 8004fb8:	48000800 	.word	0x48000800
 8004fbc:	48000c00 	.word	0x48000c00
 8004fc0:	48001000 	.word	0x48001000
 8004fc4:	48001400 	.word	0x48001400
 8004fc8:	48001800 	.word	0x48001800
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	e001      	b.n	8004ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
 800500c:	4613      	mov	r3, r2
 800500e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005010:	787b      	ldrb	r3, [r7, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800501c:	e002      	b.n	8005024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4013      	ands	r3, r2
 8005048:	041a      	lsls	r2, r3, #16
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	43d9      	mvns	r1, r3
 800504e:	887b      	ldrh	r3, [r7, #2]
 8005050:	400b      	ands	r3, r1
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	619a      	str	r2, [r3, #24]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	4013      	ands	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800507a:	4a05      	ldr	r2, [pc, #20]	; (8005090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd ff30 	bl	8002ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40010400 	.word	0x40010400

08005094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e081      	b.n	80051aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fe fece 	bl	8003e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	; 0x24
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	e006      	b.n	800511c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800511a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d104      	bne.n	800512e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	461a      	mov	r2, r3
 80051c0:	460b      	mov	r3, r1
 80051c2:	817b      	strh	r3, [r7, #10]
 80051c4:	4613      	mov	r3, r2
 80051c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	f040 80da 	bne.w	800538a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_I2C_Master_Transmit+0x30>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e0d3      	b.n	800538c <HAL_I2C_Master_Transmit+0x1d8>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051ec:	f7ff f9ee 	bl	80045cc <HAL_GetTick>
 80051f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2319      	movs	r3, #25
 80051f8:	2201      	movs	r2, #1
 80051fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f8f0 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0be      	b.n	800538c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2221      	movs	r2, #33	; 0x21
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2210      	movs	r2, #16
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	893a      	ldrh	r2, [r7, #8]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2bff      	cmp	r3, #255	; 0xff
 800523e:	d90e      	bls.n	800525e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	22ff      	movs	r2, #255	; 0xff
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	b2da      	uxtb	r2, r3
 800524c:	8979      	ldrh	r1, [r7, #10]
 800524e:	4b51      	ldr	r3, [pc, #324]	; (8005394 <HAL_I2C_Master_Transmit+0x1e0>)
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa7e 	bl	8005758 <I2C_TransferConfig>
 800525c:	e06c      	b.n	8005338 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	b2da      	uxtb	r2, r3
 800526e:	8979      	ldrh	r1, [r7, #10]
 8005270:	4b48      	ldr	r3, [pc, #288]	; (8005394 <HAL_I2C_Master_Transmit+0x1e0>)
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fa6d 	bl	8005758 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800527e:	e05b      	b.n	8005338 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	6a39      	ldr	r1, [r7, #32]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f8fc 	bl	8005482 <I2C_WaitOnTXISFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e07b      	b.n	800538c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d034      	beq.n	8005338 <HAL_I2C_Master_Transmit+0x184>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d130      	bne.n	8005338 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2200      	movs	r2, #0
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f87f 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e04d      	b.n	800538c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2bff      	cmp	r3, #255	; 0xff
 80052f8:	d90e      	bls.n	8005318 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	22ff      	movs	r2, #255	; 0xff
 80052fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	b2da      	uxtb	r2, r3
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	2300      	movs	r3, #0
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fa21 	bl	8005758 <I2C_TransferConfig>
 8005316:	e00f      	b.n	8005338 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	b2da      	uxtb	r2, r3
 8005328:	8979      	ldrh	r1, [r7, #10]
 800532a:	2300      	movs	r3, #0
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fa10 	bl	8005758 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d19e      	bne.n	8005280 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	6a39      	ldr	r1, [r7, #32]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f8e2 	bl	8005510 <I2C_WaitOnSTOPFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e01a      	b.n	800538c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2220      	movs	r2, #32
 800535c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_I2C_Master_Transmit+0x1e4>)
 800536a:	400b      	ands	r3, r1
 800536c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	80002000 	.word	0x80002000
 8005398:	fe00e800 	.word	0xfe00e800

0800539c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d103      	bne.n	80053ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2200      	movs	r2, #0
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d007      	beq.n	80053d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	619a      	str	r2, [r3, #24]
  }
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f4:	e031      	b.n	800545a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d02d      	beq.n	800545a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7ff f8e5 	bl	80045cc <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d122      	bne.n	800545a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4013      	ands	r3, r2
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	429a      	cmp	r2, r3
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	429a      	cmp	r2, r3
 8005430:	d113      	bne.n	800545a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e00f      	b.n	800547a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	429a      	cmp	r2, r3
 8005476:	d0be      	beq.n	80053f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800548e:	e033      	b.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f87f 	bl	8005598 <I2C_IsErrorOccurred>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e031      	b.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d025      	beq.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ac:	f7ff f88e 	bl	80045cc <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d302      	bcc.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d11a      	bne.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d013      	beq.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e007      	b.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b02      	cmp	r3, #2
 8005504:	d1c4      	bne.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800551c:	e02f      	b.n	800557e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f838 	bl	8005598 <I2C_IsErrorOccurred>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e02d      	b.n	800558e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7ff f84b 	bl	80045cc <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11a      	bne.n	800557e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b20      	cmp	r3, #32
 8005554:	d013      	beq.n	800557e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	f043 0220 	orr.w	r2, r3, #32
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e007      	b.n	800558e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d1c8      	bne.n	800551e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d068      	beq.n	8005696 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2210      	movs	r2, #16
 80055ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055cc:	e049      	b.n	8005662 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d045      	beq.n	8005662 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fe fff9 	bl	80045cc <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_IsErrorOccurred+0x54>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d13a      	bne.n	8005662 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d121      	bne.n	8005654 <I2C_IsErrorOccurred+0xbc>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005616:	d01d      	beq.n	8005654 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	2b20      	cmp	r3, #32
 800561c:	d01a      	beq.n	8005654 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800562e:	f7fe ffcd 	bl	80045cc <HAL_GetTick>
 8005632:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005634:	e00e      	b.n	8005654 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005636:	f7fe ffc9 	bl	80045cc <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b19      	cmp	r3, #25
 8005642:	d907      	bls.n	8005654 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005652:	e006      	b.n	8005662 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b20      	cmp	r3, #32
 8005660:	d1e9      	bne.n	8005636 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b20      	cmp	r3, #32
 800566e:	d003      	beq.n	8005678 <I2C_IsErrorOccurred+0xe0>
 8005670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0aa      	beq.n	80055ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800567c:	2b00      	cmp	r3, #0
 800567e:	d103      	bne.n	8005688 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2220      	movs	r2, #32
 8005686:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	f043 0302 	orr.w	r3, r3, #2
 80056f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01c      	beq.n	8005746 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fe45 	bl	800539c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <I2C_IsErrorOccurred+0x1bc>)
 800571e:	400b      	ands	r3, r1
 8005720:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	431a      	orrs	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800574a:	4618      	mov	r0, r3
 800574c:	3728      	adds	r7, #40	; 0x28
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	fe00e800 	.word	0xfe00e800

08005758 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	4613      	mov	r3, r2
 8005768:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005770:	7a7b      	ldrb	r3, [r7, #9]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005778:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	4313      	orrs	r3, r2
 8005782:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005786:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	0d5b      	lsrs	r3, r3, #21
 8005792:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <I2C_TransferConfig+0x60>)
 8005798:	430b      	orrs	r3, r1
 800579a:	43db      	mvns	r3, r3
 800579c:	ea02 0103 	and.w	r1, r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	03ff63ff 	.word	0x03ff63ff

080057bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d138      	bne.n	8005844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057dc:	2302      	movs	r3, #2
 80057de:	e032      	b.n	8005846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800580e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b20      	cmp	r3, #32
 8005866:	d139      	bne.n	80058dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005872:	2302      	movs	r3, #2
 8005874:	e033      	b.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	; 0x24
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005902:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f001 b83a 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005916:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 816f 	beq.w	8005c06 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005928:	4bb5      	ldr	r3, [pc, #724]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b04      	cmp	r3, #4
 8005932:	d00c      	beq.n	800594e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005934:	4bb2      	ldr	r3, [pc, #712]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b08      	cmp	r3, #8
 800593e:	d15c      	bne.n	80059fa <HAL_RCC_OscConfig+0x10e>
 8005940:	4baf      	ldr	r3, [pc, #700]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d155      	bne.n	80059fa <HAL_RCC_OscConfig+0x10e>
 800594e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005952:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800595a:	fa93 f3a3 	rbit	r3, r3
 800595e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005962:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005966:	fab3 f383 	clz	r3, r3
 800596a:	b2db      	uxtb	r3, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <HAL_RCC_OscConfig+0x94>
 800597a:	4ba1      	ldr	r3, [pc, #644]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	e015      	b.n	80059ac <HAL_RCC_OscConfig+0xc0>
 8005980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005984:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800598c:	fa93 f3a3 	rbit	r3, r3
 8005990:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005998:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800599c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80059a8:	4b95      	ldr	r3, [pc, #596]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059b0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80059b4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80059b8:	fa92 f2a2 	rbit	r2, r2
 80059bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80059c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80059c4:	fab2 f282 	clz	r2, r2
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	f042 0220 	orr.w	r2, r2, #32
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	f002 021f 	and.w	r2, r2, #31
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f202 	lsl.w	r2, r1, r2
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8111 	beq.w	8005c04 <HAL_RCC_OscConfig+0x318>
 80059e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 8108 	bne.w	8005c04 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f000 bfc6 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCC_OscConfig+0x12e>
 8005a0c:	4b7c      	ldr	r3, [pc, #496]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a7b      	ldr	r2, [pc, #492]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e036      	b.n	8005a88 <HAL_RCC_OscConfig+0x19c>
 8005a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCC_OscConfig+0x158>
 8005a2a:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a74      	ldr	r2, [pc, #464]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	4b72      	ldr	r3, [pc, #456]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a71      	ldr	r2, [pc, #452]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e021      	b.n	8005a88 <HAL_RCC_OscConfig+0x19c>
 8005a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x184>
 8005a56:	4b6a      	ldr	r3, [pc, #424]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a69      	ldr	r2, [pc, #420]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a66      	ldr	r2, [pc, #408]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCC_OscConfig+0x19c>
 8005a70:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a62      	ldr	r2, [pc, #392]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b60      	ldr	r3, [pc, #384]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a86:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d059      	beq.n	8005b4c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a98:	f7fe fd98 	bl	80045cc <HAL_GetTick>
 8005a9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa2:	f7fe fd93 	bl	80045cc <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	; 0x64
 8005ab0:	d902      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	f000 bf67 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
 8005ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005abc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005acc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad0:	fab3 f383 	clz	r3, r3
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d102      	bne.n	8005aea <HAL_RCC_OscConfig+0x1fe>
 8005ae4:	4b46      	ldr	r3, [pc, #280]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	e015      	b.n	8005b16 <HAL_RCC_OscConfig+0x22a>
 8005aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005b06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005b0a:	fa93 f3a3 	rbit	r3, r3
 8005b0e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b1a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005b1e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005b22:	fa92 f2a2 	rbit	r2, r2
 8005b26:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005b2a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005b2e:	fab2 f282 	clz	r2, r2
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	f042 0220 	orr.w	r2, r2, #32
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	f002 021f 	and.w	r2, r2, #31
 8005b3e:	2101      	movs	r1, #1
 8005b40:	fa01 f202 	lsl.w	r2, r1, r2
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0ab      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x1b6>
 8005b4a:	e05c      	b.n	8005c06 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fe fd3e 	bl	80045cc <HAL_GetTick>
 8005b50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b56:	f7fe fd39 	bl	80045cc <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d902      	bls.n	8005b6c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	f000 bf0d 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
 8005b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005b78:	fa93 f3a3 	rbit	r3, r3
 8005b7c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005b80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b84:	fab3 f383 	clz	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d102      	bne.n	8005b9e <HAL_RCC_OscConfig+0x2b2>
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	e015      	b.n	8005bca <HAL_RCC_OscConfig+0x2de>
 8005b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005bba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_RCC_OscConfig+0x314>)
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005bd2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005bd6:	fa92 f2a2 	rbit	r2, r2
 8005bda:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005bde:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005be2:	fab2 f282 	clz	r2, r2
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	f042 0220 	orr.w	r2, r2, #32
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	f002 021f 	and.w	r2, r2, #31
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1ab      	bne.n	8005b56 <HAL_RCC_OscConfig+0x26a>
 8005bfe:	e002      	b.n	8005c06 <HAL_RCC_OscConfig+0x31a>
 8005c00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 817f 	beq.w	8005f1a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c1c:	4ba7      	ldr	r3, [pc, #668]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c28:	4ba4      	ldr	r3, [pc, #656]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d173      	bne.n	8005d1c <HAL_RCC_OscConfig+0x430>
 8005c34:	4ba1      	ldr	r3, [pc, #644]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c40:	d16c      	bne.n	8005d1c <HAL_RCC_OscConfig+0x430>
 8005c42:	2302      	movs	r3, #2
 8005c44:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005c4c:	fa93 f3a3 	rbit	r3, r3
 8005c50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005c54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c58:	fab3 f383 	clz	r3, r3
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCC_OscConfig+0x386>
 8005c6c:	4b93      	ldr	r3, [pc, #588]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	e013      	b.n	8005c9a <HAL_RCC_OscConfig+0x3ae>
 8005c72:	2302      	movs	r3, #2
 8005c74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005c7c:	fa93 f3a3 	rbit	r3, r3
 8005c80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005c84:	2302      	movs	r3, #2
 8005c86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005c8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005c8e:	fa93 f3a3 	rbit	r3, r3
 8005c92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005c96:	4b89      	ldr	r3, [pc, #548]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005ca0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005ca4:	fa92 f2a2 	rbit	r2, r2
 8005ca8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005cac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005cb0:	fab2 f282 	clz	r2, r2
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	f042 0220 	orr.w	r2, r2, #32
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	f002 021f 	and.w	r2, r2, #31
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x3f6>
 8005ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d002      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f000 be52 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce2:	4b76      	ldr	r3, [pc, #472]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	21f8      	movs	r1, #248	; 0xf8
 8005cf8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005d00:	fa91 f1a1 	rbit	r1, r1
 8005d04:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005d08:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005d0c:	fab1 f181 	clz	r1, r1
 8005d10:	b2c9      	uxtb	r1, r1
 8005d12:	408b      	lsls	r3, r1
 8005d14:	4969      	ldr	r1, [pc, #420]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1a:	e0fe      	b.n	8005f1a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8088 	beq.w	8005e3e <HAL_RCC_OscConfig+0x552>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005d40:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d44:	fab3 f383 	clz	r3, r3
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	461a      	mov	r2, r3
 8005d56:	2301      	movs	r3, #1
 8005d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fe fc37 	bl	80045cc <HAL_GetTick>
 8005d5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d64:	f7fe fc32 	bl	80045cc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d902      	bls.n	8005d7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	f000 be06 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005d8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d90:	fab3 f383 	clz	r3, r3
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d102      	bne.n	8005daa <HAL_RCC_OscConfig+0x4be>
 8005da4:	4b45      	ldr	r3, [pc, #276]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	e013      	b.n	8005dd2 <HAL_RCC_OscConfig+0x4e6>
 8005daa:	2302      	movs	r3, #2
 8005dac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005db4:	fa93 f3a3 	rbit	r3, r3
 8005db8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005dc2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005dc6:	fa93 f3a3 	rbit	r3, r3
 8005dca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005dce:	4b3b      	ldr	r3, [pc, #236]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005dd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005ddc:	fa92 f2a2 	rbit	r2, r2
 8005de0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005de4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005de8:	fab2 f282 	clz	r2, r2
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	f042 0220 	orr.w	r2, r2, #32
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	f002 021f 	and.w	r2, r2, #31
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0af      	beq.n	8005d64 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	21f8      	movs	r1, #248	; 0xf8
 8005e1a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005e22:	fa91 f1a1 	rbit	r1, r1
 8005e26:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005e2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005e2e:	fab1 f181 	clz	r1, r1
 8005e32:	b2c9      	uxtb	r1, r1
 8005e34:	408b      	lsls	r3, r1
 8005e36:	4921      	ldr	r1, [pc, #132]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]
 8005e3c:	e06d      	b.n	8005f1a <HAL_RCC_OscConfig+0x62e>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005e48:	fa93 f3a3 	rbit	r3, r3
 8005e4c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e54:	fab3 f383 	clz	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	461a      	mov	r2, r3
 8005e66:	2300      	movs	r3, #0
 8005e68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6a:	f7fe fbaf 	bl	80045cc <HAL_GetTick>
 8005e6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e72:	e00a      	b.n	8005e8a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e74:	f7fe fbaa 	bl	80045cc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d902      	bls.n	8005e8a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	f000 bd7e 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e94:	fa93 f3a3 	rbit	r3, r3
 8005e98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ea0:	fab3 f383 	clz	r3, r3
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5d4>
 8005eb4:	4b01      	ldr	r3, [pc, #4]	; (8005ebc <HAL_RCC_OscConfig+0x5d0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	e016      	b.n	8005ee8 <HAL_RCC_OscConfig+0x5fc>
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ed8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005edc:	fa93 f3a3 	rbit	r3, r3
 8005ee0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ee4:	4bbf      	ldr	r3, [pc, #764]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005eee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005ef2:	fa92 f2a2 	rbit	r2, r2
 8005ef6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005efa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005efe:	fab2 f282 	clz	r2, r2
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	f042 0220 	orr.w	r2, r2, #32
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	f002 021f 	and.w	r2, r2, #31
 8005f0e:	2101      	movs	r1, #1
 8005f10:	fa01 f202 	lsl.w	r2, r1, r2
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ac      	bne.n	8005e74 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8113 	beq.w	8006156 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d07c      	beq.n	800603a <HAL_RCC_OscConfig+0x74e>
 8005f40:	2301      	movs	r3, #1
 8005f42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4a:	fa93 f3a3 	rbit	r3, r3
 8005f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4ba2      	ldr	r3, [pc, #648]	; (80061e8 <HAL_RCC_OscConfig+0x8fc>)
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	461a      	mov	r2, r3
 8005f66:	2301      	movs	r3, #1
 8005f68:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fe fb2f 	bl	80045cc <HAL_GetTick>
 8005f6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f74:	f7fe fb2a 	bl	80045cc <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d902      	bls.n	8005f8a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	f000 bcfe 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f94:	fa93 f2a3 	rbit	r2, r3
 8005f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005faa:	2202      	movs	r2, #2
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	fa93 f2a3 	rbit	r2, r3
 8005fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fce:	2202      	movs	r2, #2
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	fa93 f2a3 	rbit	r2, r3
 8005fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fe4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fe8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fea:	4b7e      	ldr	r3, [pc, #504]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 8005fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ff2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	6019      	str	r1, [r3, #0]
 8005ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ffe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	fa93 f1a3 	rbit	r1, r3
 8006008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800600c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006010:	6019      	str	r1, [r3, #0]
  return result;
 8006012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006016:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	fab3 f383 	clz	r3, r3
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d09d      	beq.n	8005f74 <HAL_RCC_OscConfig+0x688>
 8006038:	e08d      	b.n	8006156 <HAL_RCC_OscConfig+0x86a>
 800603a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800603e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800604a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	fa93 f2a3 	rbit	r2, r3
 8006054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006058:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800605c:	601a      	str	r2, [r3, #0]
  return result;
 800605e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006062:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006066:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006068:	fab3 f383 	clz	r3, r3
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	4b5d      	ldr	r3, [pc, #372]	; (80061e8 <HAL_RCC_OscConfig+0x8fc>)
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	461a      	mov	r2, r3
 8006078:	2300      	movs	r3, #0
 800607a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607c:	f7fe faa6 	bl	80045cc <HAL_GetTick>
 8006080:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006084:	e00a      	b.n	800609c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006086:	f7fe faa1 	bl	80045cc <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d902      	bls.n	800609c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	f000 bc75 	b.w	8006986 <HAL_RCC_OscConfig+0x109a>
 800609c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80060a4:	2202      	movs	r2, #2
 80060a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	fa93 f2a3 	rbit	r2, r3
 80060b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c8:	2202      	movs	r2, #2
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	fa93 f2a3 	rbit	r2, r3
 80060da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80060ec:	2202      	movs	r2, #2
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	fa93 f2a3 	rbit	r2, r3
 80060fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006102:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006106:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006108:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 800610a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800610c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006110:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006114:	2102      	movs	r1, #2
 8006116:	6019      	str	r1, [r3, #0]
 8006118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800611c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	fa93 f1a3 	rbit	r1, r3
 8006126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800612a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800612e:	6019      	str	r1, [r3, #0]
  return result;
 8006130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006134:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2101      	movs	r1, #1
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d197      	bne.n	8006086 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800615a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 81a5 	beq.w	80064b6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800616c:	2300      	movs	r3, #0
 800616e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d116      	bne.n	80061ac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800617e:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 8006184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006188:	61d3      	str	r3, [r2, #28]
 800618a:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <HAL_RCC_OscConfig+0x8f8>)
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <HAL_RCC_OscConfig+0x900>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d121      	bne.n	80061fc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <HAL_RCC_OscConfig+0x900>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <HAL_RCC_OscConfig+0x900>)
 80061be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061c4:	f7fe fa02 	bl	80045cc <HAL_GetTick>
 80061c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061cc:	e010      	b.n	80061f0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ce:	f7fe f9fd 	bl	80045cc <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b64      	cmp	r3, #100	; 0x64
 80061dc:	d908      	bls.n	80061f0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e3d1      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
 80061e2:	bf00      	nop
 80061e4:	40021000 	.word	0x40021000
 80061e8:	10908120 	.word	0x10908120
 80061ec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f0:	4b8d      	ldr	r3, [pc, #564]	; (8006428 <HAL_RCC_OscConfig+0xb3c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0e8      	beq.n	80061ce <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006200:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d106      	bne.n	800621a <HAL_RCC_OscConfig+0x92e>
 800620c:	4b87      	ldr	r3, [pc, #540]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	4a86      	ldr	r2, [pc, #536]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	6213      	str	r3, [r2, #32]
 8006218:	e035      	b.n	8006286 <HAL_RCC_OscConfig+0x99a>
 800621a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800621e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0x958>
 800622a:	4b80      	ldr	r3, [pc, #512]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	4a7f      	ldr	r2, [pc, #508]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	6213      	str	r3, [r2, #32]
 8006236:	4b7d      	ldr	r3, [pc, #500]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	4a7c      	ldr	r2, [pc, #496]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 800623c:	f023 0304 	bic.w	r3, r3, #4
 8006240:	6213      	str	r3, [r2, #32]
 8006242:	e020      	b.n	8006286 <HAL_RCC_OscConfig+0x99a>
 8006244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006248:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b05      	cmp	r3, #5
 8006252:	d10c      	bne.n	800626e <HAL_RCC_OscConfig+0x982>
 8006254:	4b75      	ldr	r3, [pc, #468]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4a74      	ldr	r2, [pc, #464]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 800625a:	f043 0304 	orr.w	r3, r3, #4
 800625e:	6213      	str	r3, [r2, #32]
 8006260:	4b72      	ldr	r3, [pc, #456]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	4a71      	ldr	r2, [pc, #452]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	6213      	str	r3, [r2, #32]
 800626c:	e00b      	b.n	8006286 <HAL_RCC_OscConfig+0x99a>
 800626e:	4b6f      	ldr	r3, [pc, #444]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	4a6e      	ldr	r2, [pc, #440]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	6213      	str	r3, [r2, #32]
 800627a:	4b6c      	ldr	r3, [pc, #432]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	4a6b      	ldr	r2, [pc, #428]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800628a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8081 	beq.w	800639a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006298:	f7fe f998 	bl	80045cc <HAL_GetTick>
 800629c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a0:	e00b      	b.n	80062ba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7fe f993 	bl	80045cc <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e365      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
 80062ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80062c2:	2202      	movs	r2, #2
 80062c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	fa93 f2a3 	rbit	r2, r3
 80062d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80062e6:	2202      	movs	r2, #2
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	fa93 f2a3 	rbit	r2, r3
 80062f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006300:	601a      	str	r2, [r3, #0]
  return result;
 8006302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006306:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800630a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	fab3 f383 	clz	r3, r3
 8006310:	b2db      	uxtb	r3, r3
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f043 0302 	orr.w	r3, r3, #2
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d102      	bne.n	8006326 <HAL_RCC_OscConfig+0xa3a>
 8006320:	4b42      	ldr	r3, [pc, #264]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	e013      	b.n	800634e <HAL_RCC_OscConfig+0xa62>
 8006326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800632a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800632e:	2202      	movs	r2, #2
 8006330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006336:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	fa93 f2a3 	rbit	r2, r3
 8006340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006344:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	4b38      	ldr	r3, [pc, #224]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006352:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006356:	2102      	movs	r1, #2
 8006358:	6011      	str	r1, [r2, #0]
 800635a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800635e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	fa92 f1a2 	rbit	r1, r2
 8006368:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800636c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006370:	6011      	str	r1, [r2, #0]
  return result;
 8006372:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006376:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	fab2 f282 	clz	r2, r2
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	f002 021f 	and.w	r2, r2, #31
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f202 	lsl.w	r2, r1, r2
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d084      	beq.n	80062a2 <HAL_RCC_OscConfig+0x9b6>
 8006398:	e083      	b.n	80064a2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800639a:	f7fe f917 	bl	80045cc <HAL_GetTick>
 800639e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063a2:	e00b      	b.n	80063bc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a4:	f7fe f912 	bl	80045cc <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e2e4      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
 80063bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80063c4:	2202      	movs	r2, #2
 80063c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	fa93 f2a3 	rbit	r2, r3
 80063d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80063e8:	2202      	movs	r2, #2
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	fa93 f2a3 	rbit	r2, r3
 80063fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006402:	601a      	str	r2, [r3, #0]
  return result;
 8006404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006408:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800640c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d106      	bne.n	8006430 <HAL_RCC_OscConfig+0xb44>
 8006422:	4b02      	ldr	r3, [pc, #8]	; (800642c <HAL_RCC_OscConfig+0xb40>)
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	e017      	b.n	8006458 <HAL_RCC_OscConfig+0xb6c>
 8006428:	40007000 	.word	0x40007000
 800642c:	40021000 	.word	0x40021000
 8006430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006434:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006438:	2202      	movs	r2, #2
 800643a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006440:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	fa93 f2a3 	rbit	r2, r3
 800644a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800644e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	4bb3      	ldr	r3, [pc, #716]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800645c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006460:	2102      	movs	r1, #2
 8006462:	6011      	str	r1, [r2, #0]
 8006464:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006468:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	fa92 f1a2 	rbit	r1, r2
 8006472:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006476:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800647a:	6011      	str	r1, [r2, #0]
  return result;
 800647c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006480:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	fab2 f282 	clz	r2, r2
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	f002 021f 	and.w	r2, r2, #31
 8006496:	2101      	movs	r1, #1
 8006498:	fa01 f202 	lsl.w	r2, r1, r2
 800649c:	4013      	ands	r3, r2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d180      	bne.n	80063a4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064a2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d105      	bne.n	80064b6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064aa:	4b9e      	ldr	r3, [pc, #632]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	4a9d      	ldr	r2, [pc, #628]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 80064b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 825e 	beq.w	8006984 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064c8:	4b96      	ldr	r3, [pc, #600]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 030c 	and.w	r3, r3, #12
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	f000 821f 	beq.w	8006914 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	f040 8170 	bne.w	80067c8 <HAL_RCC_OscConfig+0xedc>
 80064e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80064f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	fa93 f2a3 	rbit	r2, r3
 8006504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006508:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800650c:	601a      	str	r2, [r3, #0]
  return result;
 800650e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006512:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006516:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006518:	fab3 f383 	clz	r3, r3
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006522:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	461a      	mov	r2, r3
 800652a:	2300      	movs	r3, #0
 800652c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652e:	f7fe f84d 	bl	80045cc <HAL_GetTick>
 8006532:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006536:	e009      	b.n	800654c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006538:	f7fe f848 	bl	80045cc <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e21c      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
 800654c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006550:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800655e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	fa93 f2a3 	rbit	r2, r3
 8006568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800656c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006570:	601a      	str	r2, [r3, #0]
  return result;
 8006572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006576:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800657a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800657c:	fab3 f383 	clz	r3, r3
 8006580:	b2db      	uxtb	r3, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d102      	bne.n	8006596 <HAL_RCC_OscConfig+0xcaa>
 8006590:	4b64      	ldr	r3, [pc, #400]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	e027      	b.n	80065e6 <HAL_RCC_OscConfig+0xcfa>
 8006596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800659a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800659e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065a8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	fa93 f2a3 	rbit	r2, r3
 80065b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80065c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065ce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	fa93 f2a3 	rbit	r2, r3
 80065d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065dc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	4b50      	ldr	r3, [pc, #320]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80065ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80065f2:	6011      	str	r1, [r2, #0]
 80065f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	fa92 f1a2 	rbit	r1, r2
 8006602:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006606:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800660a:	6011      	str	r1, [r2, #0]
  return result;
 800660c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006610:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	fab2 f282 	clz	r2, r2
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	f042 0220 	orr.w	r2, r2, #32
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	f002 021f 	and.w	r2, r2, #31
 8006626:	2101      	movs	r1, #1
 8006628:	fa01 f202 	lsl.w	r2, r1, r2
 800662c:	4013      	ands	r3, r2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d182      	bne.n	8006538 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006632:	4b3c      	ldr	r3, [pc, #240]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f023 020f 	bic.w	r2, r3, #15
 800663a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800663e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	4937      	ldr	r1, [pc, #220]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 8006648:	4313      	orrs	r3, r2
 800664a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800664c:	4b35      	ldr	r3, [pc, #212]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006658:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a19      	ldr	r1, [r3, #32]
 8006660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	430b      	orrs	r3, r1
 800666e:	492d      	ldr	r1, [pc, #180]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
 8006674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006678:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800667c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006686:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	fa93 f2a3 	rbit	r2, r3
 8006690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006694:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006698:	601a      	str	r2, [r3, #0]
  return result;
 800669a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800669e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80066a2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a4:	fab3 f383 	clz	r3, r3
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80066ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	461a      	mov	r2, r3
 80066b6:	2301      	movs	r3, #1
 80066b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ba:	f7fd ff87 	bl	80045cc <HAL_GetTick>
 80066be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066c2:	e009      	b.n	80066d8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fd ff82 	bl	80045cc <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e156      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
 80066d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80066e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fa93 f2a3 	rbit	r2, r3
 80066f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066f8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80066fc:	601a      	str	r2, [r3, #0]
  return result;
 80066fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006702:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006708:	fab3 f383 	clz	r3, r3
 800670c:	b2db      	uxtb	r3, r3
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	d105      	bne.n	8006728 <HAL_RCC_OscConfig+0xe3c>
 800671c:	4b01      	ldr	r3, [pc, #4]	; (8006724 <HAL_RCC_OscConfig+0xe38>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	e02a      	b.n	8006778 <HAL_RCC_OscConfig+0xe8c>
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800672c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800673a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	fa93 f2a3 	rbit	r2, r3
 8006744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006748:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006752:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006760:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	fa93 f2a3 	rbit	r2, r3
 800676a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800676e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	4b86      	ldr	r3, [pc, #536]	; (8006990 <HAL_RCC_OscConfig+0x10a4>)
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800677c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006780:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800678a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	fa92 f1a2 	rbit	r1, r2
 8006794:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006798:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800679c:	6011      	str	r1, [r2, #0]
  return result;
 800679e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80067a2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	fab2 f282 	clz	r2, r2
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	f042 0220 	orr.w	r2, r2, #32
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	f002 021f 	and.w	r2, r2, #31
 80067b8:	2101      	movs	r1, #1
 80067ba:	fa01 f202 	lsl.w	r2, r1, r2
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f43f af7f 	beq.w	80066c4 <HAL_RCC_OscConfig+0xdd8>
 80067c6:	e0dd      	b.n	8006984 <HAL_RCC_OscConfig+0x1098>
 80067c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80067d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	fa93 f2a3 	rbit	r2, r3
 80067e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80067ec:	601a      	str	r2, [r3, #0]
  return result;
 80067ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80067f6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	461a      	mov	r2, r3
 800680a:	2300      	movs	r3, #0
 800680c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680e:	f7fd fedd 	bl	80045cc <HAL_GetTick>
 8006812:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006816:	e009      	b.n	800682c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006818:	f7fd fed8 	bl	80045cc <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e0ac      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
 800682c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006830:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	fa93 f2a3 	rbit	r2, r3
 8006848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800684c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006850:	601a      	str	r2, [r3, #0]
  return result;
 8006852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006856:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800685a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d102      	bne.n	8006876 <HAL_RCC_OscConfig+0xf8a>
 8006870:	4b47      	ldr	r3, [pc, #284]	; (8006990 <HAL_RCC_OscConfig+0x10a4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	e027      	b.n	80068c6 <HAL_RCC_OscConfig+0xfda>
 8006876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800687a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800687e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006888:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	fa93 f2a3 	rbit	r2, r3
 8006892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006896:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068a0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80068a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	fa93 f2a3 	rbit	r2, r3
 80068b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068bc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	4b33      	ldr	r3, [pc, #204]	; (8006990 <HAL_RCC_OscConfig+0x10a4>)
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80068ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068d2:	6011      	str	r1, [r2, #0]
 80068d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068d8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	fa92 f1a2 	rbit	r1, r2
 80068e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068e6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80068ea:	6011      	str	r1, [r2, #0]
  return result;
 80068ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068f0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	fab2 f282 	clz	r2, r2
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	f042 0220 	orr.w	r2, r2, #32
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	f002 021f 	and.w	r2, r2, #31
 8006906:	2101      	movs	r1, #1
 8006908:	fa01 f202 	lsl.w	r2, r1, r2
 800690c:	4013      	ands	r3, r2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d182      	bne.n	8006818 <HAL_RCC_OscConfig+0xf2c>
 8006912:	e037      	b.n	8006984 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006918:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e02e      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006928:	4b19      	ldr	r3, [pc, #100]	; (8006990 <HAL_RCC_OscConfig+0x10a4>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <HAL_RCC_OscConfig+0x10a4>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006938:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800693c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	429a      	cmp	r2, r3
 800694e:	d117      	bne.n	8006980 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006950:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006954:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800695c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006964:	429a      	cmp	r2, r3
 8006966:	d10b      	bne.n	8006980 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800696c:	f003 020f 	and.w	r2, r3, #15
 8006970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006974:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40021000 	.word	0x40021000

08006994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b09e      	sub	sp, #120	; 0x78
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e162      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069ac:	4b90      	ldr	r3, [pc, #576]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d910      	bls.n	80069dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ba:	4b8d      	ldr	r3, [pc, #564]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 0207 	bic.w	r2, r3, #7
 80069c2:	498b      	ldr	r1, [pc, #556]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b89      	ldr	r3, [pc, #548]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e14a      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b82      	ldr	r3, [pc, #520]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	497f      	ldr	r1, [pc, #508]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80dc 	beq.w	8006bc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d13c      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xf6>
 8006a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a18:	fa93 f3a3 	rbit	r3, r3
 8006a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a20:	fab3 f383 	clz	r3, r3
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d102      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xa6>
 8006a34:	4b6f      	ldr	r3, [pc, #444]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	e00f      	b.n	8006a5a <HAL_RCC_ClockConfig+0xc6>
 8006a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a42:	fa93 f3a3 	rbit	r3, r3
 8006a46:	667b      	str	r3, [r7, #100]	; 0x64
 8006a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a50:	fa93 f3a3 	rbit	r3, r3
 8006a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a56:	4b67      	ldr	r3, [pc, #412]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a62:	fa92 f2a2 	rbit	r2, r2
 8006a66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a6a:	fab2 f282 	clz	r2, r2
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	f042 0220 	orr.w	r2, r2, #32
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	f002 021f 	and.w	r2, r2, #31
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d17b      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e0f3      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d13c      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x178>
 8006a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9a:	fa93 f3a3 	rbit	r3, r3
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa2:	fab3 f383 	clz	r3, r3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d102      	bne.n	8006abc <HAL_RCC_ClockConfig+0x128>
 8006ab6:	4b4f      	ldr	r3, [pc, #316]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	e00f      	b.n	8006adc <HAL_RCC_ClockConfig+0x148>
 8006abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ac0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac4:	fa93 f3a3 	rbit	r3, r3
 8006ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ace:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad2:	fa93 f3a3 	rbit	r3, r3
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad8:	4b46      	ldr	r3, [pc, #280]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ae0:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae4:	fa92 f2a2 	rbit	r2, r2
 8006ae8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aec:	fab2 f282 	clz	r2, r2
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	f042 0220 	orr.w	r2, r2, #32
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	f002 021f 	and.w	r2, r2, #31
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f202 	lsl.w	r2, r1, r2
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d13a      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0b2      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	fa93 f3a3 	rbit	r3, r3
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b1a:	fab3 f383 	clz	r3, r3
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d102      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x1a0>
 8006b2e:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	e00d      	b.n	8006b50 <HAL_RCC_ClockConfig+0x1bc>
 8006b34:	2302      	movs	r3, #2
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	fa93 f3a3 	rbit	r3, r3
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b40:	2302      	movs	r3, #2
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	fa93 f3a3 	rbit	r3, r3
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2202      	movs	r2, #2
 8006b52:	61ba      	str	r2, [r7, #24]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	fa92 f2a2 	rbit	r2, r2
 8006b5a:	617a      	str	r2, [r7, #20]
  return result;
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	fab2 f282 	clz	r2, r2
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	f042 0220 	orr.w	r2, r2, #32
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	f002 021f 	and.w	r2, r2, #31
 8006b6e:	2101      	movs	r1, #1
 8006b70:	fa01 f202 	lsl.w	r2, r1, r2
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e079      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7e:	4b1d      	ldr	r3, [pc, #116]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f023 0203 	bic.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	491a      	ldr	r1, [pc, #104]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b90:	f7fd fd1c 	bl	80045cc <HAL_GetTick>
 8006b94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	e00a      	b.n	8006bae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b98:	f7fd fd18 	bl	80045cc <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e061      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <HAL_RCC_ClockConfig+0x260>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 020c 	and.w	r2, r3, #12
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d1eb      	bne.n	8006b98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d214      	bcs.n	8006bf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 0207 	bic.w	r2, r3, #7
 8006bd6:	4906      	ldr	r1, [pc, #24]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <HAL_RCC_ClockConfig+0x25c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e040      	b.n	8006c72 <HAL_RCC_ClockConfig+0x2de>
 8006bf0:	40022000 	.word	0x40022000
 8006bf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d008      	beq.n	8006c16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c04:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <HAL_RCC_ClockConfig+0x2e8>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	491a      	ldr	r1, [pc, #104]	; (8006c7c <HAL_RCC_ClockConfig+0x2e8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <HAL_RCC_ClockConfig+0x2e8>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4912      	ldr	r1, [pc, #72]	; (8006c7c <HAL_RCC_ClockConfig+0x2e8>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c36:	f000 f829 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <HAL_RCC_ClockConfig+0x2e8>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c44:	22f0      	movs	r2, #240	; 0xf0
 8006c46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	fa92 f2a2 	rbit	r2, r2
 8006c4e:	60fa      	str	r2, [r7, #12]
  return result;
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	fab2 f282 	clz	r2, r2
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	40d3      	lsrs	r3, r2
 8006c5a:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <HAL_RCC_ClockConfig+0x2ec>)
 8006c5c:	5cd3      	ldrb	r3, [r2, r3]
 8006c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <HAL_RCC_ClockConfig+0x2f0>)
 8006c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c66:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <HAL_RCC_ClockConfig+0x2f4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd fc6a 	bl	8004544 <HAL_InitTick>
  
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3778      	adds	r7, #120	; 0x78
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	0800fea4 	.word	0x0800fea4
 8006c84:	20000030 	.word	0x20000030
 8006c88:	20000034 	.word	0x20000034

08006c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b08b      	sub	sp, #44	; 0x2c
 8006c90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006ca6:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 030c 	and.w	r3, r3, #12
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d002      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x30>
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d003      	beq.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x36>
 8006cba:	e03f      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cbc:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006cbe:	623b      	str	r3, [r7, #32]
      break;
 8006cc0:	e03f      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006cc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006ccc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	fa92 f2a2 	rbit	r2, r2
 8006cd4:	607a      	str	r2, [r7, #4]
  return result;
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	fab2 f282 	clz	r2, r2
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	40d3      	lsrs	r3, r2
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ce2:	5cd3      	ldrb	r3, [r2, r3]
 8006ce4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	220f      	movs	r2, #15
 8006cf0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	fa92 f2a2 	rbit	r2, r2
 8006cf8:	60fa      	str	r2, [r7, #12]
  return result;
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	fab2 f282 	clz	r2, r2
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	40d3      	lsrs	r3, r2
 8006d04:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d06:	5cd3      	ldrb	r3, [r2, r3]
 8006d08:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d14:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
 8006d24:	e007      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d26:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	fb02 f303 	mul.w	r3, r2, r3
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	623b      	str	r3, [r7, #32]
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006d3e:	623b      	str	r3, [r7, #32]
      break;
 8006d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d42:	6a3b      	ldr	r3, [r7, #32]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	372c      	adds	r7, #44	; 0x2c
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	40021000 	.word	0x40021000
 8006d54:	007a1200 	.word	0x007a1200
 8006d58:	0800febc 	.word	0x0800febc
 8006d5c:	0800fecc 	.word	0x0800fecc

08006d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d64:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000030 	.word	0x20000030

08006d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006d7e:	f7ff ffef 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006d82:	4601      	mov	r1, r0
 8006d84:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006d90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	fa92 f2a2 	rbit	r2, r2
 8006d98:	603a      	str	r2, [r7, #0]
  return result;
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	fab2 f282 	clz	r2, r2
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	40d3      	lsrs	r3, r2
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40021000 	.word	0x40021000
 8006db8:	0800feb4 	.word	0x0800feb4

08006dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006dc2:	f7ff ffcd 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006dd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006dd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	fa92 f2a2 	rbit	r2, r2
 8006ddc:	603a      	str	r2, [r7, #0]
  return result;
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	fab2 f282 	clz	r2, r2
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	40d3      	lsrs	r3, r2
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006dea:	5cd3      	ldrb	r3, [r2, r3]
 8006dec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	0800feb4 	.word	0x0800feb4

08006e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b092      	sub	sp, #72	; 0x48
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e10:	2300      	movs	r3, #0
 8006e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80d4 	beq.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e24:	4b4e      	ldr	r3, [pc, #312]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10e      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e30:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	4a4a      	ldr	r2, [pc, #296]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	61d3      	str	r3, [r2, #28]
 8006e3c:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e4e:	4b45      	ldr	r3, [pc, #276]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d118      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e5a:	4b42      	ldr	r3, [pc, #264]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a41      	ldr	r2, [pc, #260]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e66:	f7fd fbb1 	bl	80045cc <HAL_GetTick>
 8006e6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6c:	e008      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e6e:	f7fd fbad 	bl	80045cc <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b64      	cmp	r3, #100	; 0x64
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e1d6      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e80:	4b38      	ldr	r3, [pc, #224]	; (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f0      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e8c:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8084 	beq.w	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d07c      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eac:	4b2c      	ldr	r3, [pc, #176]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006eba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	fa93 f3a3 	rbit	r3, r3
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	fa93 f3a3 	rbit	r3, r3
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eea:	fab3 f383 	clz	r3, r3
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2300      	movs	r3, #0
 8006efc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d04b      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0e:	f7fd fb5d 	bl	80045cc <HAL_GetTick>
 8006f12:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f14:	e00a      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f16:	f7fd fb59 	bl	80045cc <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e180      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	fa93 f3a3 	rbit	r3, r3
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
 8006f38:	2302      	movs	r3, #2
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	fa93 f3a3 	rbit	r3, r3
 8006f42:	61fb      	str	r3, [r7, #28]
  return result;
 8006f44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f46:	fab3 f383 	clz	r3, r3
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f043 0302 	orr.w	r3, r3, #2
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d108      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f5a:	4b01      	ldr	r3, [pc, #4]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	e00d      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f60:	40021000 	.word	0x40021000
 8006f64:	40007000 	.word	0x40007000
 8006f68:	10908100 	.word	0x10908100
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	fa93 f3a3 	rbit	r3, r3
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	4b9a      	ldr	r3, [pc, #616]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	613a      	str	r2, [r7, #16]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	fa92 f2a2 	rbit	r2, r2
 8006f86:	60fa      	str	r2, [r7, #12]
  return result;
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	fab2 f282 	clz	r2, r2
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	f002 021f 	and.w	r2, r2, #31
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0b7      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006fa6:	4b8f      	ldr	r3, [pc, #572]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	498c      	ldr	r1, [pc, #560]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d105      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc0:	4b88      	ldr	r3, [pc, #544]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	4a87      	ldr	r2, [pc, #540]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fd8:	4b82      	ldr	r3, [pc, #520]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	f023 0203 	bic.w	r2, r3, #3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	497f      	ldr	r1, [pc, #508]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	4978      	ldr	r1, [pc, #480]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007004:	4313      	orrs	r3, r2
 8007006:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007014:	4b73      	ldr	r3, [pc, #460]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4970      	ldr	r1, [pc, #448]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007022:	4313      	orrs	r3, r2
 8007024:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d008      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007032:	4b6c      	ldr	r3, [pc, #432]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f023 0210 	bic.w	r2, r3, #16
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	4969      	ldr	r1, [pc, #420]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007040:	4313      	orrs	r3, r2
 8007042:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007050:	4b64      	ldr	r3, [pc, #400]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705c:	4961      	ldr	r1, [pc, #388]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800705e:	4313      	orrs	r3, r2
 8007060:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d008      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800706e:	4b5d      	ldr	r3, [pc, #372]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	f023 0220 	bic.w	r2, r3, #32
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	495a      	ldr	r1, [pc, #360]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800707c:	4313      	orrs	r3, r2
 800707e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800708c:	4b55      	ldr	r3, [pc, #340]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	4952      	ldr	r1, [pc, #328]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800709a:	4313      	orrs	r3, r2
 800709c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070aa:	4b4e      	ldr	r3, [pc, #312]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	494b      	ldr	r1, [pc, #300]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070c8:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	4943      	ldr	r1, [pc, #268]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070e6:	4b3f      	ldr	r3, [pc, #252]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	493c      	ldr	r1, [pc, #240]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007104:	4b37      	ldr	r3, [pc, #220]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	4934      	ldr	r1, [pc, #208]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007122:	4b30      	ldr	r3, [pc, #192]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	492d      	ldr	r1, [pc, #180]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007130:	4313      	orrs	r3, r2
 8007132:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007140:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714c:	4925      	ldr	r1, [pc, #148]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800714e:	4313      	orrs	r3, r2
 8007150:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800715e:	4b21      	ldr	r3, [pc, #132]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	491e      	ldr	r1, [pc, #120]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800716c:	4313      	orrs	r3, r2
 800716e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800717c:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	4916      	ldr	r1, [pc, #88]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800718a:	4313      	orrs	r3, r2
 800718c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	490f      	ldr	r1, [pc, #60]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	4907      	ldr	r1, [pc, #28]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00c      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80071d6:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80071e2:	bf00      	nop
 80071e4:	40021000 	.word	0x40021000
 80071e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ea:	4913      	ldr	r1, [pc, #76]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80071fc:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007208:	490b      	ldr	r1, [pc, #44]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800720a:	4313      	orrs	r3, r2
 800720c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007226:	4904      	ldr	r1, [pc, #16]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007228:	4313      	orrs	r3, r2
 800722a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3748      	adds	r7, #72	; 0x48
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000

0800723c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e09d      	b.n	800738a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725e:	d009      	beq.n	8007274 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	61da      	str	r2, [r3, #28]
 8007266:	e005      	b.n	8007274 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fc fe28 	bl	8003ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072b4:	d902      	bls.n	80072bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e002      	b.n	80072c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072ca:	d007      	beq.n	80072dc <HAL_SPI_Init+0xa0>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072d4:	d002      	beq.n	80072dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731e:	ea42 0103 	orr.w	r1, r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	f003 0204 	and.w	r2, r3, #4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007358:	ea42 0103 	orr.w	r1, r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_SPI_Transmit_IT+0x20>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e072      	b.n	800749a <HAL_SPI_Transmit_IT+0x106>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <HAL_SPI_Transmit_IT+0x34>
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073cc:	e060      	b.n	8007490 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d002      	beq.n	80073e0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80073da:	2302      	movs	r3, #2
 80073dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073de:	e057      	b.n	8007490 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2203      	movs	r2, #3
 80073e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	88fa      	ldrh	r2, [r7, #6]
 80073fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007424:	d903      	bls.n	800742e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <HAL_SPI_Transmit_IT+0x114>)
 800742a:	651a      	str	r2, [r3, #80]	; 0x50
 800742c:	e002      	b.n	8007434 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4a1e      	ldr	r2, [pc, #120]	; (80074ac <HAL_SPI_Transmit_IT+0x118>)
 8007432:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800743c:	d10f      	bne.n	800745e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800746c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d008      	beq.n	800748e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	e000      	b.n	8007490 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800748e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	0800806f 	.word	0x0800806f
 80074ac:	08008029 	.word	0x08008029

080074b0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d002      	beq.n	80074d4 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
 80074d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074d2:	e090      	b.n	80075f6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d110      	bne.n	80074fe <HAL_SPI_Receive_IT+0x4e>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074e4:	d10b      	bne.n	80074fe <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2204      	movs	r2, #4
 80074ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f88b 	bl	8007610 <HAL_SPI_TransmitReceive_IT>
 80074fa:	4603      	mov	r3, r0
 80074fc:	e080      	b.n	8007600 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_SPI_Receive_IT+0x5c>
 8007508:	2302      	movs	r3, #2
 800750a:	e079      	b.n	8007600 <HAL_SPI_Receive_IT+0x150>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_SPI_Receive_IT+0x70>
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007524:	e067      	b.n	80075f6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2204      	movs	r2, #4
 800752a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	88fa      	ldrh	r2, [r7, #6]
 800753e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	88fa      	ldrh	r2, [r7, #6]
 8007546:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800756a:	d90b      	bls.n	8007584 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800757a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a22      	ldr	r2, [pc, #136]	; (8007608 <HAL_SPI_Receive_IT+0x158>)
 8007580:	64da      	str	r2, [r3, #76]	; 0x4c
 8007582:	e00a      	b.n	800759a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007592:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a1d      	ldr	r2, [pc, #116]	; (800760c <HAL_SPI_Receive_IT+0x15c>)
 8007598:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a2:	d10f      	bne.n	80075c4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075c2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80075d2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d008      	beq.n	80075f4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e000      	b.n	80075f6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80075f4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	08007fdd 	.word	0x08007fdd
 800760c:	08007f8d 	.word	0x08007f8d

08007610 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_SPI_TransmitReceive_IT+0x20>
 800762c:	2302      	movs	r3, #2
 800762e:	e091      	b.n	8007754 <HAL_SPI_TransmitReceive_IT+0x144>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800763e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007646:	7dbb      	ldrb	r3, [r7, #22]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d00d      	beq.n	8007668 <HAL_SPI_TransmitReceive_IT+0x58>
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007652:	d106      	bne.n	8007662 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <HAL_SPI_TransmitReceive_IT+0x52>
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	2b04      	cmp	r3, #4
 8007660:	d002      	beq.n	8007668 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007662:	2302      	movs	r3, #2
 8007664:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007666:	e070      	b.n	800774a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_SPI_TransmitReceive_IT+0x6a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007674:	887b      	ldrh	r3, [r7, #2]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d102      	bne.n	8007680 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800767e:	e064      	b.n	800774a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b04      	cmp	r3, #4
 800768a:	d003      	beq.n	8007694 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2205      	movs	r2, #5
 8007690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	887a      	ldrh	r2, [r7, #2]
 80076a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	887a      	ldrh	r2, [r7, #2]
 80076aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	887a      	ldrh	r2, [r7, #2]
 80076b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	887a      	ldrh	r2, [r7, #2]
 80076be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076ca:	d906      	bls.n	80076da <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a24      	ldr	r2, [pc, #144]	; (8007760 <HAL_SPI_TransmitReceive_IT+0x150>)
 80076d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <HAL_SPI_TransmitReceive_IT+0x154>)
 80076d6:	651a      	str	r2, [r3, #80]	; 0x50
 80076d8:	e005      	b.n	80076e6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_SPI_TransmitReceive_IT+0x158>)
 80076de:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a22      	ldr	r2, [pc, #136]	; (800776c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076ee:	d802      	bhi.n	80076f6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80076f0:	887b      	ldrh	r3, [r7, #2]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d908      	bls.n	8007708 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	e007      	b.n	8007718 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007716:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007726:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d008      	beq.n	8007748 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	e000      	b.n	800774a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007748:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
}
 8007754:	4618      	mov	r0, r3
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	08007ec7 	.word	0x08007ec7
 8007764:	08007f2d 	.word	0x08007f2d
 8007768:	08007d77 	.word	0x08007d77
 800776c:	08007e35 	.word	0x08007e35

08007770 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 800777c:	2301      	movs	r3, #1
 800777e:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007780:	4b72      	ldr	r3, [pc, #456]	; (800794c <HAL_SPI_Abort_IT+0x1dc>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a72      	ldr	r2, [pc, #456]	; (8007950 <HAL_SPI_Abort_IT+0x1e0>)
 8007786:	fba2 2303 	umull	r2, r3, r2, r3
 800778a:	0a5b      	lsrs	r3, r3, #9
 800778c:	2264      	movs	r2, #100	; 0x64
 800778e:	fb02 f303 	mul.w	r3, r2, r3
 8007792:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0220 	bic.w	r2, r2, #32
 80077a6:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b2:	2b80      	cmp	r3, #128	; 0x80
 80077b4:	d117      	bne.n	80077e6 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a66      	ldr	r2, [pc, #408]	; (8007954 <HAL_SPI_Abort_IT+0x1e4>)
 80077ba:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80077ce:	e008      	b.n	80077e2 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b07      	cmp	r3, #7
 80077e0:	d1ec      	bne.n	80077bc <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d117      	bne.n	8007824 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a58      	ldr	r2, [pc, #352]	; (8007958 <HAL_SPI_Abort_IT+0x1e8>)
 80077f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800780c:	e008      	b.n	8007820 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	3b01      	subs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b07      	cmp	r3, #7
 800781e:	d1ec      	bne.n	80077fa <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00f      	beq.n	800784c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d104      	bne.n	8007844 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	4a47      	ldr	r2, [pc, #284]	; (800795c <HAL_SPI_Abort_IT+0x1ec>)
 8007840:	635a      	str	r2, [r3, #52]	; 0x34
 8007842:	e003      	b.n	800784c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007848:	2200      	movs	r2, #0
 800784a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00f      	beq.n	8007874 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b01      	cmp	r3, #1
 8007860:	d104      	bne.n	800786c <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	4a3e      	ldr	r2, [pc, #248]	; (8007960 <HAL_SPI_Abort_IT+0x1f0>)
 8007868:	635a      	str	r2, [r3, #52]	; 0x34
 800786a:	e003      	b.n	8007874 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007870:	2200      	movs	r2, #0
 8007872:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b02      	cmp	r3, #2
 8007880:	d115      	bne.n	80078ae <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	4618      	mov	r0, r3
 8007890:	f7fd f8bc 	bl	8004a0c <HAL_DMA_Abort_IT>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789e:	2200      	movs	r2, #0
 80078a0:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2240      	movs	r2, #64	; 0x40
 80078a6:	661a      	str	r2, [r3, #96]	; 0x60
 80078a8:	e001      	b.n	80078ae <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d115      	bne.n	80078e8 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d011      	beq.n	80078e8 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fd f89f 	bl	8004a0c <HAL_DMA_Abort_IT>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d8:	2200      	movs	r2, #0
 80078da:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2240      	movs	r2, #64	; 0x40
 80078e0:	661a      	str	r2, [r3, #96]	; 0x60
 80078e2:	e001      	b.n	80078e8 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d129      	bne.n	8007942 <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->TxXferCount = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	d102      	bne.n	800790a <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e002      	b.n	8007910 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007926:	2300      	movs	r3, #0
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f91b 	bl	8007b78 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8007942:	7ffb      	ldrb	r3, [r7, #31]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000030 	.word	0x20000030
 8007950:	057619f1 	.word	0x057619f1
 8007954:	08008651 	.word	0x08008651
 8007958:	08008591 	.word	0x08008591
 800795c:	08007bb7 	.word	0x08007bb7
 8007960:	08007c95 	.word	0x08007c95

08007964 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	099b      	lsrs	r3, r3, #6
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10f      	bne.n	80079a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	099b      	lsrs	r3, r3, #6
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
    return;
 80079a6:	e0d7      	b.n	8007b58 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <HAL_SPI_IRQHandler+0x66>
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	09db      	lsrs	r3, r3, #7
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    return;
 80079c8:	e0c6      	b.n	8007b58 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <HAL_SPI_IRQHandler+0x8c>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	099b      	lsrs	r3, r3, #6
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80b4 	beq.w	8007b58 <HAL_SPI_IRQHandler+0x1f4>
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80ad 	beq.w	8007b58 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	099b      	lsrs	r3, r3, #6
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d023      	beq.n	8007a52 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d011      	beq.n	8007a3a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a1a:	f043 0204 	orr.w	r2, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	e00b      	b.n	8007a52 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	693b      	ldr	r3, [r7, #16]
        return;
 8007a50:	e082      	b.n	8007b58 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a62:	f043 0201 	orr.w	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	f043 0208 	orr.w	r2, r3, #8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60bb      	str	r3, [r7, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	60bb      	str	r3, [r7, #8]
 8007aac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d04f      	beq.n	8007b56 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ac4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <HAL_SPI_IRQHandler+0x17e>
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d034      	beq.n	8007b4c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0203 	bic.w	r2, r2, #3
 8007af0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d011      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afe:	4a18      	ldr	r2, [pc, #96]	; (8007b60 <HAL_SPI_IRQHandler+0x1fc>)
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fc ff80 	bl	8004a0c <HAL_DMA_Abort_IT>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	4a0d      	ldr	r2, [pc, #52]	; (8007b60 <HAL_SPI_IRQHandler+0x1fc>)
 8007b2c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fc ff6a 	bl	8004a0c <HAL_DMA_Abort_IT>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007b4a:	e003      	b.n	8007b54 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f809 	bl	8007b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b52:	e000      	b.n	8007b56 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007b54:	bf00      	nop
    return;
 8007b56:	bf00      	nop
  }
}
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	08007b8d 	.word	0x08007b8d

08007b64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff ffdb 	bl	8007b64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b088      	sub	sp, #32
 8007bba:	af02      	add	r7, sp, #8
 8007bbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc8:	2200      	movs	r2, #0
 8007bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0202 	bic.w	r2, r2, #2
 8007bda:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007bdc:	f7fc fcf6 	bl	80045cc <HAL_GetTick>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	2164      	movs	r1, #100	; 0x64
 8007be6:	6978      	ldr	r0, [r7, #20]
 8007be8:	f000 fbda 	bl	80083a0 <SPI_EndRxTxTransaction>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2240      	movs	r2, #64	; 0x40
 8007bf6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c06:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007c08:	f7fc fce0 	bl	80045cc <HAL_GetTick>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2364      	movs	r3, #100	; 0x64
 8007c12:	2200      	movs	r2, #0
 8007c14:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c18:	6978      	ldr	r0, [r7, #20]
 8007c1a:	f000 fad3 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <SPI_DMATxAbortCallback+0x74>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2240      	movs	r2, #64	; 0x40
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d127      	bne.n	8007c8c <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2200      	movs	r2, #0
 8007c48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d002      	beq.n	8007c58 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2200      	movs	r2, #0
 8007c56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8007c84:	6978      	ldr	r0, [r7, #20]
 8007c86:	f7ff ff77 	bl	8007b78 <HAL_SPI_AbortCpltCallback>
 8007c8a:	e000      	b.n	8007c8e <SPI_DMATxAbortCallback+0xd8>
      return;
 8007c8c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0201 	bic.w	r2, r2, #1
 8007cc8:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007cca:	f7fc fc7f 	bl	80045cc <HAL_GetTick>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2364      	movs	r3, #100	; 0x64
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	6978      	ldr	r0, [r7, #20]
 8007cda:	f000 f9eb 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2240      	movs	r2, #64	; 0x40
 8007ce8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007cea:	f7fc fc6f 	bl	80045cc <HAL_GetTick>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	2364      	movs	r3, #100	; 0x64
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007cfa:	6978      	ldr	r0, [r7, #20]
 8007cfc:	f000 fa62 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <SPI_DMARxAbortCallback+0x78>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2240      	movs	r2, #64	; 0x40
 8007d0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d127      	bne.n	8007d6e <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d002      	beq.n	8007d3a <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	613b      	str	r3, [r7, #16]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f7ff ff06 	bl	8007b78 <HAL_SPI_AbortCpltCallback>
 8007d6c:	e000      	b.n	8007d70 <SPI_DMARxAbortCallback+0xdc>
      return;
 8007d6e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d923      	bls.n	8007dd2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	b292      	uxth	r2, r2
 8007d96:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	1c9a      	adds	r2, r3, #2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b02      	subs	r3, #2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d11f      	bne.n	8007e00 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dce:	605a      	str	r2, [r3, #4]
 8007dd0:	e016      	b.n	8007e00 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f103 020c 	add.w	r2, r3, #12
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10f      	bne.n	8007e2c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fb00 	bl	800842c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d912      	bls.n	8007e6c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	1c9a      	adds	r2, r3, #2
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b02      	subs	r3, #2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e6a:	e012      	b.n	8007e92 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d110      	bne.n	8007ebe <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eaa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fab7 	bl	800842c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	b292      	uxth	r2, r2
 8007eda:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	1c9a      	adds	r2, r3, #2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10f      	bne.n	8007f24 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa84 	bl	800842c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	881a      	ldrh	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	1c9a      	adds	r2, r3, #2
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d110      	bne.n	8007f84 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f70:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa54 	bl	800842c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f103 020c 	add.w	r2, r3, #12
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	7812      	ldrb	r2, [r2, #0]
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa6e 	bl	80084b0 <SPI_CloseRx_ISR>
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	b292      	uxth	r2, r2
 8007ff0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d102      	bne.n	8008020 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa48 	bl	80084b0 <SPI_CloseRx_ISR>
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	7812      	ldrb	r2, [r2, #0]
 800803c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa55 	bl	8008510 <SPI_CloseTx_ISR>
  }
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	881a      	ldrh	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa33 	bl	8008510 <SPI_CloseTx_ISR>
  }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080c4:	f7fc fa82 	bl	80045cc <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	4413      	add	r3, r2
 80080d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080d4:	f7fc fa7a 	bl	80045cc <HAL_GetTick>
 80080d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080da:	4b39      	ldr	r3, [pc, #228]	; (80081c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	015b      	lsls	r3, r3, #5
 80080e0:	0d1b      	lsrs	r3, r3, #20
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	fb02 f303 	mul.w	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ea:	e054      	b.n	8008196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d050      	beq.n	8008196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080f4:	f7fc fa6a 	bl	80045cc <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	d902      	bls.n	800810a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d13d      	bne.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008122:	d111      	bne.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812c:	d004      	beq.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008136:	d107      	bne.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008150:	d10f      	bne.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e017      	b.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3b01      	subs	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4013      	ands	r3, r2
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	bf0c      	ite	eq
 80081a6:	2301      	moveq	r3, #1
 80081a8:	2300      	movne	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d19b      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3720      	adds	r7, #32
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000030 	.word	0x20000030

080081c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081d6:	f7fc f9f9 	bl	80045cc <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	4413      	add	r3, r2
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80081e6:	f7fc f9f1 	bl	80045cc <HAL_GetTick>
 80081ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	330c      	adds	r3, #12
 80081f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081f4:	4b3d      	ldr	r3, [pc, #244]	; (80082ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	00da      	lsls	r2, r3, #3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	0d1b      	lsrs	r3, r3, #20
 8008204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800820c:	e060      	b.n	80082d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008214:	d107      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d104      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008224:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d050      	beq.n	80082d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800822e:	f7fc f9cd 	bl	80045cc <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	429a      	cmp	r2, r3
 800823c:	d902      	bls.n	8008244 <SPI_WaitFifoStateUntilTimeout+0x80>
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d13d      	bne.n	80082c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008252:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800825c:	d111      	bne.n	8008282 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008266:	d004      	beq.n	8008272 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008270:	d107      	bne.n	8008282 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800828a:	d10f      	bne.n	80082ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e010      	b.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	4013      	ands	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d196      	bne.n	800820e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3728      	adds	r7, #40	; 0x28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000030 	.word	0x20000030

080082f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008304:	d111      	bne.n	800832a <SPI_EndRxTransaction+0x3a>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830e:	d004      	beq.n	800831a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008318:	d107      	bne.n	800832a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008328:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	2180      	movs	r1, #128	; 0x80
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff febd 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008344:	f043 0220 	orr.w	r2, r3, #32
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e023      	b.n	8008398 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008358:	d11d      	bne.n	8008396 <SPI_EndRxTransaction+0xa6>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008362:	d004      	beq.n	800836e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836c:	d113      	bne.n	8008396 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2200      	movs	r2, #0
 8008376:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff ff22 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838a:	f043 0220 	orr.w	r2, r3, #32
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e000      	b.n	8008398 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7ff ff03 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c8:	f043 0220 	orr.w	r2, r3, #32
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e027      	b.n	8008424 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	2180      	movs	r1, #128	; 0x80
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fe68 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ee:	f043 0220 	orr.w	r2, r3, #32
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e014      	b.n	8008424 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fedc 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008416:	f043 0220 	orr.w	r2, r3, #32
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e000      	b.n	8008424 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008434:	f7fc f8ca 	bl	80045cc <HAL_GetTick>
 8008438:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0220 	bic.w	r2, r2, #32
 8008448:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	2164      	movs	r1, #100	; 0x64
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff ffa6 	bl	80083a0 <SPI_EndRxTxTransaction>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800845e:	f043 0220 	orr.w	r2, r3, #32
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846a:	2b00      	cmp	r3, #0
 800846c:	d115      	bne.n	800849a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b04      	cmp	r3, #4
 8008478:	d107      	bne.n	800848a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7f9 fcf0 	bl	8001e68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008488:	e00e      	b.n	80084a8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7f9 fcb8 	bl	8001e08 <HAL_SPI_TxRxCpltCallback>
}
 8008498:	e006      	b.n	80084a8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fb5e 	bl	8007b64 <HAL_SPI_ErrorCallback>
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80084c6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80084c8:	f7fc f880 	bl	80045cc <HAL_GetTick>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	2164      	movs	r1, #100	; 0x64
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff ff0c 	bl	80082f0 <SPI_EndRxTransaction>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084e2:	f043 0220 	orr.w	r2, r3, #32
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7f9 fcb4 	bl	8001e68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008500:	e002      	b.n	8008508 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff fb2e 	bl	8007b64 <HAL_SPI_ErrorCallback>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008518:	f7fc f858 	bl	80045cc <HAL_GetTick>
 800851c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800852c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	2164      	movs	r1, #100	; 0x64
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ff34 	bl	80083a0 <SPI_EndRxTxTransaction>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	60bb      	str	r3, [r7, #8]
 8008566:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff faf3 	bl	8007b64 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800857e:	e002      	b.n	8008586 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7f9 fc57 	bl	8001e34 <HAL_SPI_TxCpltCallback>
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085a6:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80085a8:	4b27      	ldr	r3, [pc, #156]	; (8008648 <SPI_AbortRx_ISR+0xb8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a27      	ldr	r2, [pc, #156]	; (800864c <SPI_AbortRx_ISR+0xbc>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	0a5b      	lsrs	r3, r3, #9
 80085b4:	2264      	movs	r2, #100	; 0x64
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ca:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80085de:	e009      	b.n	80085f4 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f0:	2b40      	cmp	r3, #64	; 0x40
 80085f2:	d0eb      	beq.n	80085cc <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80085f4:	f7fb ffea 	bl	80045cc <HAL_GetTick>
 80085f8:	4603      	mov	r3, r0
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	2364      	movs	r3, #100	; 0x64
 80085fe:	2200      	movs	r2, #0
 8008600:	2180      	movs	r1, #128	; 0x80
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fd56 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2240      	movs	r2, #64	; 0x40
 8008612:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008614:	f7fb ffda 	bl	80045cc <HAL_GetTick>
 8008618:	4603      	mov	r3, r0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2364      	movs	r3, #100	; 0x64
 800861e:	2200      	movs	r2, #0
 8008620:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fdcd 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <SPI_AbortRx_ISR+0xa6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2240      	movs	r2, #64	; 0x40
 8008634:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2207      	movs	r2, #7
 800863a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000030 	.word	0x20000030
 800864c:	057619f1 	.word	0x057619f1

08008650 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af02      	add	r7, sp, #8
 8008656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008658:	4b4c      	ldr	r3, [pc, #304]	; (800878c <SPI_AbortTx_ISR+0x13c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a4c      	ldr	r2, [pc, #304]	; (8008790 <SPI_AbortTx_ISR+0x140>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	0a5b      	lsrs	r3, r3, #9
 8008664:	2264      	movs	r2, #100	; 0x64
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800867a:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800868e:	e009      	b.n	80086a4 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3b01      	subs	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a0:	2b80      	cmp	r3, #128	; 0x80
 80086a2:	d0eb      	beq.n	800867c <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80086a4:	f7fb ff92 	bl	80045cc <HAL_GetTick>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	2164      	movs	r1, #100	; 0x64
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff fe76 	bl	80083a0 <SPI_EndRxTxTransaction>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2240      	movs	r2, #64	; 0x40
 80086be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ce:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80086d0:	f7fb ff7c 	bl	80045cc <HAL_GetTick>
 80086d4:	4603      	mov	r3, r0
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2364      	movs	r3, #100	; 0x64
 80086da:	2200      	movs	r2, #0
 80086dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff fd6f 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <SPI_AbortTx_ISR+0xa2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2240      	movs	r2, #64	; 0x40
 80086f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b40      	cmp	r3, #64	; 0x40
 80086fe:	d13c      	bne.n	800877a <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800870e:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008722:	e009      	b.n	8008738 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3b01      	subs	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d0eb      	beq.n	8008710 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008738:	f7fb ff48 	bl	80045cc <HAL_GetTick>
 800873c:	4603      	mov	r3, r0
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2364      	movs	r3, #100	; 0x64
 8008742:	2200      	movs	r2, #0
 8008744:	2180      	movs	r1, #128	; 0x80
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff fcb4 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2240      	movs	r2, #64	; 0x40
 8008756:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008758:	f7fb ff38 	bl	80045cc <HAL_GetTick>
 800875c:	4603      	mov	r3, r0
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2364      	movs	r3, #100	; 0x64
 8008762:	2200      	movs	r2, #0
 8008764:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff fd2b 	bl	80081c4 <SPI_WaitFifoStateUntilTimeout>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <SPI_AbortTx_ISR+0x12a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2240      	movs	r2, #64	; 0x40
 8008778:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2207      	movs	r2, #7
 800877e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 8008782:	bf00      	nop
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000030 	.word	0x20000030
 8008790:	057619f1 	.word	0x057619f1

08008794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e049      	b.n	800883a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fb fbde 	bl	8003f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f000 fc1c 	bl	8009010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e049      	b.n	80088e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d106      	bne.n	800886e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f841 	bl	80088f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f000 fbc5 	bl	8009010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_TIM_PWM_Start+0x24>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	bf14      	ite	ne
 8008920:	2301      	movne	r3, #1
 8008922:	2300      	moveq	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	e03c      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b04      	cmp	r3, #4
 800892c:	d109      	bne.n	8008942 <HAL_TIM_PWM_Start+0x3e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b01      	cmp	r3, #1
 8008938:	bf14      	ite	ne
 800893a:	2301      	movne	r3, #1
 800893c:	2300      	moveq	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	e02f      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d109      	bne.n	800895c <HAL_TIM_PWM_Start+0x58>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e022      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b0c      	cmp	r3, #12
 8008960:	d109      	bne.n	8008976 <HAL_TIM_PWM_Start+0x72>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b01      	cmp	r3, #1
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e015      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b10      	cmp	r3, #16
 800897a:	d109      	bne.n	8008990 <HAL_TIM_PWM_Start+0x8c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e008      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e0a1      	b.n	8008aee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_PWM_Start+0xb6>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089b8:	e023      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d104      	bne.n	80089ca <HAL_TIM_PWM_Start+0xc6>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089c8:	e01b      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d104      	bne.n	80089da <HAL_TIM_PWM_Start+0xd6>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d8:	e013      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b0c      	cmp	r3, #12
 80089de:	d104      	bne.n	80089ea <HAL_TIM_PWM_Start+0xe6>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089e8:	e00b      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b10      	cmp	r3, #16
 80089ee:	d104      	bne.n	80089fa <HAL_TIM_PWM_Start+0xf6>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089f8:	e003      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2201      	movs	r2, #1
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 ff3e 	bl	800988c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a38      	ldr	r2, [pc, #224]	; (8008af8 <HAL_TIM_PWM_Start+0x1f4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d018      	beq.n	8008a4c <HAL_TIM_PWM_Start+0x148>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a37      	ldr	r2, [pc, #220]	; (8008afc <HAL_TIM_PWM_Start+0x1f8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d013      	beq.n	8008a4c <HAL_TIM_PWM_Start+0x148>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a35      	ldr	r2, [pc, #212]	; (8008b00 <HAL_TIM_PWM_Start+0x1fc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d00e      	beq.n	8008a4c <HAL_TIM_PWM_Start+0x148>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a34      	ldr	r2, [pc, #208]	; (8008b04 <HAL_TIM_PWM_Start+0x200>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d009      	beq.n	8008a4c <HAL_TIM_PWM_Start+0x148>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a32      	ldr	r2, [pc, #200]	; (8008b08 <HAL_TIM_PWM_Start+0x204>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d004      	beq.n	8008a4c <HAL_TIM_PWM_Start+0x148>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a31      	ldr	r2, [pc, #196]	; (8008b0c <HAL_TIM_PWM_Start+0x208>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIM_PWM_Start+0x14c>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e000      	b.n	8008a52 <HAL_TIM_PWM_Start+0x14e>
 8008a50:	2300      	movs	r3, #0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d007      	beq.n	8008a66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a23      	ldr	r2, [pc, #140]	; (8008af8 <HAL_TIM_PWM_Start+0x1f4>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d01d      	beq.n	8008aac <HAL_TIM_PWM_Start+0x1a8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a78:	d018      	beq.n	8008aac <HAL_TIM_PWM_Start+0x1a8>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a24      	ldr	r2, [pc, #144]	; (8008b10 <HAL_TIM_PWM_Start+0x20c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d013      	beq.n	8008aac <HAL_TIM_PWM_Start+0x1a8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a22      	ldr	r2, [pc, #136]	; (8008b14 <HAL_TIM_PWM_Start+0x210>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00e      	beq.n	8008aac <HAL_TIM_PWM_Start+0x1a8>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <HAL_TIM_PWM_Start+0x1f8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d009      	beq.n	8008aac <HAL_TIM_PWM_Start+0x1a8>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a18      	ldr	r2, [pc, #96]	; (8008b00 <HAL_TIM_PWM_Start+0x1fc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d004      	beq.n	8008aac <HAL_TIM_PWM_Start+0x1a8>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <HAL_TIM_PWM_Start+0x208>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d115      	bne.n	8008ad8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <HAL_TIM_PWM_Start+0x214>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b06      	cmp	r3, #6
 8008abc:	d015      	beq.n	8008aea <HAL_TIM_PWM_Start+0x1e6>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d011      	beq.n	8008aea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0201 	orr.w	r2, r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad6:	e008      	b.n	8008aea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	e000      	b.n	8008aec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40012c00 	.word	0x40012c00
 8008afc:	40013400 	.word	0x40013400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800
 8008b0c:	40015000 	.word	0x40015000
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	00010007 	.word	0x00010007

08008b1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 feac 	bl	800988c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a40      	ldr	r2, [pc, #256]	; (8008c3c <HAL_TIM_PWM_Stop+0x120>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d018      	beq.n	8008b70 <HAL_TIM_PWM_Stop+0x54>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a3f      	ldr	r2, [pc, #252]	; (8008c40 <HAL_TIM_PWM_Stop+0x124>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <HAL_TIM_PWM_Stop+0x54>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a3d      	ldr	r2, [pc, #244]	; (8008c44 <HAL_TIM_PWM_Stop+0x128>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <HAL_TIM_PWM_Stop+0x54>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a3c      	ldr	r2, [pc, #240]	; (8008c48 <HAL_TIM_PWM_Stop+0x12c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <HAL_TIM_PWM_Stop+0x54>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a3a      	ldr	r2, [pc, #232]	; (8008c4c <HAL_TIM_PWM_Stop+0x130>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_TIM_PWM_Stop+0x54>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a39      	ldr	r2, [pc, #228]	; (8008c50 <HAL_TIM_PWM_Stop+0x134>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d101      	bne.n	8008b74 <HAL_TIM_PWM_Stop+0x58>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <HAL_TIM_PWM_Stop+0x5a>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d017      	beq.n	8008baa <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6a1a      	ldr	r2, [r3, #32]
 8008b80:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b84:	4013      	ands	r3, r2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10f      	bne.n	8008baa <HAL_TIM_PWM_Stop+0x8e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	f240 4344 	movw	r3, #1092	; 0x444
 8008b94:	4013      	ands	r3, r2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_PWM_Stop+0x8e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6a1a      	ldr	r2, [r3, #32]
 8008bb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10f      	bne.n	8008bda <HAL_TIM_PWM_Stop+0xbe>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6a1a      	ldr	r2, [r3, #32]
 8008bc0:	f240 4344 	movw	r3, #1092	; 0x444
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d107      	bne.n	8008bda <HAL_TIM_PWM_Stop+0xbe>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0201 	bic.w	r2, r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Stop+0xce>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be8:	e023      	b.n	8008c32 <HAL_TIM_PWM_Stop+0x116>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Stop+0xde>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bf8:	e01b      	b.n	8008c32 <HAL_TIM_PWM_Stop+0x116>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_PWM_Stop+0xee>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c08:	e013      	b.n	8008c32 <HAL_TIM_PWM_Stop+0x116>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_PWM_Stop+0xfe>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c18:	e00b      	b.n	8008c32 <HAL_TIM_PWM_Stop+0x116>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b10      	cmp	r3, #16
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_PWM_Stop+0x10e>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c28:	e003      	b.n	8008c32 <HAL_TIM_PWM_Stop+0x116>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800
 8008c50:	40015000 	.word	0x40015000

08008c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e0ff      	b.n	8008e72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b14      	cmp	r3, #20
 8008c7e:	f200 80f0 	bhi.w	8008e62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008e63 	.word	0x08008e63
 8008c90:	08008e63 	.word	0x08008e63
 8008c94:	08008e63 	.word	0x08008e63
 8008c98:	08008d1d 	.word	0x08008d1d
 8008c9c:	08008e63 	.word	0x08008e63
 8008ca0:	08008e63 	.word	0x08008e63
 8008ca4:	08008e63 	.word	0x08008e63
 8008ca8:	08008d5f 	.word	0x08008d5f
 8008cac:	08008e63 	.word	0x08008e63
 8008cb0:	08008e63 	.word	0x08008e63
 8008cb4:	08008e63 	.word	0x08008e63
 8008cb8:	08008d9f 	.word	0x08008d9f
 8008cbc:	08008e63 	.word	0x08008e63
 8008cc0:	08008e63 	.word	0x08008e63
 8008cc4:	08008e63 	.word	0x08008e63
 8008cc8:	08008de1 	.word	0x08008de1
 8008ccc:	08008e63 	.word	0x08008e63
 8008cd0:	08008e63 	.word	0x08008e63
 8008cd4:	08008e63 	.word	0x08008e63
 8008cd8:	08008e21 	.word	0x08008e21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fa32 	bl	800914c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699a      	ldr	r2, [r3, #24]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0208 	orr.w	r2, r2, #8
 8008cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0204 	bic.w	r2, r2, #4
 8008d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6999      	ldr	r1, [r3, #24]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	691a      	ldr	r2, [r3, #16]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	619a      	str	r2, [r3, #24]
      break;
 8008d1a:	e0a5      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 faac 	bl	8009280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6999      	ldr	r1, [r3, #24]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	021a      	lsls	r2, r3, #8
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	619a      	str	r2, [r3, #24]
      break;
 8008d5c:	e084      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fb1f 	bl	80093a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69da      	ldr	r2, [r3, #28]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0208 	orr.w	r2, r2, #8
 8008d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69da      	ldr	r2, [r3, #28]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0204 	bic.w	r2, r2, #4
 8008d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69d9      	ldr	r1, [r3, #28]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	61da      	str	r2, [r3, #28]
      break;
 8008d9c:	e064      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fb91 	bl	80094cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69da      	ldr	r2, [r3, #28]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	69da      	ldr	r2, [r3, #28]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69d9      	ldr	r1, [r3, #28]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	021a      	lsls	r2, r3, #8
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	61da      	str	r2, [r3, #28]
      break;
 8008dde:	e043      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fbe0 	bl	80095ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0208 	orr.w	r2, r2, #8
 8008dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0204 	bic.w	r2, r2, #4
 8008e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e1e:	e023      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68b9      	ldr	r1, [r7, #8]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fc2a 	bl	8009680 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	021a      	lsls	r2, r3, #8
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e60:	e002      	b.n	8008e68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75fb      	strb	r3, [r7, #23]
      break;
 8008e66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop

08008e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <HAL_TIM_ConfigClockSource+0x1c>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e0b6      	b.n	8009006 <HAL_TIM_ConfigClockSource+0x18a>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ed4:	d03e      	beq.n	8008f54 <HAL_TIM_ConfigClockSource+0xd8>
 8008ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eda:	f200 8087 	bhi.w	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee2:	f000 8086 	beq.w	8008ff2 <HAL_TIM_ConfigClockSource+0x176>
 8008ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eea:	d87f      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008eec:	2b70      	cmp	r3, #112	; 0x70
 8008eee:	d01a      	beq.n	8008f26 <HAL_TIM_ConfigClockSource+0xaa>
 8008ef0:	2b70      	cmp	r3, #112	; 0x70
 8008ef2:	d87b      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008ef4:	2b60      	cmp	r3, #96	; 0x60
 8008ef6:	d050      	beq.n	8008f9a <HAL_TIM_ConfigClockSource+0x11e>
 8008ef8:	2b60      	cmp	r3, #96	; 0x60
 8008efa:	d877      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008efc:	2b50      	cmp	r3, #80	; 0x50
 8008efe:	d03c      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0xfe>
 8008f00:	2b50      	cmp	r3, #80	; 0x50
 8008f02:	d873      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d058      	beq.n	8008fba <HAL_TIM_ConfigClockSource+0x13e>
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d86f      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008f0c:	2b30      	cmp	r3, #48	; 0x30
 8008f0e:	d064      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x15e>
 8008f10:	2b30      	cmp	r3, #48	; 0x30
 8008f12:	d86b      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	d060      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x15e>
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d867      	bhi.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d05c      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x15e>
 8008f20:	2b10      	cmp	r3, #16
 8008f22:	d05a      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x15e>
 8008f24:	e062      	b.n	8008fec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6899      	ldr	r1, [r3, #8]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f000 fc89 	bl	800984c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	609a      	str	r2, [r3, #8]
      break;
 8008f52:	e04f      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6899      	ldr	r1, [r3, #8]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f000 fc72 	bl	800984c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f76:	609a      	str	r2, [r3, #8]
      break;
 8008f78:	e03c      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6859      	ldr	r1, [r3, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f000 fbe6 	bl	8009758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2150      	movs	r1, #80	; 0x50
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fc3f 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008f98:	e02c      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	6859      	ldr	r1, [r3, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f000 fc05 	bl	80097b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2160      	movs	r1, #96	; 0x60
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fc2f 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008fb8:	e01c      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	6859      	ldr	r1, [r3, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f000 fbc6 	bl	8009758 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2140      	movs	r1, #64	; 0x40
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fc1f 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008fd8:	e00c      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f000 fc16 	bl	8009816 <TIM_ITRx_SetConfig>
      break;
 8008fea:	e003      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff0:	e000      	b.n	8008ff4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a42      	ldr	r2, [pc, #264]	; (800912c <TIM_Base_SetConfig+0x11c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d013      	beq.n	8009050 <TIM_Base_SetConfig+0x40>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902e:	d00f      	beq.n	8009050 <TIM_Base_SetConfig+0x40>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a3f      	ldr	r2, [pc, #252]	; (8009130 <TIM_Base_SetConfig+0x120>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00b      	beq.n	8009050 <TIM_Base_SetConfig+0x40>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a3e      	ldr	r2, [pc, #248]	; (8009134 <TIM_Base_SetConfig+0x124>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d007      	beq.n	8009050 <TIM_Base_SetConfig+0x40>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a3d      	ldr	r2, [pc, #244]	; (8009138 <TIM_Base_SetConfig+0x128>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d003      	beq.n	8009050 <TIM_Base_SetConfig+0x40>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a3c      	ldr	r2, [pc, #240]	; (800913c <TIM_Base_SetConfig+0x12c>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d108      	bne.n	8009062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a31      	ldr	r2, [pc, #196]	; (800912c <TIM_Base_SetConfig+0x11c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d01f      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009070:	d01b      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a2e      	ldr	r2, [pc, #184]	; (8009130 <TIM_Base_SetConfig+0x120>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d017      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a2d      	ldr	r2, [pc, #180]	; (8009134 <TIM_Base_SetConfig+0x124>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d013      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a2c      	ldr	r2, [pc, #176]	; (8009138 <TIM_Base_SetConfig+0x128>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00f      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a2c      	ldr	r2, [pc, #176]	; (8009140 <TIM_Base_SetConfig+0x130>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00b      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a2b      	ldr	r2, [pc, #172]	; (8009144 <TIM_Base_SetConfig+0x134>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d007      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a2a      	ldr	r2, [pc, #168]	; (8009148 <TIM_Base_SetConfig+0x138>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d003      	beq.n	80090aa <TIM_Base_SetConfig+0x9a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a25      	ldr	r2, [pc, #148]	; (800913c <TIM_Base_SetConfig+0x12c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d108      	bne.n	80090bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a12      	ldr	r2, [pc, #72]	; (800912c <TIM_Base_SetConfig+0x11c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <TIM_Base_SetConfig+0x100>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a13      	ldr	r2, [pc, #76]	; (8009138 <TIM_Base_SetConfig+0x128>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00f      	beq.n	8009110 <TIM_Base_SetConfig+0x100>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a13      	ldr	r2, [pc, #76]	; (8009140 <TIM_Base_SetConfig+0x130>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d00b      	beq.n	8009110 <TIM_Base_SetConfig+0x100>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a12      	ldr	r2, [pc, #72]	; (8009144 <TIM_Base_SetConfig+0x134>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d007      	beq.n	8009110 <TIM_Base_SetConfig+0x100>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a11      	ldr	r2, [pc, #68]	; (8009148 <TIM_Base_SetConfig+0x138>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d003      	beq.n	8009110 <TIM_Base_SetConfig+0x100>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <TIM_Base_SetConfig+0x12c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d103      	bne.n	8009118 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	615a      	str	r2, [r3, #20]
}
 800911e:	bf00      	nop
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40012c00 	.word	0x40012c00
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800
 8009138:	40013400 	.word	0x40013400
 800913c:	40015000 	.word	0x40015000
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	f023 0201 	bic.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800917a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f023 0302 	bic.w	r3, r3, #2
 8009198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a30      	ldr	r2, [pc, #192]	; (8009268 <TIM_OC1_SetConfig+0x11c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d013      	beq.n	80091d4 <TIM_OC1_SetConfig+0x88>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a2f      	ldr	r2, [pc, #188]	; (800926c <TIM_OC1_SetConfig+0x120>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00f      	beq.n	80091d4 <TIM_OC1_SetConfig+0x88>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a2e      	ldr	r2, [pc, #184]	; (8009270 <TIM_OC1_SetConfig+0x124>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00b      	beq.n	80091d4 <TIM_OC1_SetConfig+0x88>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a2d      	ldr	r2, [pc, #180]	; (8009274 <TIM_OC1_SetConfig+0x128>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d007      	beq.n	80091d4 <TIM_OC1_SetConfig+0x88>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a2c      	ldr	r2, [pc, #176]	; (8009278 <TIM_OC1_SetConfig+0x12c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d003      	beq.n	80091d4 <TIM_OC1_SetConfig+0x88>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a2b      	ldr	r2, [pc, #172]	; (800927c <TIM_OC1_SetConfig+0x130>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d10c      	bne.n	80091ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f023 0308 	bic.w	r3, r3, #8
 80091da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f023 0304 	bic.w	r3, r3, #4
 80091ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <TIM_OC1_SetConfig+0x11c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d013      	beq.n	800921e <TIM_OC1_SetConfig+0xd2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a1c      	ldr	r2, [pc, #112]	; (800926c <TIM_OC1_SetConfig+0x120>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00f      	beq.n	800921e <TIM_OC1_SetConfig+0xd2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <TIM_OC1_SetConfig+0x124>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00b      	beq.n	800921e <TIM_OC1_SetConfig+0xd2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a1a      	ldr	r2, [pc, #104]	; (8009274 <TIM_OC1_SetConfig+0x128>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d007      	beq.n	800921e <TIM_OC1_SetConfig+0xd2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <TIM_OC1_SetConfig+0x12c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d003      	beq.n	800921e <TIM_OC1_SetConfig+0xd2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a18      	ldr	r2, [pc, #96]	; (800927c <TIM_OC1_SetConfig+0x130>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d111      	bne.n	8009242 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800922c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4313      	orrs	r3, r2
 8009236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4313      	orrs	r3, r2
 8009240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	621a      	str	r2, [r3, #32]
}
 800925c:	bf00      	nop
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	40012c00 	.word	0x40012c00
 800926c:	40013400 	.word	0x40013400
 8009270:	40014000 	.word	0x40014000
 8009274:	40014400 	.word	0x40014400
 8009278:	40014800 	.word	0x40014800
 800927c:	40015000 	.word	0x40015000

08009280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	f023 0210 	bic.w	r2, r3, #16
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f023 0320 	bic.w	r3, r3, #32
 80092ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a2c      	ldr	r2, [pc, #176]	; (8009390 <TIM_OC2_SetConfig+0x110>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d007      	beq.n	80092f4 <TIM_OC2_SetConfig+0x74>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a2b      	ldr	r2, [pc, #172]	; (8009394 <TIM_OC2_SetConfig+0x114>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_OC2_SetConfig+0x74>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a2a      	ldr	r2, [pc, #168]	; (8009398 <TIM_OC2_SetConfig+0x118>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d10d      	bne.n	8009310 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800930e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a1f      	ldr	r2, [pc, #124]	; (8009390 <TIM_OC2_SetConfig+0x110>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d013      	beq.n	8009340 <TIM_OC2_SetConfig+0xc0>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a1e      	ldr	r2, [pc, #120]	; (8009394 <TIM_OC2_SetConfig+0x114>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00f      	beq.n	8009340 <TIM_OC2_SetConfig+0xc0>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a1e      	ldr	r2, [pc, #120]	; (800939c <TIM_OC2_SetConfig+0x11c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00b      	beq.n	8009340 <TIM_OC2_SetConfig+0xc0>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <TIM_OC2_SetConfig+0x120>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <TIM_OC2_SetConfig+0xc0>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a1c      	ldr	r2, [pc, #112]	; (80093a4 <TIM_OC2_SetConfig+0x124>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC2_SetConfig+0xc0>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a17      	ldr	r2, [pc, #92]	; (8009398 <TIM_OC2_SetConfig+0x118>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d113      	bne.n	8009368 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009346:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800934e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	621a      	str	r2, [r3, #32]
}
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40012c00 	.word	0x40012c00
 8009394:	40013400 	.word	0x40013400
 8009398:	40015000 	.word	0x40015000
 800939c:	40014000 	.word	0x40014000
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800

080093a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2b      	ldr	r2, [pc, #172]	; (80094b4 <TIM_OC3_SetConfig+0x10c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <TIM_OC3_SetConfig+0x72>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2a      	ldr	r2, [pc, #168]	; (80094b8 <TIM_OC3_SetConfig+0x110>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_OC3_SetConfig+0x72>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a29      	ldr	r2, [pc, #164]	; (80094bc <TIM_OC3_SetConfig+0x114>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d10d      	bne.n	8009436 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009434:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1e      	ldr	r2, [pc, #120]	; (80094b4 <TIM_OC3_SetConfig+0x10c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d013      	beq.n	8009466 <TIM_OC3_SetConfig+0xbe>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <TIM_OC3_SetConfig+0x110>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00f      	beq.n	8009466 <TIM_OC3_SetConfig+0xbe>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <TIM_OC3_SetConfig+0x118>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00b      	beq.n	8009466 <TIM_OC3_SetConfig+0xbe>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a1c      	ldr	r2, [pc, #112]	; (80094c4 <TIM_OC3_SetConfig+0x11c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d007      	beq.n	8009466 <TIM_OC3_SetConfig+0xbe>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a1b      	ldr	r2, [pc, #108]	; (80094c8 <TIM_OC3_SetConfig+0x120>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d003      	beq.n	8009466 <TIM_OC3_SetConfig+0xbe>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a16      	ldr	r2, [pc, #88]	; (80094bc <TIM_OC3_SetConfig+0x114>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d113      	bne.n	800948e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	4313      	orrs	r3, r2
 800948c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	621a      	str	r2, [r3, #32]
}
 80094a8:	bf00      	nop
 80094aa:	371c      	adds	r7, #28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	40012c00 	.word	0x40012c00
 80094b8:	40013400 	.word	0x40013400
 80094bc:	40015000 	.word	0x40015000
 80094c0:	40014000 	.word	0x40014000
 80094c4:	40014400 	.word	0x40014400
 80094c8:	40014800 	.word	0x40014800

080094cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800951a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	031b      	lsls	r3, r3, #12
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1a      	ldr	r2, [pc, #104]	; (8009594 <TIM_OC4_SetConfig+0xc8>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d013      	beq.n	8009558 <TIM_OC4_SetConfig+0x8c>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a19      	ldr	r2, [pc, #100]	; (8009598 <TIM_OC4_SetConfig+0xcc>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00f      	beq.n	8009558 <TIM_OC4_SetConfig+0x8c>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a18      	ldr	r2, [pc, #96]	; (800959c <TIM_OC4_SetConfig+0xd0>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00b      	beq.n	8009558 <TIM_OC4_SetConfig+0x8c>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <TIM_OC4_SetConfig+0xd4>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d007      	beq.n	8009558 <TIM_OC4_SetConfig+0x8c>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a16      	ldr	r2, [pc, #88]	; (80095a4 <TIM_OC4_SetConfig+0xd8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_OC4_SetConfig+0x8c>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a15      	ldr	r2, [pc, #84]	; (80095a8 <TIM_OC4_SetConfig+0xdc>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d109      	bne.n	800956c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800955e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	019b      	lsls	r3, r3, #6
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	4313      	orrs	r3, r2
 800956a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	621a      	str	r2, [r3, #32]
}
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40012c00 	.word	0x40012c00
 8009598:	40013400 	.word	0x40013400
 800959c:	40014000 	.word	0x40014000
 80095a0:	40014400 	.word	0x40014400
 80095a4:	40014800 	.word	0x40014800
 80095a8:	40015000 	.word	0x40015000

080095ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	041b      	lsls	r3, r3, #16
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a19      	ldr	r2, [pc, #100]	; (8009668 <TIM_OC5_SetConfig+0xbc>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d013      	beq.n	800962e <TIM_OC5_SetConfig+0x82>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a18      	ldr	r2, [pc, #96]	; (800966c <TIM_OC5_SetConfig+0xc0>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00f      	beq.n	800962e <TIM_OC5_SetConfig+0x82>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a17      	ldr	r2, [pc, #92]	; (8009670 <TIM_OC5_SetConfig+0xc4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00b      	beq.n	800962e <TIM_OC5_SetConfig+0x82>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a16      	ldr	r2, [pc, #88]	; (8009674 <TIM_OC5_SetConfig+0xc8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d007      	beq.n	800962e <TIM_OC5_SetConfig+0x82>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a15      	ldr	r2, [pc, #84]	; (8009678 <TIM_OC5_SetConfig+0xcc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d003      	beq.n	800962e <TIM_OC5_SetConfig+0x82>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a14      	ldr	r2, [pc, #80]	; (800967c <TIM_OC5_SetConfig+0xd0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d109      	bne.n	8009642 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009634:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	4313      	orrs	r3, r2
 8009640:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	621a      	str	r2, [r3, #32]
}
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	40012c00 	.word	0x40012c00
 800966c:	40013400 	.word	0x40013400
 8009670:	40014000 	.word	0x40014000
 8009674:	40014400 	.word	0x40014400
 8009678:	40014800 	.word	0x40014800
 800967c:	40015000 	.word	0x40015000

08009680 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4313      	orrs	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	051b      	lsls	r3, r3, #20
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a1a      	ldr	r2, [pc, #104]	; (8009740 <TIM_OC6_SetConfig+0xc0>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d013      	beq.n	8009704 <TIM_OC6_SetConfig+0x84>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a19      	ldr	r2, [pc, #100]	; (8009744 <TIM_OC6_SetConfig+0xc4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00f      	beq.n	8009704 <TIM_OC6_SetConfig+0x84>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a18      	ldr	r2, [pc, #96]	; (8009748 <TIM_OC6_SetConfig+0xc8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d00b      	beq.n	8009704 <TIM_OC6_SetConfig+0x84>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a17      	ldr	r2, [pc, #92]	; (800974c <TIM_OC6_SetConfig+0xcc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d007      	beq.n	8009704 <TIM_OC6_SetConfig+0x84>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a16      	ldr	r2, [pc, #88]	; (8009750 <TIM_OC6_SetConfig+0xd0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d003      	beq.n	8009704 <TIM_OC6_SetConfig+0x84>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a15      	ldr	r2, [pc, #84]	; (8009754 <TIM_OC6_SetConfig+0xd4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d109      	bne.n	8009718 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800970a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	029b      	lsls	r3, r3, #10
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	621a      	str	r2, [r3, #32]
}
 8009732:	bf00      	nop
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40012c00 	.word	0x40012c00
 8009744:	40013400 	.word	0x40013400
 8009748:	40014000 	.word	0x40014000
 800974c:	40014400 	.word	0x40014400
 8009750:	40014800 	.word	0x40014800
 8009754:	40015000 	.word	0x40015000

08009758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	f023 0201 	bic.w	r2, r3, #1
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	011b      	lsls	r3, r3, #4
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	4313      	orrs	r3, r2
 800978c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f023 030a 	bic.w	r3, r3, #10
 8009794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4313      	orrs	r3, r2
 800979c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	621a      	str	r2, [r3, #32]
}
 80097aa:	bf00      	nop
 80097ac:	371c      	adds	r7, #28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b087      	sub	sp, #28
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	60f8      	str	r0, [r7, #12]
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	f023 0210 	bic.w	r2, r3, #16
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	031b      	lsls	r3, r3, #12
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	f043 0307 	orr.w	r3, r3, #7
 8009838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]
}
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	021a      	lsls	r2, r3, #8
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	431a      	orrs	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4313      	orrs	r3, r2
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	609a      	str	r2, [r3, #8]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	2201      	movs	r2, #1
 80098a0:	fa02 f303 	lsl.w	r3, r2, r3
 80098a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1a      	ldr	r2, [r3, #32]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	43db      	mvns	r3, r3
 80098ae:	401a      	ands	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a1a      	ldr	r2, [r3, #32]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	fa01 f303 	lsl.w	r3, r1, r3
 80098c4:	431a      	orrs	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	621a      	str	r2, [r3, #32]
}
 80098ca:	bf00      	nop
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e06d      	b.n	80099cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a30      	ldr	r2, [pc, #192]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d009      	beq.n	800992e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a2f      	ldr	r2, [pc, #188]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d004      	beq.n	800992e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a2d      	ldr	r2, [pc, #180]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d108      	bne.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009934:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a1e      	ldr	r2, [pc, #120]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d01d      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996c:	d018      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a1c      	ldr	r2, [pc, #112]	; (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d013      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1a      	ldr	r2, [pc, #104]	; (80099e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d00e      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a15      	ldr	r2, [pc, #84]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d009      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a16      	ldr	r2, [pc, #88]	; (80099ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d004      	beq.n	80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a11      	ldr	r2, [pc, #68]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d10c      	bne.n	80099ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	40012c00 	.word	0x40012c00
 80099dc:	40013400 	.word	0x40013400
 80099e0:	40015000 	.word	0x40015000
 80099e4:	40000400 	.word	0x40000400
 80099e8:	40000800 	.word	0x40000800
 80099ec:	40014000 	.word	0x40014000

080099f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e040      	b.n	8009a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7fa fb0a 	bl	800402c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2224      	movs	r2, #36	; 0x24
 8009a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0201 	bic.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fcc4 	bl	800a3bc <UART_SetConfig>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e022      	b.n	8009a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fe8c 	bl	800a764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	689a      	ldr	r2, [r3, #8]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 ff13 	bl	800a8a8 <UART_CheckIdleState>
 8009a82:	4603      	mov	r3, r0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	; 0x28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	d165      	bne.n	8009b6e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <HAL_UART_Transmit_DMA+0x22>
 8009aa8:	88fb      	ldrh	r3, [r7, #6]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e05e      	b.n	8009b70 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	88fa      	ldrh	r2, [r7, #6]
 8009abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	88fa      	ldrh	r2, [r7, #6]
 8009ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2221      	movs	r2, #33	; 0x21
 8009ad4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d027      	beq.n	8009b2e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae2:	4a25      	ldr	r2, [pc, #148]	; (8009b78 <HAL_UART_Transmit_DMA+0xec>)
 8009ae4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aea:	4a24      	ldr	r2, [pc, #144]	; (8009b7c <HAL_UART_Transmit_DMA+0xf0>)
 8009aec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af2:	4a23      	ldr	r2, [pc, #140]	; (8009b80 <HAL_UART_Transmit_DMA+0xf4>)
 8009af4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afa:	2200      	movs	r2, #0
 8009afc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	4619      	mov	r1, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3328      	adds	r3, #40	; 0x28
 8009b0e:	461a      	mov	r2, r3
 8009b10:	88fb      	ldrh	r3, [r7, #6]
 8009b12:	f7fa fee3 	bl	80048dc <HAL_DMA_Start_IT>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d008      	beq.n	8009b2e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2210      	movs	r2, #16
 8009b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2220      	movs	r2, #32
 8009b28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e020      	b.n	8009b70 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2240      	movs	r2, #64	; 0x40
 8009b34:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	613b      	str	r3, [r7, #16]
   return(result);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3308      	adds	r3, #8
 8009b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b56:	623a      	str	r2, [r7, #32]
 8009b58:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	69f9      	ldr	r1, [r7, #28]
 8009b5c:	6a3a      	ldr	r2, [r7, #32]
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e5      	bne.n	8009b36 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e000      	b.n	8009b70 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009b6e:	2302      	movs	r3, #2
  }
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3728      	adds	r7, #40	; 0x28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	0800ad1d 	.word	0x0800ad1d
 8009b7c:	0800adb1 	.word	0x0800adb1
 8009b80:	0800af31 	.word	0x0800af31

08009b84 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08e      	sub	sp, #56	; 0x38
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e6      	bne.n	8009b8c <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d137      	bne.n	8009c3c <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009be2:	633b      	str	r3, [r7, #48]	; 0x30
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3308      	adds	r3, #8
 8009bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bec:	61ba      	str	r2, [r7, #24]
 8009bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf0:	6979      	ldr	r1, [r7, #20]
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e5      	bne.n	8009bcc <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d019      	beq.n	8009c3c <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fa fec0 	bl	800499a <HAL_DMA_Abort>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00d      	beq.n	8009c3c <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fa ffd2 	bl	8004bce <HAL_DMA_GetError>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d105      	bne.n	8009c3c <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2210      	movs	r2, #16
 8009c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e007      	b.n	8009c4c <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3738      	adds	r7, #56	; 0x38
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b09a      	sub	sp, #104	; 0x68
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c70:	667b      	str	r3, [r7, #100]	; 0x64
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c7c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e6      	bne.n	8009c5c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cae:	643a      	str	r2, [r7, #64]	; 0x40
 8009cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d118      	bne.n	8009cfc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	e853 3f00 	ldrex	r3, [r3]
 8009cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	f023 0310 	bic.w	r3, r3, #16
 8009cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf0:	e841 2300 	strex	r3, r2, [r1]
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e6      	bne.n	8009cca <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d06:	2b40      	cmp	r3, #64	; 0x40
 8009d08:	d137      	bne.n	8009d7a <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d2a:	61ba      	str	r2, [r7, #24]
 8009d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6979      	ldr	r1, [r7, #20]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	613b      	str	r3, [r7, #16]
   return(result);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e5      	bne.n	8009d0a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d019      	beq.n	8009d7a <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fa fe21 	bl	800499a <HAL_DMA_Abort>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00d      	beq.n	8009d7a <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fa ff33 	bl	8004bce <HAL_DMA_GetError>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	d105      	bne.n	8009d7a <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2210      	movs	r2, #16
 8009d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e017      	b.n	8009daa <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	220f      	movs	r2, #15
 8009d88:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699a      	ldr	r2, [r3, #24]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0208 	orr.w	r2, r2, #8
 8009d98:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3768      	adds	r7, #104	; 0x68
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b0ba      	sub	sp, #232	; 0xe8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009dda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009dde:	f640 030f 	movw	r3, #2063	; 0x80f
 8009de2:	4013      	ands	r3, r2
 8009de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d115      	bne.n	8009e1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df4:	f003 0320 	and.w	r3, r3, #32
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00f      	beq.n	8009e1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d009      	beq.n	8009e1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 82ab 	beq.w	800a368 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
      }
      return;
 8009e1a:	e2a5      	b.n	800a368 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8117 	beq.w	800a054 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e36:	4b85      	ldr	r3, [pc, #532]	; (800a04c <HAL_UART_IRQHandler+0x298>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 810a 	beq.w	800a054 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d011      	beq.n	8009e70 <HAL_UART_IRQHandler+0xbc>
 8009e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e66:	f043 0201 	orr.w	r2, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e74:	f003 0302 	and.w	r3, r3, #2
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d011      	beq.n	8009ea0 <HAL_UART_IRQHandler+0xec>
 8009e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e96:	f043 0204 	orr.w	r2, r3, #4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d011      	beq.n	8009ed0 <HAL_UART_IRQHandler+0x11c>
 8009eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec6:	f043 0202 	orr.w	r2, r3, #2
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed4:	f003 0308 	and.w	r3, r3, #8
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d017      	beq.n	8009f0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d105      	bne.n	8009ef4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2208      	movs	r2, #8
 8009efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f02:	f043 0208 	orr.w	r2, r3, #8
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d012      	beq.n	8009f3e <HAL_UART_IRQHandler+0x18a>
 8009f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00c      	beq.n	8009f3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f34:	f043 0220 	orr.w	r2, r3, #32
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8211 	beq.w	800a36c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00d      	beq.n	8009f72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d007      	beq.n	8009f72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f86:	2b40      	cmp	r3, #64	; 0x40
 8009f88:	d005      	beq.n	8009f96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d04f      	beq.n	800a036 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fe5c 	bl	800ac54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa6:	2b40      	cmp	r3, #64	; 0x40
 8009fa8:	d141      	bne.n	800a02e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1d9      	bne.n	8009faa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d013      	beq.n	800a026 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a002:	4a13      	ldr	r2, [pc, #76]	; (800a050 <HAL_UART_IRQHandler+0x29c>)
 800a004:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fa fcfe 	bl	8004a0c <HAL_DMA_Abort_IT>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d017      	beq.n	800a046 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a024:	e00f      	b.n	800a046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7f7 ffb4 	bl	8001f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a02c:	e00b      	b.n	800a046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7f7 ffb0 	bl	8001f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a034:	e007      	b.n	800a046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7f7 ffac 	bl	8001f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a044:	e192      	b.n	800a36c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a046:	bf00      	nop
    return;
 800a048:	e190      	b.n	800a36c <HAL_UART_IRQHandler+0x5b8>
 800a04a:	bf00      	nop
 800a04c:	04000120 	.word	0x04000120
 800a050:	0800afaf 	.word	0x0800afaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a058:	2b01      	cmp	r3, #1
 800a05a:	f040 814b 	bne.w	800a2f4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a062:	f003 0310 	and.w	r3, r3, #16
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8144 	beq.w	800a2f4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a070:	f003 0310 	and.w	r3, r3, #16
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 813d 	beq.w	800a2f4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2210      	movs	r2, #16
 800a080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	f040 80b5 	bne.w	800a1fc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a09e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 8164 	beq.w	800a370 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	f080 815c 	bcs.w	800a370 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	f000 8086 	beq.w	800a1da <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a104:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1da      	bne.n	800a0ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3308      	adds	r3, #8
 800a11e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a12a:	f023 0301 	bic.w	r3, r3, #1
 800a12e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3308      	adds	r3, #8
 800a138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a13c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a140:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a144:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a148:	e841 2300 	strex	r3, r2, [r1]
 800a14c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e1      	bne.n	800a118 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3308      	adds	r3, #8
 800a15a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a178:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a17a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a17e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e3      	bne.n	800a154 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1aa:	f023 0310 	bic.w	r3, r3, #16
 800a1ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e4      	bne.n	800a19a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fa fbe0 	bl	800499a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7f7 fe77 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1fa:	e0b9      	b.n	800a370 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a216:	b29b      	uxth	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80ab 	beq.w	800a374 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a21e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 80a6 	beq.w	800a374 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a23c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a24a:	647b      	str	r3, [r7, #68]	; 0x44
 800a24c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e4      	bne.n	800a228 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3308      	adds	r3, #8
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	623b      	str	r3, [r7, #32]
   return(result);
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a282:	633a      	str	r2, [r7, #48]	; 0x30
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a28a:	e841 2300 	strex	r3, r2, [r1]
 800a28e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e3      	bne.n	800a25e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0310 	bic.w	r3, r3, #16
 800a2be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	69b9      	ldr	r1, [r7, #24]
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e4      	bne.n	800a2aa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7f7 fdfb 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2f2:	e03f      	b.n	800a374 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <HAL_UART_IRQHandler+0x56a>
 800a300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fe89 	bl	800b02e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a31c:	e02d      	b.n	800a37a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00e      	beq.n	800a348 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	2b00      	cmp	r3, #0
 800a334:	d008      	beq.n	800a348 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d01c      	beq.n	800a378 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
    }
    return;
 800a346:	e017      	b.n	800a378 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d012      	beq.n	800a37a <HAL_UART_IRQHandler+0x5c6>
 800a354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00c      	beq.n	800a37a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fe3a 	bl	800afda <UART_EndTransmit_IT>
    return;
 800a366:	e008      	b.n	800a37a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a368:	bf00      	nop
 800a36a:	e006      	b.n	800a37a <HAL_UART_IRQHandler+0x5c6>
    return;
 800a36c:	bf00      	nop
 800a36e:	e004      	b.n	800a37a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a370:	bf00      	nop
 800a372:	e002      	b.n	800a37a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a374:	bf00      	nop
 800a376:	e000      	b.n	800a37a <HAL_UART_IRQHandler+0x5c6>
    return;
 800a378:	bf00      	nop
  }

}
 800a37a:	37e8      	adds	r7, #232	; 0xe8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	4b92      	ldr	r3, [pc, #584]	; (800a630 <UART_SetConfig+0x274>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	6979      	ldr	r1, [r7, #20]
 800a3f0:	430b      	orrs	r3, r1
 800a3f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a80      	ldr	r2, [pc, #512]	; (800a634 <UART_SetConfig+0x278>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d120      	bne.n	800a47a <UART_SetConfig+0xbe>
 800a438:	4b7f      	ldr	r3, [pc, #508]	; (800a638 <UART_SetConfig+0x27c>)
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	f003 0303 	and.w	r3, r3, #3
 800a440:	2b03      	cmp	r3, #3
 800a442:	d817      	bhi.n	800a474 <UART_SetConfig+0xb8>
 800a444:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <UART_SetConfig+0x90>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a45d 	.word	0x0800a45d
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a46f 	.word	0x0800a46f
 800a458:	0800a463 	.word	0x0800a463
 800a45c:	2301      	movs	r3, #1
 800a45e:	77fb      	strb	r3, [r7, #31]
 800a460:	e0b5      	b.n	800a5ce <UART_SetConfig+0x212>
 800a462:	2302      	movs	r3, #2
 800a464:	77fb      	strb	r3, [r7, #31]
 800a466:	e0b2      	b.n	800a5ce <UART_SetConfig+0x212>
 800a468:	2304      	movs	r3, #4
 800a46a:	77fb      	strb	r3, [r7, #31]
 800a46c:	e0af      	b.n	800a5ce <UART_SetConfig+0x212>
 800a46e:	2308      	movs	r3, #8
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e0ac      	b.n	800a5ce <UART_SetConfig+0x212>
 800a474:	2310      	movs	r3, #16
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e0a9      	b.n	800a5ce <UART_SetConfig+0x212>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a6f      	ldr	r2, [pc, #444]	; (800a63c <UART_SetConfig+0x280>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d124      	bne.n	800a4ce <UART_SetConfig+0x112>
 800a484:	4b6c      	ldr	r3, [pc, #432]	; (800a638 <UART_SetConfig+0x27c>)
 800a486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a48c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a490:	d011      	beq.n	800a4b6 <UART_SetConfig+0xfa>
 800a492:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a496:	d817      	bhi.n	800a4c8 <UART_SetConfig+0x10c>
 800a498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a49c:	d011      	beq.n	800a4c2 <UART_SetConfig+0x106>
 800a49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a2:	d811      	bhi.n	800a4c8 <UART_SetConfig+0x10c>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <UART_SetConfig+0xf4>
 800a4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ac:	d006      	beq.n	800a4bc <UART_SetConfig+0x100>
 800a4ae:	e00b      	b.n	800a4c8 <UART_SetConfig+0x10c>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e08b      	b.n	800a5ce <UART_SetConfig+0x212>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e088      	b.n	800a5ce <UART_SetConfig+0x212>
 800a4bc:	2304      	movs	r3, #4
 800a4be:	77fb      	strb	r3, [r7, #31]
 800a4c0:	e085      	b.n	800a5ce <UART_SetConfig+0x212>
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	77fb      	strb	r3, [r7, #31]
 800a4c6:	e082      	b.n	800a5ce <UART_SetConfig+0x212>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	77fb      	strb	r3, [r7, #31]
 800a4cc:	e07f      	b.n	800a5ce <UART_SetConfig+0x212>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a5b      	ldr	r2, [pc, #364]	; (800a640 <UART_SetConfig+0x284>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d124      	bne.n	800a522 <UART_SetConfig+0x166>
 800a4d8:	4b57      	ldr	r3, [pc, #348]	; (800a638 <UART_SetConfig+0x27c>)
 800a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a4e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a4e4:	d011      	beq.n	800a50a <UART_SetConfig+0x14e>
 800a4e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a4ea:	d817      	bhi.n	800a51c <UART_SetConfig+0x160>
 800a4ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a4f0:	d011      	beq.n	800a516 <UART_SetConfig+0x15a>
 800a4f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a4f6:	d811      	bhi.n	800a51c <UART_SetConfig+0x160>
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <UART_SetConfig+0x148>
 800a4fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a500:	d006      	beq.n	800a510 <UART_SetConfig+0x154>
 800a502:	e00b      	b.n	800a51c <UART_SetConfig+0x160>
 800a504:	2300      	movs	r3, #0
 800a506:	77fb      	strb	r3, [r7, #31]
 800a508:	e061      	b.n	800a5ce <UART_SetConfig+0x212>
 800a50a:	2302      	movs	r3, #2
 800a50c:	77fb      	strb	r3, [r7, #31]
 800a50e:	e05e      	b.n	800a5ce <UART_SetConfig+0x212>
 800a510:	2304      	movs	r3, #4
 800a512:	77fb      	strb	r3, [r7, #31]
 800a514:	e05b      	b.n	800a5ce <UART_SetConfig+0x212>
 800a516:	2308      	movs	r3, #8
 800a518:	77fb      	strb	r3, [r7, #31]
 800a51a:	e058      	b.n	800a5ce <UART_SetConfig+0x212>
 800a51c:	2310      	movs	r3, #16
 800a51e:	77fb      	strb	r3, [r7, #31]
 800a520:	e055      	b.n	800a5ce <UART_SetConfig+0x212>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a47      	ldr	r2, [pc, #284]	; (800a644 <UART_SetConfig+0x288>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d124      	bne.n	800a576 <UART_SetConfig+0x1ba>
 800a52c:	4b42      	ldr	r3, [pc, #264]	; (800a638 <UART_SetConfig+0x27c>)
 800a52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a530:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a538:	d011      	beq.n	800a55e <UART_SetConfig+0x1a2>
 800a53a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a53e:	d817      	bhi.n	800a570 <UART_SetConfig+0x1b4>
 800a540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a544:	d011      	beq.n	800a56a <UART_SetConfig+0x1ae>
 800a546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a54a:	d811      	bhi.n	800a570 <UART_SetConfig+0x1b4>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d003      	beq.n	800a558 <UART_SetConfig+0x19c>
 800a550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a554:	d006      	beq.n	800a564 <UART_SetConfig+0x1a8>
 800a556:	e00b      	b.n	800a570 <UART_SetConfig+0x1b4>
 800a558:	2300      	movs	r3, #0
 800a55a:	77fb      	strb	r3, [r7, #31]
 800a55c:	e037      	b.n	800a5ce <UART_SetConfig+0x212>
 800a55e:	2302      	movs	r3, #2
 800a560:	77fb      	strb	r3, [r7, #31]
 800a562:	e034      	b.n	800a5ce <UART_SetConfig+0x212>
 800a564:	2304      	movs	r3, #4
 800a566:	77fb      	strb	r3, [r7, #31]
 800a568:	e031      	b.n	800a5ce <UART_SetConfig+0x212>
 800a56a:	2308      	movs	r3, #8
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e02e      	b.n	800a5ce <UART_SetConfig+0x212>
 800a570:	2310      	movs	r3, #16
 800a572:	77fb      	strb	r3, [r7, #31]
 800a574:	e02b      	b.n	800a5ce <UART_SetConfig+0x212>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a33      	ldr	r2, [pc, #204]	; (800a648 <UART_SetConfig+0x28c>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d124      	bne.n	800a5ca <UART_SetConfig+0x20e>
 800a580:	4b2d      	ldr	r3, [pc, #180]	; (800a638 <UART_SetConfig+0x27c>)
 800a582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a584:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a58c:	d011      	beq.n	800a5b2 <UART_SetConfig+0x1f6>
 800a58e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a592:	d817      	bhi.n	800a5c4 <UART_SetConfig+0x208>
 800a594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a598:	d011      	beq.n	800a5be <UART_SetConfig+0x202>
 800a59a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a59e:	d811      	bhi.n	800a5c4 <UART_SetConfig+0x208>
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <UART_SetConfig+0x1f0>
 800a5a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5a8:	d006      	beq.n	800a5b8 <UART_SetConfig+0x1fc>
 800a5aa:	e00b      	b.n	800a5c4 <UART_SetConfig+0x208>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e00d      	b.n	800a5ce <UART_SetConfig+0x212>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e00a      	b.n	800a5ce <UART_SetConfig+0x212>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e007      	b.n	800a5ce <UART_SetConfig+0x212>
 800a5be:	2308      	movs	r3, #8
 800a5c0:	77fb      	strb	r3, [r7, #31]
 800a5c2:	e004      	b.n	800a5ce <UART_SetConfig+0x212>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	77fb      	strb	r3, [r7, #31]
 800a5c8:	e001      	b.n	800a5ce <UART_SetConfig+0x212>
 800a5ca:	2310      	movs	r3, #16
 800a5cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5d6:	d16b      	bne.n	800a6b0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800a5d8:	7ffb      	ldrb	r3, [r7, #31]
 800a5da:	2b08      	cmp	r3, #8
 800a5dc:	d838      	bhi.n	800a650 <UART_SetConfig+0x294>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <UART_SetConfig+0x228>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a609 	.word	0x0800a609
 800a5e8:	0800a611 	.word	0x0800a611
 800a5ec:	0800a619 	.word	0x0800a619
 800a5f0:	0800a651 	.word	0x0800a651
 800a5f4:	0800a61f 	.word	0x0800a61f
 800a5f8:	0800a651 	.word	0x0800a651
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a651 	.word	0x0800a651
 800a604:	0800a627 	.word	0x0800a627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a608:	f7fc fbb6 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 800a60c:	61b8      	str	r0, [r7, #24]
        break;
 800a60e:	e024      	b.n	800a65a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a610:	f7fc fbd4 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 800a614:	61b8      	str	r0, [r7, #24]
        break;
 800a616:	e020      	b.n	800a65a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a618:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <UART_SetConfig+0x290>)
 800a61a:	61bb      	str	r3, [r7, #24]
        break;
 800a61c:	e01d      	b.n	800a65a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a61e:	f7fc fb35 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 800a622:	61b8      	str	r0, [r7, #24]
        break;
 800a624:	e019      	b.n	800a65a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a62a:	61bb      	str	r3, [r7, #24]
        break;
 800a62c:	e015      	b.n	800a65a <UART_SetConfig+0x29e>
 800a62e:	bf00      	nop
 800a630:	efff69f3 	.word	0xefff69f3
 800a634:	40013800 	.word	0x40013800
 800a638:	40021000 	.word	0x40021000
 800a63c:	40004400 	.word	0x40004400
 800a640:	40004800 	.word	0x40004800
 800a644:	40004c00 	.word	0x40004c00
 800a648:	40005000 	.word	0x40005000
 800a64c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	77bb      	strb	r3, [r7, #30]
        break;
 800a658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d073      	beq.n	800a748 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	005a      	lsls	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	441a      	add	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	fbb2 f3f3 	udiv	r3, r2, r3
 800a674:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b0f      	cmp	r3, #15
 800a67a:	d916      	bls.n	800a6aa <UART_SetConfig+0x2ee>
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a682:	d212      	bcs.n	800a6aa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	b29b      	uxth	r3, r3
 800a688:	f023 030f 	bic.w	r3, r3, #15
 800a68c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	b29b      	uxth	r3, r3
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	b29a      	uxth	r2, r3
 800a69a:	89fb      	ldrh	r3, [r7, #14]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	89fa      	ldrh	r2, [r7, #14]
 800a6a6:	60da      	str	r2, [r3, #12]
 800a6a8:	e04e      	b.n	800a748 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	77bb      	strb	r3, [r7, #30]
 800a6ae:	e04b      	b.n	800a748 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6b0:	7ffb      	ldrb	r3, [r7, #31]
 800a6b2:	2b08      	cmp	r3, #8
 800a6b4:	d827      	bhi.n	800a706 <UART_SetConfig+0x34a>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <UART_SetConfig+0x300>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6e9 	.word	0x0800a6e9
 800a6c4:	0800a6f1 	.word	0x0800a6f1
 800a6c8:	0800a707 	.word	0x0800a707
 800a6cc:	0800a6f7 	.word	0x0800a6f7
 800a6d0:	0800a707 	.word	0x0800a707
 800a6d4:	0800a707 	.word	0x0800a707
 800a6d8:	0800a707 	.word	0x0800a707
 800a6dc:	0800a6ff 	.word	0x0800a6ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e0:	f7fc fb4a 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 800a6e4:	61b8      	str	r0, [r7, #24]
        break;
 800a6e6:	e013      	b.n	800a710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6e8:	f7fc fb68 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 800a6ec:	61b8      	str	r0, [r7, #24]
        break;
 800a6ee:	e00f      	b.n	800a710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6f0:	4b1b      	ldr	r3, [pc, #108]	; (800a760 <UART_SetConfig+0x3a4>)
 800a6f2:	61bb      	str	r3, [r7, #24]
        break;
 800a6f4:	e00c      	b.n	800a710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6f6:	f7fc fac9 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 800a6fa:	61b8      	str	r0, [r7, #24]
        break;
 800a6fc:	e008      	b.n	800a710 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a702:	61bb      	str	r3, [r7, #24]
        break;
 800a704:	e004      	b.n	800a710 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	77bb      	strb	r3, [r7, #30]
        break;
 800a70e:	bf00      	nop
    }

    if (pclk != 0U)
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d018      	beq.n	800a748 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	085a      	lsrs	r2, r3, #1
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	441a      	add	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	fbb2 f3f3 	udiv	r3, r2, r3
 800a728:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b0f      	cmp	r3, #15
 800a72e:	d909      	bls.n	800a744 <UART_SetConfig+0x388>
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a736:	d205      	bcs.n	800a744 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60da      	str	r2, [r3, #12]
 800a742:	e001      	b.n	800a748 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a754:	7fbb      	ldrb	r3, [r7, #30]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	007a1200 	.word	0x007a1200

0800a764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00a      	beq.n	800a78e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00a      	beq.n	800a7d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	f003 0310 	and.w	r3, r3, #16
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81a:	f003 0320 	and.w	r3, r3, #32
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	430a      	orrs	r2, r1
 800a836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a840:	2b00      	cmp	r3, #0
 800a842:	d01a      	beq.n	800a87a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a862:	d10a      	bne.n	800a87a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	605a      	str	r2, [r3, #4]
  }
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b098      	sub	sp, #96	; 0x60
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8b8:	f7f9 fe88 	bl	80045cc <HAL_GetTick>
 800a8bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0308 	and.w	r3, r3, #8
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	d12e      	bne.n	800a92a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f88c 	bl	800a9f8 <UART_WaitOnFlagUntilTimeout>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d021      	beq.n	800a92a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a904:	647b      	str	r3, [r7, #68]	; 0x44
 800a906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a90a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e062      	b.n	800a9f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b04      	cmp	r3, #4
 800a936:	d149      	bne.n	800a9cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a940:	2200      	movs	r2, #0
 800a942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f856 	bl	800a9f8 <UART_WaitOnFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d03c      	beq.n	800a9cc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	623b      	str	r3, [r7, #32]
   return(result);
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a966:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a970:	633b      	str	r3, [r7, #48]	; 0x30
 800a972:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e6      	bne.n	800a952 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3308      	adds	r3, #8
 800a98a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	60fb      	str	r3, [r7, #12]
   return(result);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f023 0301 	bic.w	r3, r3, #1
 800a99a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9a4:	61fa      	str	r2, [r7, #28]
 800a9a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	69b9      	ldr	r1, [r7, #24]
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e5      	bne.n	800a984 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e011      	b.n	800a9f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3758      	adds	r7, #88	; 0x58
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	603b      	str	r3, [r7, #0]
 800aa04:	4613      	mov	r3, r2
 800aa06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa08:	e049      	b.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa10:	d045      	beq.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa12:	f7f9 fddb 	bl	80045cc <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d302      	bcc.n	800aa28 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e048      	b.n	800aabe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0304 	and.w	r3, r3, #4
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d031      	beq.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	f003 0308 	and.w	r3, r3, #8
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d110      	bne.n	800aa6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2208      	movs	r2, #8
 800aa4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 f8ff 	bl	800ac54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2208      	movs	r2, #8
 800aa5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e029      	b.n	800aabe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa78:	d111      	bne.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f8e5 	bl	800ac54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2220      	movs	r2, #32
 800aa8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e00f      	b.n	800aabe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69da      	ldr	r2, [r3, #28]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	bf0c      	ite	eq
 800aaae:	2301      	moveq	r3, #1
 800aab0:	2300      	movne	r3, #0
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d0a6      	beq.n	800aa0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b096      	sub	sp, #88	; 0x58
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4613      	mov	r3, r2
 800aad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	88fa      	ldrh	r2, [r7, #6]
 800aae0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2222      	movs	r2, #34	; 0x22
 800aaf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d028      	beq.n	800ab4e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab00:	4a3e      	ldr	r2, [pc, #248]	; (800abfc <UART_Start_Receive_DMA+0x134>)
 800ab02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab08:	4a3d      	ldr	r2, [pc, #244]	; (800ac00 <UART_Start_Receive_DMA+0x138>)
 800ab0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab10:	4a3c      	ldr	r2, [pc, #240]	; (800ac04 <UART_Start_Receive_DMA+0x13c>)
 800ab12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab18:	2200      	movs	r2, #0
 800ab1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3324      	adds	r3, #36	; 0x24
 800ab26:	4619      	mov	r1, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	f7f9 fed4 	bl	80048dc <HAL_DMA_Start_IT>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d009      	beq.n	800ab4e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2210      	movs	r2, #16
 800ab3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2220      	movs	r2, #32
 800ab46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e051      	b.n	800abf2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d018      	beq.n	800ab88 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab76:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e6      	bne.n	800ab56 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	f043 0301 	orr.w	r3, r3, #1
 800ab9e:	653b      	str	r3, [r7, #80]	; 0x50
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3308      	adds	r3, #8
 800aba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aba8:	637a      	str	r2, [r7, #52]	; 0x34
 800abaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e5      	bne.n	800ab88 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3308      	adds	r3, #8
 800abc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	e853 3f00 	ldrex	r3, [r3]
 800abca:	613b      	str	r3, [r7, #16]
   return(result);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3308      	adds	r3, #8
 800abda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abdc:	623a      	str	r2, [r7, #32]
 800abde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	69f9      	ldr	r1, [r7, #28]
 800abe2:	6a3a      	ldr	r2, [r7, #32]
 800abe4:	e841 2300 	strex	r3, r2, [r1]
 800abe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e5      	bne.n	800abbc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3758      	adds	r7, #88	; 0x58
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	0800adcd 	.word	0x0800adcd
 800ac00:	0800aef3 	.word	0x0800aef3
 800ac04:	0800af31 	.word	0x0800af31

0800ac08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b089      	sub	sp, #36	; 0x24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	e853 3f00 	ldrex	r3, [r3]
 800ac1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac24:	61fb      	str	r3, [r7, #28]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	61bb      	str	r3, [r7, #24]
 800ac30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac32:	6979      	ldr	r1, [r7, #20]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	e841 2300 	strex	r3, r2, [r1]
 800ac3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e6      	bne.n	800ac10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2220      	movs	r2, #32
 800ac46:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800ac48:	bf00      	nop
 800ac4a:	3724      	adds	r7, #36	; 0x24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b095      	sub	sp, #84	; 0x54
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac82:	e841 2300 	strex	r3, r2, [r1]
 800ac86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1e6      	bne.n	800ac5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	f023 0301 	bic.w	r3, r3, #1
 800aca4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e5      	bne.n	800ac8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d118      	bne.n	800acfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	e853 3f00 	ldrex	r3, [r3]
 800acd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f023 0310 	bic.w	r3, r3, #16
 800acde:	647b      	str	r3, [r7, #68]	; 0x44
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ace8:	61bb      	str	r3, [r7, #24]
 800acea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acec:	6979      	ldr	r1, [r7, #20]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	e841 2300 	strex	r3, r2, [r1]
 800acf4:	613b      	str	r3, [r7, #16]
   return(result);
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e6      	bne.n	800acca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2220      	movs	r2, #32
 800ad00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad10:	bf00      	nop
 800ad12:	3754      	adds	r7, #84	; 0x54
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b090      	sub	sp, #64	; 0x40
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d037      	beq.n	800ada2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800ad32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	623b      	str	r3, [r7, #32]
   return(result);
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad50:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad5a:	633a      	str	r2, [r7, #48]	; 0x30
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e5      	bne.n	800ad3a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
 800ad84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	69b9      	ldr	r1, [r7, #24]
 800ad92:	69fa      	ldr	r2, [r7, #28]
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	617b      	str	r3, [r7, #20]
   return(result);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e6      	bne.n	800ad6e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ada0:	e002      	b.n	800ada8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800ada2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ada4:	f7f7 f876 	bl	8001e94 <HAL_UART_TxCpltCallback>
}
 800ada8:	bf00      	nop
 800adaa:	3740      	adds	r7, #64	; 0x40
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7ff fade 	bl	800a380 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc4:	bf00      	nop
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b09c      	sub	sp, #112	; 0x70
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d071      	beq.n	800aec6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800ade2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adfe:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	461a      	mov	r2, r3
 800ae06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae08:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e6      	bne.n	800adea <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3308      	adds	r3, #8
 800ae22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2e:	f023 0301 	bic.w	r3, r3, #1
 800ae32:	667b      	str	r3, [r7, #100]	; 0x64
 800ae34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae3c:	647a      	str	r2, [r7, #68]	; 0x44
 800ae3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e5      	bne.n	800ae1c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3308      	adds	r3, #8
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	e853 3f00 	ldrex	r3, [r3]
 800ae5e:	623b      	str	r3, [r7, #32]
   return(result);
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae66:	663b      	str	r3, [r7, #96]	; 0x60
 800ae68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae70:	633a      	str	r2, [r7, #48]	; 0x30
 800ae72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e5      	bne.n	800ae50 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae86:	2220      	movs	r2, #32
 800ae88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d118      	bne.n	800aec6 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f023 0310 	bic.w	r3, r3, #16
 800aea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	69b9      	ldr	r1, [r7, #24]
 800aeb8:	69fa      	ldr	r2, [r7, #28]
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	617b      	str	r3, [r7, #20]
   return(result);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e6      	bne.n	800ae94 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aec8:	2200      	movs	r2, #0
 800aeca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d107      	bne.n	800aee4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aeda:	4619      	mov	r1, r3
 800aedc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aede:	f7f7 f803 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aee2:	e002      	b.n	800aeea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aee4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aee6:	f7ff fa55 	bl	800a394 <HAL_UART_RxCpltCallback>
}
 800aeea:	bf00      	nop
 800aeec:	3770      	adds	r7, #112	; 0x70
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2201      	movs	r2, #1
 800af04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d109      	bne.n	800af22 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af14:	085b      	lsrs	r3, r3, #1
 800af16:	b29b      	uxth	r3, r3
 800af18:	4619      	mov	r1, r3
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7f6 ffe4 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af20:	e002      	b.n	800af28 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f7ff fa40 	bl	800a3a8 <HAL_UART_RxHalfCpltCallback>
}
 800af28:	bf00      	nop
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af56:	2b80      	cmp	r3, #128	; 0x80
 800af58:	d109      	bne.n	800af6e <UART_DMAError+0x3e>
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b21      	cmp	r3, #33	; 0x21
 800af5e:	d106      	bne.n	800af6e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2200      	movs	r2, #0
 800af64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800af68:	6978      	ldr	r0, [r7, #20]
 800af6a:	f7ff fe4d 	bl	800ac08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d109      	bne.n	800af90 <UART_DMAError+0x60>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b22      	cmp	r3, #34	; 0x22
 800af80:	d106      	bne.n	800af90 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2200      	movs	r2, #0
 800af86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800af8a:	6978      	ldr	r0, [r7, #20]
 800af8c:	f7ff fe62 	bl	800ac54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af96:	f043 0210 	orr.w	r2, r3, #16
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa0:	6978      	ldr	r0, [r7, #20]
 800afa2:	f7f6 fff7 	bl	8001f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa6:	bf00      	nop
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f7f6 ffe1 	bl	8001f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b088      	sub	sp, #32
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	e853 3f00 	ldrex	r3, [r3]
 800afee:	60bb      	str	r3, [r7, #8]
   return(result);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	61bb      	str	r3, [r7, #24]
 800b002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6979      	ldr	r1, [r7, #20]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	613b      	str	r3, [r7, #16]
   return(result);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e6      	bne.n	800afe2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2220      	movs	r2, #32
 800b018:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7f6 ff37 	bl	8001e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b026:	bf00      	nop
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b08c      	sub	sp, #48	; 0x30
 800b046:	af00      	add	r7, sp, #0
 800b048:	60f8      	str	r0, [r7, #12]
 800b04a:	60b9      	str	r1, [r7, #8]
 800b04c:	4613      	mov	r3, r2
 800b04e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b056:	2b20      	cmp	r3, #32
 800b058:	d142      	bne.n	800b0e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b060:	88fb      	ldrh	r3, [r7, #6]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e03b      	b.n	800b0e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2201      	movs	r2, #1
 800b06e:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b076:	88fb      	ldrh	r3, [r7, #6]
 800b078:	461a      	mov	r2, r3
 800b07a:	68b9      	ldr	r1, [r7, #8]
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7ff fd23 	bl	800aac8 <UART_Start_Receive_DMA>
 800b082:	4603      	mov	r3, r0
 800b084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d124      	bne.n	800b0da <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b094:	2b01      	cmp	r3, #1
 800b096:	d11d      	bne.n	800b0d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2210      	movs	r2, #16
 800b09e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f043 0310 	orr.w	r3, r3, #16
 800b0b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6a39      	ldr	r1, [r7, #32]
 800b0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b0d2:	e002      	b.n	800b0da <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b0da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0de:	e000      	b.n	800b0e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b0e0:	2302      	movs	r3, #2
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3730      	adds	r7, #48	; 0x30
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <__errno>:
 800b0ec:	4b01      	ldr	r3, [pc, #4]	; (800b0f4 <__errno+0x8>)
 800b0ee:	6818      	ldr	r0, [r3, #0]
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	2000003c 	.word	0x2000003c

0800b0f8 <__libc_init_array>:
 800b0f8:	b570      	push	{r4, r5, r6, lr}
 800b0fa:	4d0d      	ldr	r5, [pc, #52]	; (800b130 <__libc_init_array+0x38>)
 800b0fc:	4c0d      	ldr	r4, [pc, #52]	; (800b134 <__libc_init_array+0x3c>)
 800b0fe:	1b64      	subs	r4, r4, r5
 800b100:	10a4      	asrs	r4, r4, #2
 800b102:	2600      	movs	r6, #0
 800b104:	42a6      	cmp	r6, r4
 800b106:	d109      	bne.n	800b11c <__libc_init_array+0x24>
 800b108:	4d0b      	ldr	r5, [pc, #44]	; (800b138 <__libc_init_array+0x40>)
 800b10a:	4c0c      	ldr	r4, [pc, #48]	; (800b13c <__libc_init_array+0x44>)
 800b10c:	f001 feda 	bl	800cec4 <_init>
 800b110:	1b64      	subs	r4, r4, r5
 800b112:	10a4      	asrs	r4, r4, #2
 800b114:	2600      	movs	r6, #0
 800b116:	42a6      	cmp	r6, r4
 800b118:	d105      	bne.n	800b126 <__libc_init_array+0x2e>
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b120:	4798      	blx	r3
 800b122:	3601      	adds	r6, #1
 800b124:	e7ee      	b.n	800b104 <__libc_init_array+0xc>
 800b126:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12a:	4798      	blx	r3
 800b12c:	3601      	adds	r6, #1
 800b12e:	e7f2      	b.n	800b116 <__libc_init_array+0x1e>
 800b130:	08010090 	.word	0x08010090
 800b134:	08010090 	.word	0x08010090
 800b138:	08010090 	.word	0x08010090
 800b13c:	08010094 	.word	0x08010094

0800b140 <memcpy>:
 800b140:	440a      	add	r2, r1
 800b142:	4291      	cmp	r1, r2
 800b144:	f100 33ff 	add.w	r3, r0, #4294967295
 800b148:	d100      	bne.n	800b14c <memcpy+0xc>
 800b14a:	4770      	bx	lr
 800b14c:	b510      	push	{r4, lr}
 800b14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b156:	4291      	cmp	r1, r2
 800b158:	d1f9      	bne.n	800b14e <memcpy+0xe>
 800b15a:	bd10      	pop	{r4, pc}

0800b15c <memset>:
 800b15c:	4402      	add	r2, r0
 800b15e:	4603      	mov	r3, r0
 800b160:	4293      	cmp	r3, r2
 800b162:	d100      	bne.n	800b166 <memset+0xa>
 800b164:	4770      	bx	lr
 800b166:	f803 1b01 	strb.w	r1, [r3], #1
 800b16a:	e7f9      	b.n	800b160 <memset+0x4>

0800b16c <iprintf>:
 800b16c:	b40f      	push	{r0, r1, r2, r3}
 800b16e:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <iprintf+0x2c>)
 800b170:	b513      	push	{r0, r1, r4, lr}
 800b172:	681c      	ldr	r4, [r3, #0]
 800b174:	b124      	cbz	r4, 800b180 <iprintf+0x14>
 800b176:	69a3      	ldr	r3, [r4, #24]
 800b178:	b913      	cbnz	r3, 800b180 <iprintf+0x14>
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fb30 	bl	800b7e0 <__sinit>
 800b180:	ab05      	add	r3, sp, #20
 800b182:	9a04      	ldr	r2, [sp, #16]
 800b184:	68a1      	ldr	r1, [r4, #8]
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	4620      	mov	r0, r4
 800b18a:	f001 f879 	bl	800c280 <_vfiprintf_r>
 800b18e:	b002      	add	sp, #8
 800b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b194:	b004      	add	sp, #16
 800b196:	4770      	bx	lr
 800b198:	2000003c 	.word	0x2000003c

0800b19c <_puts_r>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	460e      	mov	r6, r1
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	b118      	cbz	r0, 800b1ac <_puts_r+0x10>
 800b1a4:	6983      	ldr	r3, [r0, #24]
 800b1a6:	b90b      	cbnz	r3, 800b1ac <_puts_r+0x10>
 800b1a8:	f000 fb1a 	bl	800b7e0 <__sinit>
 800b1ac:	69ab      	ldr	r3, [r5, #24]
 800b1ae:	68ac      	ldr	r4, [r5, #8]
 800b1b0:	b913      	cbnz	r3, 800b1b8 <_puts_r+0x1c>
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 fb14 	bl	800b7e0 <__sinit>
 800b1b8:	4b2c      	ldr	r3, [pc, #176]	; (800b26c <_puts_r+0xd0>)
 800b1ba:	429c      	cmp	r4, r3
 800b1bc:	d120      	bne.n	800b200 <_puts_r+0x64>
 800b1be:	686c      	ldr	r4, [r5, #4]
 800b1c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d405      	bmi.n	800b1d2 <_puts_r+0x36>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	0598      	lsls	r0, r3, #22
 800b1ca:	d402      	bmi.n	800b1d2 <_puts_r+0x36>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ce:	f000 fba5 	bl	800b91c <__retarget_lock_acquire_recursive>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	0719      	lsls	r1, r3, #28
 800b1d6:	d51d      	bpl.n	800b214 <_puts_r+0x78>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	b1db      	cbz	r3, 800b214 <_puts_r+0x78>
 800b1dc:	3e01      	subs	r6, #1
 800b1de:	68a3      	ldr	r3, [r4, #8]
 800b1e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	60a3      	str	r3, [r4, #8]
 800b1e8:	bb39      	cbnz	r1, 800b23a <_puts_r+0x9e>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da38      	bge.n	800b260 <_puts_r+0xc4>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	210a      	movs	r1, #10
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f8f8 	bl	800b3e8 <__swbuf_r>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d011      	beq.n	800b220 <_puts_r+0x84>
 800b1fc:	250a      	movs	r5, #10
 800b1fe:	e011      	b.n	800b224 <_puts_r+0x88>
 800b200:	4b1b      	ldr	r3, [pc, #108]	; (800b270 <_puts_r+0xd4>)
 800b202:	429c      	cmp	r4, r3
 800b204:	d101      	bne.n	800b20a <_puts_r+0x6e>
 800b206:	68ac      	ldr	r4, [r5, #8]
 800b208:	e7da      	b.n	800b1c0 <_puts_r+0x24>
 800b20a:	4b1a      	ldr	r3, [pc, #104]	; (800b274 <_puts_r+0xd8>)
 800b20c:	429c      	cmp	r4, r3
 800b20e:	bf08      	it	eq
 800b210:	68ec      	ldreq	r4, [r5, #12]
 800b212:	e7d5      	b.n	800b1c0 <_puts_r+0x24>
 800b214:	4621      	mov	r1, r4
 800b216:	4628      	mov	r0, r5
 800b218:	f000 f94a 	bl	800b4b0 <__swsetup_r>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d0dd      	beq.n	800b1dc <_puts_r+0x40>
 800b220:	f04f 35ff 	mov.w	r5, #4294967295
 800b224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b226:	07da      	lsls	r2, r3, #31
 800b228:	d405      	bmi.n	800b236 <_puts_r+0x9a>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	059b      	lsls	r3, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_puts_r+0x9a>
 800b230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b232:	f000 fb74 	bl	800b91e <__retarget_lock_release_recursive>
 800b236:	4628      	mov	r0, r5
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da04      	bge.n	800b248 <_puts_r+0xac>
 800b23e:	69a2      	ldr	r2, [r4, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	dc06      	bgt.n	800b252 <_puts_r+0xb6>
 800b244:	290a      	cmp	r1, #10
 800b246:	d004      	beq.n	800b252 <_puts_r+0xb6>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	6022      	str	r2, [r4, #0]
 800b24e:	7019      	strb	r1, [r3, #0]
 800b250:	e7c5      	b.n	800b1de <_puts_r+0x42>
 800b252:	4622      	mov	r2, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f000 f8c7 	bl	800b3e8 <__swbuf_r>
 800b25a:	3001      	adds	r0, #1
 800b25c:	d1bf      	bne.n	800b1de <_puts_r+0x42>
 800b25e:	e7df      	b.n	800b220 <_puts_r+0x84>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	250a      	movs	r5, #10
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	6022      	str	r2, [r4, #0]
 800b268:	701d      	strb	r5, [r3, #0]
 800b26a:	e7db      	b.n	800b224 <_puts_r+0x88>
 800b26c:	0800ff00 	.word	0x0800ff00
 800b270:	0800ff20 	.word	0x0800ff20
 800b274:	0800fee0 	.word	0x0800fee0

0800b278 <puts>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <puts+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f7ff bf8d 	b.w	800b19c <_puts_r>
 800b282:	bf00      	nop
 800b284:	2000003c 	.word	0x2000003c

0800b288 <siprintf>:
 800b288:	b40e      	push	{r1, r2, r3}
 800b28a:	b500      	push	{lr}
 800b28c:	b09c      	sub	sp, #112	; 0x70
 800b28e:	ab1d      	add	r3, sp, #116	; 0x74
 800b290:	9002      	str	r0, [sp, #8]
 800b292:	9006      	str	r0, [sp, #24]
 800b294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b298:	4809      	ldr	r0, [pc, #36]	; (800b2c0 <siprintf+0x38>)
 800b29a:	9107      	str	r1, [sp, #28]
 800b29c:	9104      	str	r1, [sp, #16]
 800b29e:	4909      	ldr	r1, [pc, #36]	; (800b2c4 <siprintf+0x3c>)
 800b2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	6800      	ldr	r0, [r0, #0]
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	a902      	add	r1, sp, #8
 800b2ac:	f000 fcec 	bl	800bc88 <_svfiprintf_r>
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	b01c      	add	sp, #112	; 0x70
 800b2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2bc:	b003      	add	sp, #12
 800b2be:	4770      	bx	lr
 800b2c0:	2000003c 	.word	0x2000003c
 800b2c4:	ffff0208 	.word	0xffff0208

0800b2c8 <siscanf>:
 800b2c8:	b40e      	push	{r1, r2, r3}
 800b2ca:	b510      	push	{r4, lr}
 800b2cc:	b09f      	sub	sp, #124	; 0x7c
 800b2ce:	ac21      	add	r4, sp, #132	; 0x84
 800b2d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b2d4:	f854 2b04 	ldr.w	r2, [r4], #4
 800b2d8:	9201      	str	r2, [sp, #4]
 800b2da:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b2de:	9004      	str	r0, [sp, #16]
 800b2e0:	9008      	str	r0, [sp, #32]
 800b2e2:	f7f4 ff87 	bl	80001f4 <strlen>
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <siscanf+0x50>)
 800b2e8:	9005      	str	r0, [sp, #20]
 800b2ea:	9009      	str	r0, [sp, #36]	; 0x24
 800b2ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b2ee:	480b      	ldr	r0, [pc, #44]	; (800b31c <siscanf+0x54>)
 800b2f0:	9a01      	ldr	r2, [sp, #4]
 800b2f2:	6800      	ldr	r0, [r0, #0]
 800b2f4:	9403      	str	r4, [sp, #12]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9311      	str	r3, [sp, #68]	; 0x44
 800b2fa:	9316      	str	r3, [sp, #88]	; 0x58
 800b2fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b300:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b304:	a904      	add	r1, sp, #16
 800b306:	4623      	mov	r3, r4
 800b308:	f000 fe18 	bl	800bf3c <__ssvfiscanf_r>
 800b30c:	b01f      	add	sp, #124	; 0x7c
 800b30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b312:	b003      	add	sp, #12
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	0800b343 	.word	0x0800b343
 800b31c:	2000003c 	.word	0x2000003c

0800b320 <__sread>:
 800b320:	b510      	push	{r4, lr}
 800b322:	460c      	mov	r4, r1
 800b324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b328:	f001 fbc0 	bl	800caac <_read_r>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	bfab      	itete	ge
 800b330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b332:	89a3      	ldrhlt	r3, [r4, #12]
 800b334:	181b      	addge	r3, r3, r0
 800b336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b33a:	bfac      	ite	ge
 800b33c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b33e:	81a3      	strhlt	r3, [r4, #12]
 800b340:	bd10      	pop	{r4, pc}

0800b342 <__seofread>:
 800b342:	2000      	movs	r0, #0
 800b344:	4770      	bx	lr

0800b346 <__swrite>:
 800b346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34a:	461f      	mov	r7, r3
 800b34c:	898b      	ldrh	r3, [r1, #12]
 800b34e:	05db      	lsls	r3, r3, #23
 800b350:	4605      	mov	r5, r0
 800b352:	460c      	mov	r4, r1
 800b354:	4616      	mov	r6, r2
 800b356:	d505      	bpl.n	800b364 <__swrite+0x1e>
 800b358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35c:	2302      	movs	r3, #2
 800b35e:	2200      	movs	r2, #0
 800b360:	f000 fade 	bl	800b920 <_lseek_r>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b36a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	4632      	mov	r2, r6
 800b372:	463b      	mov	r3, r7
 800b374:	4628      	mov	r0, r5
 800b376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37a:	f000 b887 	b.w	800b48c <_write_r>

0800b37e <__sseek>:
 800b37e:	b510      	push	{r4, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b386:	f000 facb 	bl	800b920 <_lseek_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	bf15      	itete	ne
 800b390:	6560      	strne	r0, [r4, #84]	; 0x54
 800b392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b39a:	81a3      	strheq	r3, [r4, #12]
 800b39c:	bf18      	it	ne
 800b39e:	81a3      	strhne	r3, [r4, #12]
 800b3a0:	bd10      	pop	{r4, pc}

0800b3a2 <__sclose>:
 800b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a6:	f000 b8f1 	b.w	800b58c <_close_r>

0800b3aa <strcpy>:
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b0:	f803 2b01 	strb.w	r2, [r3], #1
 800b3b4:	2a00      	cmp	r2, #0
 800b3b6:	d1f9      	bne.n	800b3ac <strcpy+0x2>
 800b3b8:	4770      	bx	lr

0800b3ba <strstr>:
 800b3ba:	780a      	ldrb	r2, [r1, #0]
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	b96a      	cbnz	r2, 800b3dc <strstr+0x22>
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d109      	bne.n	800b3da <strstr+0x20>
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0f6      	beq.n	800b3c0 <strstr+0x6>
 800b3d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b3d6:	429e      	cmp	r6, r3
 800b3d8:	d0f7      	beq.n	800b3ca <strstr+0x10>
 800b3da:	3001      	adds	r0, #1
 800b3dc:	7803      	ldrb	r3, [r0, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1ef      	bne.n	800b3c2 <strstr+0x8>
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	e7ec      	b.n	800b3c0 <strstr+0x6>
	...

0800b3e8 <__swbuf_r>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	460e      	mov	r6, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	b118      	cbz	r0, 800b3fa <__swbuf_r+0x12>
 800b3f2:	6983      	ldr	r3, [r0, #24]
 800b3f4:	b90b      	cbnz	r3, 800b3fa <__swbuf_r+0x12>
 800b3f6:	f000 f9f3 	bl	800b7e0 <__sinit>
 800b3fa:	4b21      	ldr	r3, [pc, #132]	; (800b480 <__swbuf_r+0x98>)
 800b3fc:	429c      	cmp	r4, r3
 800b3fe:	d12b      	bne.n	800b458 <__swbuf_r+0x70>
 800b400:	686c      	ldr	r4, [r5, #4]
 800b402:	69a3      	ldr	r3, [r4, #24]
 800b404:	60a3      	str	r3, [r4, #8]
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	071a      	lsls	r2, r3, #28
 800b40a:	d52f      	bpl.n	800b46c <__swbuf_r+0x84>
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	b36b      	cbz	r3, 800b46c <__swbuf_r+0x84>
 800b410:	6923      	ldr	r3, [r4, #16]
 800b412:	6820      	ldr	r0, [r4, #0]
 800b414:	1ac0      	subs	r0, r0, r3
 800b416:	6963      	ldr	r3, [r4, #20]
 800b418:	b2f6      	uxtb	r6, r6
 800b41a:	4283      	cmp	r3, r0
 800b41c:	4637      	mov	r7, r6
 800b41e:	dc04      	bgt.n	800b42a <__swbuf_r+0x42>
 800b420:	4621      	mov	r1, r4
 800b422:	4628      	mov	r0, r5
 800b424:	f000 f948 	bl	800b6b8 <_fflush_r>
 800b428:	bb30      	cbnz	r0, 800b478 <__swbuf_r+0x90>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	60a3      	str	r3, [r4, #8]
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	701e      	strb	r6, [r3, #0]
 800b438:	6963      	ldr	r3, [r4, #20]
 800b43a:	3001      	adds	r0, #1
 800b43c:	4283      	cmp	r3, r0
 800b43e:	d004      	beq.n	800b44a <__swbuf_r+0x62>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	07db      	lsls	r3, r3, #31
 800b444:	d506      	bpl.n	800b454 <__swbuf_r+0x6c>
 800b446:	2e0a      	cmp	r6, #10
 800b448:	d104      	bne.n	800b454 <__swbuf_r+0x6c>
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	f000 f933 	bl	800b6b8 <_fflush_r>
 800b452:	b988      	cbnz	r0, 800b478 <__swbuf_r+0x90>
 800b454:	4638      	mov	r0, r7
 800b456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <__swbuf_r+0x9c>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d101      	bne.n	800b462 <__swbuf_r+0x7a>
 800b45e:	68ac      	ldr	r4, [r5, #8]
 800b460:	e7cf      	b.n	800b402 <__swbuf_r+0x1a>
 800b462:	4b09      	ldr	r3, [pc, #36]	; (800b488 <__swbuf_r+0xa0>)
 800b464:	429c      	cmp	r4, r3
 800b466:	bf08      	it	eq
 800b468:	68ec      	ldreq	r4, [r5, #12]
 800b46a:	e7ca      	b.n	800b402 <__swbuf_r+0x1a>
 800b46c:	4621      	mov	r1, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f81e 	bl	800b4b0 <__swsetup_r>
 800b474:	2800      	cmp	r0, #0
 800b476:	d0cb      	beq.n	800b410 <__swbuf_r+0x28>
 800b478:	f04f 37ff 	mov.w	r7, #4294967295
 800b47c:	e7ea      	b.n	800b454 <__swbuf_r+0x6c>
 800b47e:	bf00      	nop
 800b480:	0800ff00 	.word	0x0800ff00
 800b484:	0800ff20 	.word	0x0800ff20
 800b488:	0800fee0 	.word	0x0800fee0

0800b48c <_write_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d07      	ldr	r5, [pc, #28]	; (800b4ac <_write_r+0x20>)
 800b490:	4604      	mov	r4, r0
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	2200      	movs	r2, #0
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f7 fd07 	bl	8002eae <_write>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_write_r+0x1e>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_write_r+0x1e>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20003aa8 	.word	0x20003aa8

0800b4b0 <__swsetup_r>:
 800b4b0:	4b32      	ldr	r3, [pc, #200]	; (800b57c <__swsetup_r+0xcc>)
 800b4b2:	b570      	push	{r4, r5, r6, lr}
 800b4b4:	681d      	ldr	r5, [r3, #0]
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	b125      	cbz	r5, 800b4c6 <__swsetup_r+0x16>
 800b4bc:	69ab      	ldr	r3, [r5, #24]
 800b4be:	b913      	cbnz	r3, 800b4c6 <__swsetup_r+0x16>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	f000 f98d 	bl	800b7e0 <__sinit>
 800b4c6:	4b2e      	ldr	r3, [pc, #184]	; (800b580 <__swsetup_r+0xd0>)
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	d10f      	bne.n	800b4ec <__swsetup_r+0x3c>
 800b4cc:	686c      	ldr	r4, [r5, #4]
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4d4:	0719      	lsls	r1, r3, #28
 800b4d6:	d42c      	bmi.n	800b532 <__swsetup_r+0x82>
 800b4d8:	06dd      	lsls	r5, r3, #27
 800b4da:	d411      	bmi.n	800b500 <__swsetup_r+0x50>
 800b4dc:	2309      	movs	r3, #9
 800b4de:	6033      	str	r3, [r6, #0]
 800b4e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ea:	e03e      	b.n	800b56a <__swsetup_r+0xba>
 800b4ec:	4b25      	ldr	r3, [pc, #148]	; (800b584 <__swsetup_r+0xd4>)
 800b4ee:	429c      	cmp	r4, r3
 800b4f0:	d101      	bne.n	800b4f6 <__swsetup_r+0x46>
 800b4f2:	68ac      	ldr	r4, [r5, #8]
 800b4f4:	e7eb      	b.n	800b4ce <__swsetup_r+0x1e>
 800b4f6:	4b24      	ldr	r3, [pc, #144]	; (800b588 <__swsetup_r+0xd8>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	bf08      	it	eq
 800b4fc:	68ec      	ldreq	r4, [r5, #12]
 800b4fe:	e7e6      	b.n	800b4ce <__swsetup_r+0x1e>
 800b500:	0758      	lsls	r0, r3, #29
 800b502:	d512      	bpl.n	800b52a <__swsetup_r+0x7a>
 800b504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b506:	b141      	cbz	r1, 800b51a <__swsetup_r+0x6a>
 800b508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b50c:	4299      	cmp	r1, r3
 800b50e:	d002      	beq.n	800b516 <__swsetup_r+0x66>
 800b510:	4630      	mov	r0, r6
 800b512:	f000 fa7d 	bl	800ba10 <_free_r>
 800b516:	2300      	movs	r3, #0
 800b518:	6363      	str	r3, [r4, #52]	; 0x34
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	2300      	movs	r3, #0
 800b524:	6063      	str	r3, [r4, #4]
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	f043 0308 	orr.w	r3, r3, #8
 800b530:	81a3      	strh	r3, [r4, #12]
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	b94b      	cbnz	r3, 800b54a <__swsetup_r+0x9a>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b540:	d003      	beq.n	800b54a <__swsetup_r+0x9a>
 800b542:	4621      	mov	r1, r4
 800b544:	4630      	mov	r0, r6
 800b546:	f000 fa23 	bl	800b990 <__smakebuf_r>
 800b54a:	89a0      	ldrh	r0, [r4, #12]
 800b54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b550:	f010 0301 	ands.w	r3, r0, #1
 800b554:	d00a      	beq.n	800b56c <__swsetup_r+0xbc>
 800b556:	2300      	movs	r3, #0
 800b558:	60a3      	str	r3, [r4, #8]
 800b55a:	6963      	ldr	r3, [r4, #20]
 800b55c:	425b      	negs	r3, r3
 800b55e:	61a3      	str	r3, [r4, #24]
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	b943      	cbnz	r3, 800b576 <__swsetup_r+0xc6>
 800b564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b568:	d1ba      	bne.n	800b4e0 <__swsetup_r+0x30>
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
 800b56c:	0781      	lsls	r1, r0, #30
 800b56e:	bf58      	it	pl
 800b570:	6963      	ldrpl	r3, [r4, #20]
 800b572:	60a3      	str	r3, [r4, #8]
 800b574:	e7f4      	b.n	800b560 <__swsetup_r+0xb0>
 800b576:	2000      	movs	r0, #0
 800b578:	e7f7      	b.n	800b56a <__swsetup_r+0xba>
 800b57a:	bf00      	nop
 800b57c:	2000003c 	.word	0x2000003c
 800b580:	0800ff00 	.word	0x0800ff00
 800b584:	0800ff20 	.word	0x0800ff20
 800b588:	0800fee0 	.word	0x0800fee0

0800b58c <_close_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4d06      	ldr	r5, [pc, #24]	; (800b5a8 <_close_r+0x1c>)
 800b590:	2300      	movs	r3, #0
 800b592:	4604      	mov	r4, r0
 800b594:	4608      	mov	r0, r1
 800b596:	602b      	str	r3, [r5, #0]
 800b598:	f7f8 ff17 	bl	80043ca <_close>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_close_r+0x1a>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_close_r+0x1a>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	20003aa8 	.word	0x20003aa8

0800b5ac <__sflush_r>:
 800b5ac:	898a      	ldrh	r2, [r1, #12]
 800b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	0710      	lsls	r0, r2, #28
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	d458      	bmi.n	800b66c <__sflush_r+0xc0>
 800b5ba:	684b      	ldr	r3, [r1, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	dc05      	bgt.n	800b5cc <__sflush_r+0x20>
 800b5c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	dc02      	bgt.n	800b5cc <__sflush_r+0x20>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	d0f9      	beq.n	800b5c6 <__sflush_r+0x1a>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5d8:	682f      	ldr	r7, [r5, #0]
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	d032      	beq.n	800b644 <__sflush_r+0x98>
 800b5de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	075a      	lsls	r2, r3, #29
 800b5e4:	d505      	bpl.n	800b5f2 <__sflush_r+0x46>
 800b5e6:	6863      	ldr	r3, [r4, #4]
 800b5e8:	1ac0      	subs	r0, r0, r3
 800b5ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5ec:	b10b      	cbz	r3, 800b5f2 <__sflush_r+0x46>
 800b5ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5f0:	1ac0      	subs	r0, r0, r3
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5f8:	6a21      	ldr	r1, [r4, #32]
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	47b0      	blx	r6
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	d106      	bne.n	800b612 <__sflush_r+0x66>
 800b604:	6829      	ldr	r1, [r5, #0]
 800b606:	291d      	cmp	r1, #29
 800b608:	d82c      	bhi.n	800b664 <__sflush_r+0xb8>
 800b60a:	4a2a      	ldr	r2, [pc, #168]	; (800b6b4 <__sflush_r+0x108>)
 800b60c:	40ca      	lsrs	r2, r1
 800b60e:	07d6      	lsls	r6, r2, #31
 800b610:	d528      	bpl.n	800b664 <__sflush_r+0xb8>
 800b612:	2200      	movs	r2, #0
 800b614:	6062      	str	r2, [r4, #4]
 800b616:	04d9      	lsls	r1, r3, #19
 800b618:	6922      	ldr	r2, [r4, #16]
 800b61a:	6022      	str	r2, [r4, #0]
 800b61c:	d504      	bpl.n	800b628 <__sflush_r+0x7c>
 800b61e:	1c42      	adds	r2, r0, #1
 800b620:	d101      	bne.n	800b626 <__sflush_r+0x7a>
 800b622:	682b      	ldr	r3, [r5, #0]
 800b624:	b903      	cbnz	r3, 800b628 <__sflush_r+0x7c>
 800b626:	6560      	str	r0, [r4, #84]	; 0x54
 800b628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b62a:	602f      	str	r7, [r5, #0]
 800b62c:	2900      	cmp	r1, #0
 800b62e:	d0ca      	beq.n	800b5c6 <__sflush_r+0x1a>
 800b630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b634:	4299      	cmp	r1, r3
 800b636:	d002      	beq.n	800b63e <__sflush_r+0x92>
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 f9e9 	bl	800ba10 <_free_r>
 800b63e:	2000      	movs	r0, #0
 800b640:	6360      	str	r0, [r4, #52]	; 0x34
 800b642:	e7c1      	b.n	800b5c8 <__sflush_r+0x1c>
 800b644:	6a21      	ldr	r1, [r4, #32]
 800b646:	2301      	movs	r3, #1
 800b648:	4628      	mov	r0, r5
 800b64a:	47b0      	blx	r6
 800b64c:	1c41      	adds	r1, r0, #1
 800b64e:	d1c7      	bne.n	800b5e0 <__sflush_r+0x34>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0c4      	beq.n	800b5e0 <__sflush_r+0x34>
 800b656:	2b1d      	cmp	r3, #29
 800b658:	d001      	beq.n	800b65e <__sflush_r+0xb2>
 800b65a:	2b16      	cmp	r3, #22
 800b65c:	d101      	bne.n	800b662 <__sflush_r+0xb6>
 800b65e:	602f      	str	r7, [r5, #0]
 800b660:	e7b1      	b.n	800b5c6 <__sflush_r+0x1a>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	e7ad      	b.n	800b5c8 <__sflush_r+0x1c>
 800b66c:	690f      	ldr	r7, [r1, #16]
 800b66e:	2f00      	cmp	r7, #0
 800b670:	d0a9      	beq.n	800b5c6 <__sflush_r+0x1a>
 800b672:	0793      	lsls	r3, r2, #30
 800b674:	680e      	ldr	r6, [r1, #0]
 800b676:	bf08      	it	eq
 800b678:	694b      	ldreq	r3, [r1, #20]
 800b67a:	600f      	str	r7, [r1, #0]
 800b67c:	bf18      	it	ne
 800b67e:	2300      	movne	r3, #0
 800b680:	eba6 0807 	sub.w	r8, r6, r7
 800b684:	608b      	str	r3, [r1, #8]
 800b686:	f1b8 0f00 	cmp.w	r8, #0
 800b68a:	dd9c      	ble.n	800b5c6 <__sflush_r+0x1a>
 800b68c:	6a21      	ldr	r1, [r4, #32]
 800b68e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b690:	4643      	mov	r3, r8
 800b692:	463a      	mov	r2, r7
 800b694:	4628      	mov	r0, r5
 800b696:	47b0      	blx	r6
 800b698:	2800      	cmp	r0, #0
 800b69a:	dc06      	bgt.n	800b6aa <__sflush_r+0xfe>
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	e78e      	b.n	800b5c8 <__sflush_r+0x1c>
 800b6aa:	4407      	add	r7, r0
 800b6ac:	eba8 0800 	sub.w	r8, r8, r0
 800b6b0:	e7e9      	b.n	800b686 <__sflush_r+0xda>
 800b6b2:	bf00      	nop
 800b6b4:	20400001 	.word	0x20400001

0800b6b8 <_fflush_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	690b      	ldr	r3, [r1, #16]
 800b6bc:	4605      	mov	r5, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b913      	cbnz	r3, 800b6c8 <_fflush_r+0x10>
 800b6c2:	2500      	movs	r5, #0
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	b118      	cbz	r0, 800b6d2 <_fflush_r+0x1a>
 800b6ca:	6983      	ldr	r3, [r0, #24]
 800b6cc:	b90b      	cbnz	r3, 800b6d2 <_fflush_r+0x1a>
 800b6ce:	f000 f887 	bl	800b7e0 <__sinit>
 800b6d2:	4b14      	ldr	r3, [pc, #80]	; (800b724 <_fflush_r+0x6c>)
 800b6d4:	429c      	cmp	r4, r3
 800b6d6:	d11b      	bne.n	800b710 <_fflush_r+0x58>
 800b6d8:	686c      	ldr	r4, [r5, #4]
 800b6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0ef      	beq.n	800b6c2 <_fflush_r+0xa>
 800b6e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6e4:	07d0      	lsls	r0, r2, #31
 800b6e6:	d404      	bmi.n	800b6f2 <_fflush_r+0x3a>
 800b6e8:	0599      	lsls	r1, r3, #22
 800b6ea:	d402      	bmi.n	800b6f2 <_fflush_r+0x3a>
 800b6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ee:	f000 f915 	bl	800b91c <__retarget_lock_acquire_recursive>
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	f7ff ff59 	bl	800b5ac <__sflush_r>
 800b6fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6fc:	07da      	lsls	r2, r3, #31
 800b6fe:	4605      	mov	r5, r0
 800b700:	d4e0      	bmi.n	800b6c4 <_fflush_r+0xc>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	059b      	lsls	r3, r3, #22
 800b706:	d4dd      	bmi.n	800b6c4 <_fflush_r+0xc>
 800b708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b70a:	f000 f908 	bl	800b91e <__retarget_lock_release_recursive>
 800b70e:	e7d9      	b.n	800b6c4 <_fflush_r+0xc>
 800b710:	4b05      	ldr	r3, [pc, #20]	; (800b728 <_fflush_r+0x70>)
 800b712:	429c      	cmp	r4, r3
 800b714:	d101      	bne.n	800b71a <_fflush_r+0x62>
 800b716:	68ac      	ldr	r4, [r5, #8]
 800b718:	e7df      	b.n	800b6da <_fflush_r+0x22>
 800b71a:	4b04      	ldr	r3, [pc, #16]	; (800b72c <_fflush_r+0x74>)
 800b71c:	429c      	cmp	r4, r3
 800b71e:	bf08      	it	eq
 800b720:	68ec      	ldreq	r4, [r5, #12]
 800b722:	e7da      	b.n	800b6da <_fflush_r+0x22>
 800b724:	0800ff00 	.word	0x0800ff00
 800b728:	0800ff20 	.word	0x0800ff20
 800b72c:	0800fee0 	.word	0x0800fee0

0800b730 <std>:
 800b730:	2300      	movs	r3, #0
 800b732:	b510      	push	{r4, lr}
 800b734:	4604      	mov	r4, r0
 800b736:	e9c0 3300 	strd	r3, r3, [r0]
 800b73a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b73e:	6083      	str	r3, [r0, #8]
 800b740:	8181      	strh	r1, [r0, #12]
 800b742:	6643      	str	r3, [r0, #100]	; 0x64
 800b744:	81c2      	strh	r2, [r0, #14]
 800b746:	6183      	str	r3, [r0, #24]
 800b748:	4619      	mov	r1, r3
 800b74a:	2208      	movs	r2, #8
 800b74c:	305c      	adds	r0, #92	; 0x5c
 800b74e:	f7ff fd05 	bl	800b15c <memset>
 800b752:	4b05      	ldr	r3, [pc, #20]	; (800b768 <std+0x38>)
 800b754:	6263      	str	r3, [r4, #36]	; 0x24
 800b756:	4b05      	ldr	r3, [pc, #20]	; (800b76c <std+0x3c>)
 800b758:	62a3      	str	r3, [r4, #40]	; 0x28
 800b75a:	4b05      	ldr	r3, [pc, #20]	; (800b770 <std+0x40>)
 800b75c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b75e:	4b05      	ldr	r3, [pc, #20]	; (800b774 <std+0x44>)
 800b760:	6224      	str	r4, [r4, #32]
 800b762:	6323      	str	r3, [r4, #48]	; 0x30
 800b764:	bd10      	pop	{r4, pc}
 800b766:	bf00      	nop
 800b768:	0800b321 	.word	0x0800b321
 800b76c:	0800b347 	.word	0x0800b347
 800b770:	0800b37f 	.word	0x0800b37f
 800b774:	0800b3a3 	.word	0x0800b3a3

0800b778 <_cleanup_r>:
 800b778:	4901      	ldr	r1, [pc, #4]	; (800b780 <_cleanup_r+0x8>)
 800b77a:	f000 b8af 	b.w	800b8dc <_fwalk_reent>
 800b77e:	bf00      	nop
 800b780:	0800b6b9 	.word	0x0800b6b9

0800b784 <__sfmoreglue>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	2268      	movs	r2, #104	; 0x68
 800b788:	1e4d      	subs	r5, r1, #1
 800b78a:	4355      	muls	r5, r2
 800b78c:	460e      	mov	r6, r1
 800b78e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b792:	f000 f9a9 	bl	800bae8 <_malloc_r>
 800b796:	4604      	mov	r4, r0
 800b798:	b140      	cbz	r0, 800b7ac <__sfmoreglue+0x28>
 800b79a:	2100      	movs	r1, #0
 800b79c:	e9c0 1600 	strd	r1, r6, [r0]
 800b7a0:	300c      	adds	r0, #12
 800b7a2:	60a0      	str	r0, [r4, #8]
 800b7a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7a8:	f7ff fcd8 	bl	800b15c <memset>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}

0800b7b0 <__sfp_lock_acquire>:
 800b7b0:	4801      	ldr	r0, [pc, #4]	; (800b7b8 <__sfp_lock_acquire+0x8>)
 800b7b2:	f000 b8b3 	b.w	800b91c <__retarget_lock_acquire_recursive>
 800b7b6:	bf00      	nop
 800b7b8:	20003a9d 	.word	0x20003a9d

0800b7bc <__sfp_lock_release>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <__sfp_lock_release+0x8>)
 800b7be:	f000 b8ae 	b.w	800b91e <__retarget_lock_release_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	20003a9d 	.word	0x20003a9d

0800b7c8 <__sinit_lock_acquire>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	; (800b7d0 <__sinit_lock_acquire+0x8>)
 800b7ca:	f000 b8a7 	b.w	800b91c <__retarget_lock_acquire_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	20003a9e 	.word	0x20003a9e

0800b7d4 <__sinit_lock_release>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <__sinit_lock_release+0x8>)
 800b7d6:	f000 b8a2 	b.w	800b91e <__retarget_lock_release_recursive>
 800b7da:	bf00      	nop
 800b7dc:	20003a9e 	.word	0x20003a9e

0800b7e0 <__sinit>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	f7ff fff0 	bl	800b7c8 <__sinit_lock_acquire>
 800b7e8:	69a3      	ldr	r3, [r4, #24]
 800b7ea:	b11b      	cbz	r3, 800b7f4 <__sinit+0x14>
 800b7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f0:	f7ff bff0 	b.w	800b7d4 <__sinit_lock_release>
 800b7f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7f8:	6523      	str	r3, [r4, #80]	; 0x50
 800b7fa:	4b13      	ldr	r3, [pc, #76]	; (800b848 <__sinit+0x68>)
 800b7fc:	4a13      	ldr	r2, [pc, #76]	; (800b84c <__sinit+0x6c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	62a2      	str	r2, [r4, #40]	; 0x28
 800b802:	42a3      	cmp	r3, r4
 800b804:	bf04      	itt	eq
 800b806:	2301      	moveq	r3, #1
 800b808:	61a3      	streq	r3, [r4, #24]
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 f820 	bl	800b850 <__sfp>
 800b810:	6060      	str	r0, [r4, #4]
 800b812:	4620      	mov	r0, r4
 800b814:	f000 f81c 	bl	800b850 <__sfp>
 800b818:	60a0      	str	r0, [r4, #8]
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f818 	bl	800b850 <__sfp>
 800b820:	2200      	movs	r2, #0
 800b822:	60e0      	str	r0, [r4, #12]
 800b824:	2104      	movs	r1, #4
 800b826:	6860      	ldr	r0, [r4, #4]
 800b828:	f7ff ff82 	bl	800b730 <std>
 800b82c:	68a0      	ldr	r0, [r4, #8]
 800b82e:	2201      	movs	r2, #1
 800b830:	2109      	movs	r1, #9
 800b832:	f7ff ff7d 	bl	800b730 <std>
 800b836:	68e0      	ldr	r0, [r4, #12]
 800b838:	2202      	movs	r2, #2
 800b83a:	2112      	movs	r1, #18
 800b83c:	f7ff ff78 	bl	800b730 <std>
 800b840:	2301      	movs	r3, #1
 800b842:	61a3      	str	r3, [r4, #24]
 800b844:	e7d2      	b.n	800b7ec <__sinit+0xc>
 800b846:	bf00      	nop
 800b848:	0800fedc 	.word	0x0800fedc
 800b84c:	0800b779 	.word	0x0800b779

0800b850 <__sfp>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	4607      	mov	r7, r0
 800b854:	f7ff ffac 	bl	800b7b0 <__sfp_lock_acquire>
 800b858:	4b1e      	ldr	r3, [pc, #120]	; (800b8d4 <__sfp+0x84>)
 800b85a:	681e      	ldr	r6, [r3, #0]
 800b85c:	69b3      	ldr	r3, [r6, #24]
 800b85e:	b913      	cbnz	r3, 800b866 <__sfp+0x16>
 800b860:	4630      	mov	r0, r6
 800b862:	f7ff ffbd 	bl	800b7e0 <__sinit>
 800b866:	3648      	adds	r6, #72	; 0x48
 800b868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	d503      	bpl.n	800b878 <__sfp+0x28>
 800b870:	6833      	ldr	r3, [r6, #0]
 800b872:	b30b      	cbz	r3, 800b8b8 <__sfp+0x68>
 800b874:	6836      	ldr	r6, [r6, #0]
 800b876:	e7f7      	b.n	800b868 <__sfp+0x18>
 800b878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b87c:	b9d5      	cbnz	r5, 800b8b4 <__sfp+0x64>
 800b87e:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <__sfp+0x88>)
 800b880:	60e3      	str	r3, [r4, #12]
 800b882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b886:	6665      	str	r5, [r4, #100]	; 0x64
 800b888:	f000 f847 	bl	800b91a <__retarget_lock_init_recursive>
 800b88c:	f7ff ff96 	bl	800b7bc <__sfp_lock_release>
 800b890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b898:	6025      	str	r5, [r4, #0]
 800b89a:	61a5      	str	r5, [r4, #24]
 800b89c:	2208      	movs	r2, #8
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8a4:	f7ff fc5a 	bl	800b15c <memset>
 800b8a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b4:	3468      	adds	r4, #104	; 0x68
 800b8b6:	e7d9      	b.n	800b86c <__sfp+0x1c>
 800b8b8:	2104      	movs	r1, #4
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	f7ff ff62 	bl	800b784 <__sfmoreglue>
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	6030      	str	r0, [r6, #0]
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d1d5      	bne.n	800b874 <__sfp+0x24>
 800b8c8:	f7ff ff78 	bl	800b7bc <__sfp_lock_release>
 800b8cc:	230c      	movs	r3, #12
 800b8ce:	603b      	str	r3, [r7, #0]
 800b8d0:	e7ee      	b.n	800b8b0 <__sfp+0x60>
 800b8d2:	bf00      	nop
 800b8d4:	0800fedc 	.word	0x0800fedc
 800b8d8:	ffff0001 	.word	0xffff0001

0800b8dc <_fwalk_reent>:
 800b8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	4688      	mov	r8, r1
 800b8e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8e8:	2700      	movs	r7, #0
 800b8ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8ee:	f1b9 0901 	subs.w	r9, r9, #1
 800b8f2:	d505      	bpl.n	800b900 <_fwalk_reent+0x24>
 800b8f4:	6824      	ldr	r4, [r4, #0]
 800b8f6:	2c00      	cmp	r4, #0
 800b8f8:	d1f7      	bne.n	800b8ea <_fwalk_reent+0xe>
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b900:	89ab      	ldrh	r3, [r5, #12]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d907      	bls.n	800b916 <_fwalk_reent+0x3a>
 800b906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b90a:	3301      	adds	r3, #1
 800b90c:	d003      	beq.n	800b916 <_fwalk_reent+0x3a>
 800b90e:	4629      	mov	r1, r5
 800b910:	4630      	mov	r0, r6
 800b912:	47c0      	blx	r8
 800b914:	4307      	orrs	r7, r0
 800b916:	3568      	adds	r5, #104	; 0x68
 800b918:	e7e9      	b.n	800b8ee <_fwalk_reent+0x12>

0800b91a <__retarget_lock_init_recursive>:
 800b91a:	4770      	bx	lr

0800b91c <__retarget_lock_acquire_recursive>:
 800b91c:	4770      	bx	lr

0800b91e <__retarget_lock_release_recursive>:
 800b91e:	4770      	bx	lr

0800b920 <_lseek_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d07      	ldr	r5, [pc, #28]	; (800b940 <_lseek_r+0x20>)
 800b924:	4604      	mov	r4, r0
 800b926:	4608      	mov	r0, r1
 800b928:	4611      	mov	r1, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	602a      	str	r2, [r5, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	f7f8 fd72 	bl	8004418 <_lseek>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_lseek_r+0x1e>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_lseek_r+0x1e>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	20003aa8 	.word	0x20003aa8

0800b944 <__swhatbuf_r>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	460e      	mov	r6, r1
 800b948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94c:	2900      	cmp	r1, #0
 800b94e:	b096      	sub	sp, #88	; 0x58
 800b950:	4614      	mov	r4, r2
 800b952:	461d      	mov	r5, r3
 800b954:	da08      	bge.n	800b968 <__swhatbuf_r+0x24>
 800b956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	602a      	str	r2, [r5, #0]
 800b95e:	061a      	lsls	r2, r3, #24
 800b960:	d410      	bmi.n	800b984 <__swhatbuf_r+0x40>
 800b962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b966:	e00e      	b.n	800b986 <__swhatbuf_r+0x42>
 800b968:	466a      	mov	r2, sp
 800b96a:	f001 fa2b 	bl	800cdc4 <_fstat_r>
 800b96e:	2800      	cmp	r0, #0
 800b970:	dbf1      	blt.n	800b956 <__swhatbuf_r+0x12>
 800b972:	9a01      	ldr	r2, [sp, #4]
 800b974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b97c:	425a      	negs	r2, r3
 800b97e:	415a      	adcs	r2, r3
 800b980:	602a      	str	r2, [r5, #0]
 800b982:	e7ee      	b.n	800b962 <__swhatbuf_r+0x1e>
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	2000      	movs	r0, #0
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	b016      	add	sp, #88	; 0x58
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b990 <__smakebuf_r>:
 800b990:	898b      	ldrh	r3, [r1, #12]
 800b992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b994:	079d      	lsls	r5, r3, #30
 800b996:	4606      	mov	r6, r0
 800b998:	460c      	mov	r4, r1
 800b99a:	d507      	bpl.n	800b9ac <__smakebuf_r+0x1c>
 800b99c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	6123      	str	r3, [r4, #16]
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	6163      	str	r3, [r4, #20]
 800b9a8:	b002      	add	sp, #8
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	ab01      	add	r3, sp, #4
 800b9ae:	466a      	mov	r2, sp
 800b9b0:	f7ff ffc8 	bl	800b944 <__swhatbuf_r>
 800b9b4:	9900      	ldr	r1, [sp, #0]
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f000 f895 	bl	800bae8 <_malloc_r>
 800b9be:	b948      	cbnz	r0, 800b9d4 <__smakebuf_r+0x44>
 800b9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c4:	059a      	lsls	r2, r3, #22
 800b9c6:	d4ef      	bmi.n	800b9a8 <__smakebuf_r+0x18>
 800b9c8:	f023 0303 	bic.w	r3, r3, #3
 800b9cc:	f043 0302 	orr.w	r3, r3, #2
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	e7e3      	b.n	800b99c <__smakebuf_r+0xc>
 800b9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ba0c <__smakebuf_r+0x7c>)
 800b9d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	6020      	str	r0, [r4, #0]
 800b9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	9b00      	ldr	r3, [sp, #0]
 800b9e4:	6163      	str	r3, [r4, #20]
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	6120      	str	r0, [r4, #16]
 800b9ea:	b15b      	cbz	r3, 800ba04 <__smakebuf_r+0x74>
 800b9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f001 f9f9 	bl	800cde8 <_isatty_r>
 800b9f6:	b128      	cbz	r0, 800ba04 <__smakebuf_r+0x74>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	f043 0301 	orr.w	r3, r3, #1
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	89a0      	ldrh	r0, [r4, #12]
 800ba06:	4305      	orrs	r5, r0
 800ba08:	81a5      	strh	r5, [r4, #12]
 800ba0a:	e7cd      	b.n	800b9a8 <__smakebuf_r+0x18>
 800ba0c:	0800b779 	.word	0x0800b779

0800ba10 <_free_r>:
 800ba10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba12:	2900      	cmp	r1, #0
 800ba14:	d044      	beq.n	800baa0 <_free_r+0x90>
 800ba16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1a:	9001      	str	r0, [sp, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba22:	bfb8      	it	lt
 800ba24:	18e4      	addlt	r4, r4, r3
 800ba26:	f001 fa09 	bl	800ce3c <__malloc_lock>
 800ba2a:	4a1e      	ldr	r2, [pc, #120]	; (800baa4 <_free_r+0x94>)
 800ba2c:	9801      	ldr	r0, [sp, #4]
 800ba2e:	6813      	ldr	r3, [r2, #0]
 800ba30:	b933      	cbnz	r3, 800ba40 <_free_r+0x30>
 800ba32:	6063      	str	r3, [r4, #4]
 800ba34:	6014      	str	r4, [r2, #0]
 800ba36:	b003      	add	sp, #12
 800ba38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba3c:	f001 ba04 	b.w	800ce48 <__malloc_unlock>
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d908      	bls.n	800ba56 <_free_r+0x46>
 800ba44:	6825      	ldr	r5, [r4, #0]
 800ba46:	1961      	adds	r1, r4, r5
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf01      	itttt	eq
 800ba4c:	6819      	ldreq	r1, [r3, #0]
 800ba4e:	685b      	ldreq	r3, [r3, #4]
 800ba50:	1949      	addeq	r1, r1, r5
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	e7ed      	b.n	800ba32 <_free_r+0x22>
 800ba56:	461a      	mov	r2, r3
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	b10b      	cbz	r3, 800ba60 <_free_r+0x50>
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	d9fa      	bls.n	800ba56 <_free_r+0x46>
 800ba60:	6811      	ldr	r1, [r2, #0]
 800ba62:	1855      	adds	r5, r2, r1
 800ba64:	42a5      	cmp	r5, r4
 800ba66:	d10b      	bne.n	800ba80 <_free_r+0x70>
 800ba68:	6824      	ldr	r4, [r4, #0]
 800ba6a:	4421      	add	r1, r4
 800ba6c:	1854      	adds	r4, r2, r1
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	d1e0      	bne.n	800ba36 <_free_r+0x26>
 800ba74:	681c      	ldr	r4, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	6053      	str	r3, [r2, #4]
 800ba7a:	4421      	add	r1, r4
 800ba7c:	6011      	str	r1, [r2, #0]
 800ba7e:	e7da      	b.n	800ba36 <_free_r+0x26>
 800ba80:	d902      	bls.n	800ba88 <_free_r+0x78>
 800ba82:	230c      	movs	r3, #12
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	e7d6      	b.n	800ba36 <_free_r+0x26>
 800ba88:	6825      	ldr	r5, [r4, #0]
 800ba8a:	1961      	adds	r1, r4, r5
 800ba8c:	428b      	cmp	r3, r1
 800ba8e:	bf04      	itt	eq
 800ba90:	6819      	ldreq	r1, [r3, #0]
 800ba92:	685b      	ldreq	r3, [r3, #4]
 800ba94:	6063      	str	r3, [r4, #4]
 800ba96:	bf04      	itt	eq
 800ba98:	1949      	addeq	r1, r1, r5
 800ba9a:	6021      	streq	r1, [r4, #0]
 800ba9c:	6054      	str	r4, [r2, #4]
 800ba9e:	e7ca      	b.n	800ba36 <_free_r+0x26>
 800baa0:	b003      	add	sp, #12
 800baa2:	bd30      	pop	{r4, r5, pc}
 800baa4:	20003aa0 	.word	0x20003aa0

0800baa8 <sbrk_aligned>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	4e0e      	ldr	r6, [pc, #56]	; (800bae4 <sbrk_aligned+0x3c>)
 800baac:	460c      	mov	r4, r1
 800baae:	6831      	ldr	r1, [r6, #0]
 800bab0:	4605      	mov	r5, r0
 800bab2:	b911      	cbnz	r1, 800baba <sbrk_aligned+0x12>
 800bab4:	f001 f80c 	bl	800cad0 <_sbrk_r>
 800bab8:	6030      	str	r0, [r6, #0]
 800baba:	4621      	mov	r1, r4
 800babc:	4628      	mov	r0, r5
 800babe:	f001 f807 	bl	800cad0 <_sbrk_r>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	d00a      	beq.n	800badc <sbrk_aligned+0x34>
 800bac6:	1cc4      	adds	r4, r0, #3
 800bac8:	f024 0403 	bic.w	r4, r4, #3
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d007      	beq.n	800bae0 <sbrk_aligned+0x38>
 800bad0:	1a21      	subs	r1, r4, r0
 800bad2:	4628      	mov	r0, r5
 800bad4:	f000 fffc 	bl	800cad0 <_sbrk_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d101      	bne.n	800bae0 <sbrk_aligned+0x38>
 800badc:	f04f 34ff 	mov.w	r4, #4294967295
 800bae0:	4620      	mov	r0, r4
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	20003aa4 	.word	0x20003aa4

0800bae8 <_malloc_r>:
 800bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baec:	1ccd      	adds	r5, r1, #3
 800baee:	f025 0503 	bic.w	r5, r5, #3
 800baf2:	3508      	adds	r5, #8
 800baf4:	2d0c      	cmp	r5, #12
 800baf6:	bf38      	it	cc
 800baf8:	250c      	movcc	r5, #12
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	4607      	mov	r7, r0
 800bafe:	db01      	blt.n	800bb04 <_malloc_r+0x1c>
 800bb00:	42a9      	cmp	r1, r5
 800bb02:	d905      	bls.n	800bb10 <_malloc_r+0x28>
 800bb04:	230c      	movs	r3, #12
 800bb06:	603b      	str	r3, [r7, #0]
 800bb08:	2600      	movs	r6, #0
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb10:	4e2e      	ldr	r6, [pc, #184]	; (800bbcc <_malloc_r+0xe4>)
 800bb12:	f001 f993 	bl	800ce3c <__malloc_lock>
 800bb16:	6833      	ldr	r3, [r6, #0]
 800bb18:	461c      	mov	r4, r3
 800bb1a:	bb34      	cbnz	r4, 800bb6a <_malloc_r+0x82>
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	4638      	mov	r0, r7
 800bb20:	f7ff ffc2 	bl	800baa8 <sbrk_aligned>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	4604      	mov	r4, r0
 800bb28:	d14d      	bne.n	800bbc6 <_malloc_r+0xde>
 800bb2a:	6834      	ldr	r4, [r6, #0]
 800bb2c:	4626      	mov	r6, r4
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d140      	bne.n	800bbb4 <_malloc_r+0xcc>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	4631      	mov	r1, r6
 800bb36:	4638      	mov	r0, r7
 800bb38:	eb04 0803 	add.w	r8, r4, r3
 800bb3c:	f000 ffc8 	bl	800cad0 <_sbrk_r>
 800bb40:	4580      	cmp	r8, r0
 800bb42:	d13a      	bne.n	800bbba <_malloc_r+0xd2>
 800bb44:	6821      	ldr	r1, [r4, #0]
 800bb46:	3503      	adds	r5, #3
 800bb48:	1a6d      	subs	r5, r5, r1
 800bb4a:	f025 0503 	bic.w	r5, r5, #3
 800bb4e:	3508      	adds	r5, #8
 800bb50:	2d0c      	cmp	r5, #12
 800bb52:	bf38      	it	cc
 800bb54:	250c      	movcc	r5, #12
 800bb56:	4629      	mov	r1, r5
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7ff ffa5 	bl	800baa8 <sbrk_aligned>
 800bb5e:	3001      	adds	r0, #1
 800bb60:	d02b      	beq.n	800bbba <_malloc_r+0xd2>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	442b      	add	r3, r5
 800bb66:	6023      	str	r3, [r4, #0]
 800bb68:	e00e      	b.n	800bb88 <_malloc_r+0xa0>
 800bb6a:	6822      	ldr	r2, [r4, #0]
 800bb6c:	1b52      	subs	r2, r2, r5
 800bb6e:	d41e      	bmi.n	800bbae <_malloc_r+0xc6>
 800bb70:	2a0b      	cmp	r2, #11
 800bb72:	d916      	bls.n	800bba2 <_malloc_r+0xba>
 800bb74:	1961      	adds	r1, r4, r5
 800bb76:	42a3      	cmp	r3, r4
 800bb78:	6025      	str	r5, [r4, #0]
 800bb7a:	bf18      	it	ne
 800bb7c:	6059      	strne	r1, [r3, #4]
 800bb7e:	6863      	ldr	r3, [r4, #4]
 800bb80:	bf08      	it	eq
 800bb82:	6031      	streq	r1, [r6, #0]
 800bb84:	5162      	str	r2, [r4, r5]
 800bb86:	604b      	str	r3, [r1, #4]
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f104 060b 	add.w	r6, r4, #11
 800bb8e:	f001 f95b 	bl	800ce48 <__malloc_unlock>
 800bb92:	f026 0607 	bic.w	r6, r6, #7
 800bb96:	1d23      	adds	r3, r4, #4
 800bb98:	1af2      	subs	r2, r6, r3
 800bb9a:	d0b6      	beq.n	800bb0a <_malloc_r+0x22>
 800bb9c:	1b9b      	subs	r3, r3, r6
 800bb9e:	50a3      	str	r3, [r4, r2]
 800bba0:	e7b3      	b.n	800bb0a <_malloc_r+0x22>
 800bba2:	6862      	ldr	r2, [r4, #4]
 800bba4:	42a3      	cmp	r3, r4
 800bba6:	bf0c      	ite	eq
 800bba8:	6032      	streq	r2, [r6, #0]
 800bbaa:	605a      	strne	r2, [r3, #4]
 800bbac:	e7ec      	b.n	800bb88 <_malloc_r+0xa0>
 800bbae:	4623      	mov	r3, r4
 800bbb0:	6864      	ldr	r4, [r4, #4]
 800bbb2:	e7b2      	b.n	800bb1a <_malloc_r+0x32>
 800bbb4:	4634      	mov	r4, r6
 800bbb6:	6876      	ldr	r6, [r6, #4]
 800bbb8:	e7b9      	b.n	800bb2e <_malloc_r+0x46>
 800bbba:	230c      	movs	r3, #12
 800bbbc:	603b      	str	r3, [r7, #0]
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	f001 f942 	bl	800ce48 <__malloc_unlock>
 800bbc4:	e7a1      	b.n	800bb0a <_malloc_r+0x22>
 800bbc6:	6025      	str	r5, [r4, #0]
 800bbc8:	e7de      	b.n	800bb88 <_malloc_r+0xa0>
 800bbca:	bf00      	nop
 800bbcc:	20003aa0 	.word	0x20003aa0

0800bbd0 <__ssputs_r>:
 800bbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd4:	688e      	ldr	r6, [r1, #8]
 800bbd6:	429e      	cmp	r6, r3
 800bbd8:	4682      	mov	sl, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4690      	mov	r8, r2
 800bbde:	461f      	mov	r7, r3
 800bbe0:	d838      	bhi.n	800bc54 <__ssputs_r+0x84>
 800bbe2:	898a      	ldrh	r2, [r1, #12]
 800bbe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbe8:	d032      	beq.n	800bc50 <__ssputs_r+0x80>
 800bbea:	6825      	ldr	r5, [r4, #0]
 800bbec:	6909      	ldr	r1, [r1, #16]
 800bbee:	eba5 0901 	sub.w	r9, r5, r1
 800bbf2:	6965      	ldr	r5, [r4, #20]
 800bbf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	444b      	add	r3, r9
 800bc00:	106d      	asrs	r5, r5, #1
 800bc02:	429d      	cmp	r5, r3
 800bc04:	bf38      	it	cc
 800bc06:	461d      	movcc	r5, r3
 800bc08:	0553      	lsls	r3, r2, #21
 800bc0a:	d531      	bpl.n	800bc70 <__ssputs_r+0xa0>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	f7ff ff6b 	bl	800bae8 <_malloc_r>
 800bc12:	4606      	mov	r6, r0
 800bc14:	b950      	cbnz	r0, 800bc2c <__ssputs_r+0x5c>
 800bc16:	230c      	movs	r3, #12
 800bc18:	f8ca 3000 	str.w	r3, [sl]
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc22:	81a3      	strh	r3, [r4, #12]
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2c:	6921      	ldr	r1, [r4, #16]
 800bc2e:	464a      	mov	r2, r9
 800bc30:	f7ff fa86 	bl	800b140 <memcpy>
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc3e:	81a3      	strh	r3, [r4, #12]
 800bc40:	6126      	str	r6, [r4, #16]
 800bc42:	6165      	str	r5, [r4, #20]
 800bc44:	444e      	add	r6, r9
 800bc46:	eba5 0509 	sub.w	r5, r5, r9
 800bc4a:	6026      	str	r6, [r4, #0]
 800bc4c:	60a5      	str	r5, [r4, #8]
 800bc4e:	463e      	mov	r6, r7
 800bc50:	42be      	cmp	r6, r7
 800bc52:	d900      	bls.n	800bc56 <__ssputs_r+0x86>
 800bc54:	463e      	mov	r6, r7
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	4632      	mov	r2, r6
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	f001 f8d4 	bl	800ce08 <memmove>
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	1b9b      	subs	r3, r3, r6
 800bc64:	60a3      	str	r3, [r4, #8]
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	4433      	add	r3, r6
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7db      	b.n	800bc28 <__ssputs_r+0x58>
 800bc70:	462a      	mov	r2, r5
 800bc72:	f001 f8ef 	bl	800ce54 <_realloc_r>
 800bc76:	4606      	mov	r6, r0
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d1e1      	bne.n	800bc40 <__ssputs_r+0x70>
 800bc7c:	6921      	ldr	r1, [r4, #16]
 800bc7e:	4650      	mov	r0, sl
 800bc80:	f7ff fec6 	bl	800ba10 <_free_r>
 800bc84:	e7c7      	b.n	800bc16 <__ssputs_r+0x46>
	...

0800bc88 <_svfiprintf_r>:
 800bc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	4698      	mov	r8, r3
 800bc8e:	898b      	ldrh	r3, [r1, #12]
 800bc90:	061b      	lsls	r3, r3, #24
 800bc92:	b09d      	sub	sp, #116	; 0x74
 800bc94:	4607      	mov	r7, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	4614      	mov	r4, r2
 800bc9a:	d50e      	bpl.n	800bcba <_svfiprintf_r+0x32>
 800bc9c:	690b      	ldr	r3, [r1, #16]
 800bc9e:	b963      	cbnz	r3, 800bcba <_svfiprintf_r+0x32>
 800bca0:	2140      	movs	r1, #64	; 0x40
 800bca2:	f7ff ff21 	bl	800bae8 <_malloc_r>
 800bca6:	6028      	str	r0, [r5, #0]
 800bca8:	6128      	str	r0, [r5, #16]
 800bcaa:	b920      	cbnz	r0, 800bcb6 <_svfiprintf_r+0x2e>
 800bcac:	230c      	movs	r3, #12
 800bcae:	603b      	str	r3, [r7, #0]
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	e0d1      	b.n	800be5a <_svfiprintf_r+0x1d2>
 800bcb6:	2340      	movs	r3, #64	; 0x40
 800bcb8:	616b      	str	r3, [r5, #20]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbe:	2320      	movs	r3, #32
 800bcc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcc8:	2330      	movs	r3, #48	; 0x30
 800bcca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be74 <_svfiprintf_r+0x1ec>
 800bcce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcd2:	f04f 0901 	mov.w	r9, #1
 800bcd6:	4623      	mov	r3, r4
 800bcd8:	469a      	mov	sl, r3
 800bcda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcde:	b10a      	cbz	r2, 800bce4 <_svfiprintf_r+0x5c>
 800bce0:	2a25      	cmp	r2, #37	; 0x25
 800bce2:	d1f9      	bne.n	800bcd8 <_svfiprintf_r+0x50>
 800bce4:	ebba 0b04 	subs.w	fp, sl, r4
 800bce8:	d00b      	beq.n	800bd02 <_svfiprintf_r+0x7a>
 800bcea:	465b      	mov	r3, fp
 800bcec:	4622      	mov	r2, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff ff6d 	bl	800bbd0 <__ssputs_r>
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	f000 80aa 	beq.w	800be50 <_svfiprintf_r+0x1c8>
 800bcfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcfe:	445a      	add	r2, fp
 800bd00:	9209      	str	r2, [sp, #36]	; 0x24
 800bd02:	f89a 3000 	ldrb.w	r3, [sl]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 80a2 	beq.w	800be50 <_svfiprintf_r+0x1c8>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd16:	f10a 0a01 	add.w	sl, sl, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	9307      	str	r3, [sp, #28]
 800bd1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd22:	931a      	str	r3, [sp, #104]	; 0x68
 800bd24:	4654      	mov	r4, sl
 800bd26:	2205      	movs	r2, #5
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	4851      	ldr	r0, [pc, #324]	; (800be74 <_svfiprintf_r+0x1ec>)
 800bd2e:	f7f4 fa6f 	bl	8000210 <memchr>
 800bd32:	9a04      	ldr	r2, [sp, #16]
 800bd34:	b9d8      	cbnz	r0, 800bd6e <_svfiprintf_r+0xe6>
 800bd36:	06d0      	lsls	r0, r2, #27
 800bd38:	bf44      	itt	mi
 800bd3a:	2320      	movmi	r3, #32
 800bd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd40:	0711      	lsls	r1, r2, #28
 800bd42:	bf44      	itt	mi
 800bd44:	232b      	movmi	r3, #43	; 0x2b
 800bd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd50:	d015      	beq.n	800bd7e <_svfiprintf_r+0xf6>
 800bd52:	9a07      	ldr	r2, [sp, #28]
 800bd54:	4654      	mov	r4, sl
 800bd56:	2000      	movs	r0, #0
 800bd58:	f04f 0c0a 	mov.w	ip, #10
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd62:	3b30      	subs	r3, #48	; 0x30
 800bd64:	2b09      	cmp	r3, #9
 800bd66:	d94e      	bls.n	800be06 <_svfiprintf_r+0x17e>
 800bd68:	b1b0      	cbz	r0, 800bd98 <_svfiprintf_r+0x110>
 800bd6a:	9207      	str	r2, [sp, #28]
 800bd6c:	e014      	b.n	800bd98 <_svfiprintf_r+0x110>
 800bd6e:	eba0 0308 	sub.w	r3, r0, r8
 800bd72:	fa09 f303 	lsl.w	r3, r9, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	9304      	str	r3, [sp, #16]
 800bd7a:	46a2      	mov	sl, r4
 800bd7c:	e7d2      	b.n	800bd24 <_svfiprintf_r+0x9c>
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	1d19      	adds	r1, r3, #4
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	9103      	str	r1, [sp, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	bfbb      	ittet	lt
 800bd8a:	425b      	neglt	r3, r3
 800bd8c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd90:	9307      	strge	r3, [sp, #28]
 800bd92:	9307      	strlt	r3, [sp, #28]
 800bd94:	bfb8      	it	lt
 800bd96:	9204      	strlt	r2, [sp, #16]
 800bd98:	7823      	ldrb	r3, [r4, #0]
 800bd9a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd9c:	d10c      	bne.n	800bdb8 <_svfiprintf_r+0x130>
 800bd9e:	7863      	ldrb	r3, [r4, #1]
 800bda0:	2b2a      	cmp	r3, #42	; 0x2a
 800bda2:	d135      	bne.n	800be10 <_svfiprintf_r+0x188>
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	1d1a      	adds	r2, r3, #4
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	9203      	str	r2, [sp, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	bfb8      	it	lt
 800bdb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdb4:	3402      	adds	r4, #2
 800bdb6:	9305      	str	r3, [sp, #20]
 800bdb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be84 <_svfiprintf_r+0x1fc>
 800bdbc:	7821      	ldrb	r1, [r4, #0]
 800bdbe:	2203      	movs	r2, #3
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	f7f4 fa25 	bl	8000210 <memchr>
 800bdc6:	b140      	cbz	r0, 800bdda <_svfiprintf_r+0x152>
 800bdc8:	2340      	movs	r3, #64	; 0x40
 800bdca:	eba0 000a 	sub.w	r0, r0, sl
 800bdce:	fa03 f000 	lsl.w	r0, r3, r0
 800bdd2:	9b04      	ldr	r3, [sp, #16]
 800bdd4:	4303      	orrs	r3, r0
 800bdd6:	3401      	adds	r4, #1
 800bdd8:	9304      	str	r3, [sp, #16]
 800bdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdde:	4826      	ldr	r0, [pc, #152]	; (800be78 <_svfiprintf_r+0x1f0>)
 800bde0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bde4:	2206      	movs	r2, #6
 800bde6:	f7f4 fa13 	bl	8000210 <memchr>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d038      	beq.n	800be60 <_svfiprintf_r+0x1d8>
 800bdee:	4b23      	ldr	r3, [pc, #140]	; (800be7c <_svfiprintf_r+0x1f4>)
 800bdf0:	bb1b      	cbnz	r3, 800be3a <_svfiprintf_r+0x1b2>
 800bdf2:	9b03      	ldr	r3, [sp, #12]
 800bdf4:	3307      	adds	r3, #7
 800bdf6:	f023 0307 	bic.w	r3, r3, #7
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	9303      	str	r3, [sp, #12]
 800bdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be00:	4433      	add	r3, r6
 800be02:	9309      	str	r3, [sp, #36]	; 0x24
 800be04:	e767      	b.n	800bcd6 <_svfiprintf_r+0x4e>
 800be06:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0a:	460c      	mov	r4, r1
 800be0c:	2001      	movs	r0, #1
 800be0e:	e7a5      	b.n	800bd5c <_svfiprintf_r+0xd4>
 800be10:	2300      	movs	r3, #0
 800be12:	3401      	adds	r4, #1
 800be14:	9305      	str	r3, [sp, #20]
 800be16:	4619      	mov	r1, r3
 800be18:	f04f 0c0a 	mov.w	ip, #10
 800be1c:	4620      	mov	r0, r4
 800be1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be22:	3a30      	subs	r2, #48	; 0x30
 800be24:	2a09      	cmp	r2, #9
 800be26:	d903      	bls.n	800be30 <_svfiprintf_r+0x1a8>
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0c5      	beq.n	800bdb8 <_svfiprintf_r+0x130>
 800be2c:	9105      	str	r1, [sp, #20]
 800be2e:	e7c3      	b.n	800bdb8 <_svfiprintf_r+0x130>
 800be30:	fb0c 2101 	mla	r1, ip, r1, r2
 800be34:	4604      	mov	r4, r0
 800be36:	2301      	movs	r3, #1
 800be38:	e7f0      	b.n	800be1c <_svfiprintf_r+0x194>
 800be3a:	ab03      	add	r3, sp, #12
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	462a      	mov	r2, r5
 800be40:	4b0f      	ldr	r3, [pc, #60]	; (800be80 <_svfiprintf_r+0x1f8>)
 800be42:	a904      	add	r1, sp, #16
 800be44:	4638      	mov	r0, r7
 800be46:	f3af 8000 	nop.w
 800be4a:	1c42      	adds	r2, r0, #1
 800be4c:	4606      	mov	r6, r0
 800be4e:	d1d6      	bne.n	800bdfe <_svfiprintf_r+0x176>
 800be50:	89ab      	ldrh	r3, [r5, #12]
 800be52:	065b      	lsls	r3, r3, #25
 800be54:	f53f af2c 	bmi.w	800bcb0 <_svfiprintf_r+0x28>
 800be58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be5a:	b01d      	add	sp, #116	; 0x74
 800be5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be60:	ab03      	add	r3, sp, #12
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	462a      	mov	r2, r5
 800be66:	4b06      	ldr	r3, [pc, #24]	; (800be80 <_svfiprintf_r+0x1f8>)
 800be68:	a904      	add	r1, sp, #16
 800be6a:	4638      	mov	r0, r7
 800be6c:	f000 fba6 	bl	800c5bc <_printf_i>
 800be70:	e7eb      	b.n	800be4a <_svfiprintf_r+0x1c2>
 800be72:	bf00      	nop
 800be74:	0800ff40 	.word	0x0800ff40
 800be78:	0800ff4a 	.word	0x0800ff4a
 800be7c:	00000000 	.word	0x00000000
 800be80:	0800bbd1 	.word	0x0800bbd1
 800be84:	0800ff46 	.word	0x0800ff46

0800be88 <_sungetc_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	1c4b      	adds	r3, r1, #1
 800be8c:	4614      	mov	r4, r2
 800be8e:	d103      	bne.n	800be98 <_sungetc_r+0x10>
 800be90:	f04f 35ff 	mov.w	r5, #4294967295
 800be94:	4628      	mov	r0, r5
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	8993      	ldrh	r3, [r2, #12]
 800be9a:	f023 0320 	bic.w	r3, r3, #32
 800be9e:	8193      	strh	r3, [r2, #12]
 800bea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bea2:	6852      	ldr	r2, [r2, #4]
 800bea4:	b2cd      	uxtb	r5, r1
 800bea6:	b18b      	cbz	r3, 800becc <_sungetc_r+0x44>
 800bea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800beaa:	4293      	cmp	r3, r2
 800beac:	dd08      	ble.n	800bec0 <_sungetc_r+0x38>
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	1e5a      	subs	r2, r3, #1
 800beb2:	6022      	str	r2, [r4, #0]
 800beb4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800beb8:	6863      	ldr	r3, [r4, #4]
 800beba:	3301      	adds	r3, #1
 800bebc:	6063      	str	r3, [r4, #4]
 800bebe:	e7e9      	b.n	800be94 <_sungetc_r+0xc>
 800bec0:	4621      	mov	r1, r4
 800bec2:	f000 ff45 	bl	800cd50 <__submore>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d0f1      	beq.n	800beae <_sungetc_r+0x26>
 800beca:	e7e1      	b.n	800be90 <_sungetc_r+0x8>
 800becc:	6921      	ldr	r1, [r4, #16]
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	b151      	cbz	r1, 800bee8 <_sungetc_r+0x60>
 800bed2:	4299      	cmp	r1, r3
 800bed4:	d208      	bcs.n	800bee8 <_sungetc_r+0x60>
 800bed6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800beda:	42a9      	cmp	r1, r5
 800bedc:	d104      	bne.n	800bee8 <_sungetc_r+0x60>
 800bede:	3b01      	subs	r3, #1
 800bee0:	3201      	adds	r2, #1
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	6062      	str	r2, [r4, #4]
 800bee6:	e7d5      	b.n	800be94 <_sungetc_r+0xc>
 800bee8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800beec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bef0:	6363      	str	r3, [r4, #52]	; 0x34
 800bef2:	2303      	movs	r3, #3
 800bef4:	63a3      	str	r3, [r4, #56]	; 0x38
 800bef6:	4623      	mov	r3, r4
 800bef8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	2301      	movs	r3, #1
 800bf00:	e7dc      	b.n	800bebc <_sungetc_r+0x34>

0800bf02 <__ssrefill_r>:
 800bf02:	b510      	push	{r4, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf08:	b169      	cbz	r1, 800bf26 <__ssrefill_r+0x24>
 800bf0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf0e:	4299      	cmp	r1, r3
 800bf10:	d001      	beq.n	800bf16 <__ssrefill_r+0x14>
 800bf12:	f7ff fd7d 	bl	800ba10 <_free_r>
 800bf16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	2000      	movs	r0, #0
 800bf1c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf1e:	b113      	cbz	r3, 800bf26 <__ssrefill_r+0x24>
 800bf20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6063      	str	r3, [r4, #4]
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	f043 0320 	orr.w	r3, r3, #32
 800bf34:	81a3      	strh	r3, [r4, #12]
 800bf36:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3a:	e7f3      	b.n	800bf24 <__ssrefill_r+0x22>

0800bf3c <__ssvfiscanf_r>:
 800bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	460c      	mov	r4, r1
 800bf42:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf46:	2100      	movs	r1, #0
 800bf48:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf4c:	49a6      	ldr	r1, [pc, #664]	; (800c1e8 <__ssvfiscanf_r+0x2ac>)
 800bf4e:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf50:	f10d 0804 	add.w	r8, sp, #4
 800bf54:	49a5      	ldr	r1, [pc, #660]	; (800c1ec <__ssvfiscanf_r+0x2b0>)
 800bf56:	4fa6      	ldr	r7, [pc, #664]	; (800c1f0 <__ssvfiscanf_r+0x2b4>)
 800bf58:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c1f4 <__ssvfiscanf_r+0x2b8>
 800bf5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf60:	4606      	mov	r6, r0
 800bf62:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	7813      	ldrb	r3, [r2, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 815a 	beq.w	800c222 <__ssvfiscanf_r+0x2e6>
 800bf6e:	5dd9      	ldrb	r1, [r3, r7]
 800bf70:	f011 0108 	ands.w	r1, r1, #8
 800bf74:	f102 0501 	add.w	r5, r2, #1
 800bf78:	d019      	beq.n	800bfae <__ssvfiscanf_r+0x72>
 800bf7a:	6863      	ldr	r3, [r4, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd0f      	ble.n	800bfa0 <__ssvfiscanf_r+0x64>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	781a      	ldrb	r2, [r3, #0]
 800bf84:	5cba      	ldrb	r2, [r7, r2]
 800bf86:	0712      	lsls	r2, r2, #28
 800bf88:	d401      	bmi.n	800bf8e <__ssvfiscanf_r+0x52>
 800bf8a:	462a      	mov	r2, r5
 800bf8c:	e7eb      	b.n	800bf66 <__ssvfiscanf_r+0x2a>
 800bf8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf90:	3201      	adds	r2, #1
 800bf92:	9245      	str	r2, [sp, #276]	; 0x114
 800bf94:	6862      	ldr	r2, [r4, #4]
 800bf96:	3301      	adds	r3, #1
 800bf98:	3a01      	subs	r2, #1
 800bf9a:	6062      	str	r2, [r4, #4]
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	e7ec      	b.n	800bf7a <__ssvfiscanf_r+0x3e>
 800bfa0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	4798      	blx	r3
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0e9      	beq.n	800bf80 <__ssvfiscanf_r+0x44>
 800bfac:	e7ed      	b.n	800bf8a <__ssvfiscanf_r+0x4e>
 800bfae:	2b25      	cmp	r3, #37	; 0x25
 800bfb0:	d012      	beq.n	800bfd8 <__ssvfiscanf_r+0x9c>
 800bfb2:	469a      	mov	sl, r3
 800bfb4:	6863      	ldr	r3, [r4, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f340 8091 	ble.w	800c0de <__ssvfiscanf_r+0x1a2>
 800bfbc:	6822      	ldr	r2, [r4, #0]
 800bfbe:	7813      	ldrb	r3, [r2, #0]
 800bfc0:	4553      	cmp	r3, sl
 800bfc2:	f040 812e 	bne.w	800c222 <__ssvfiscanf_r+0x2e6>
 800bfc6:	6863      	ldr	r3, [r4, #4]
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bfce:	3201      	adds	r2, #1
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	6022      	str	r2, [r4, #0]
 800bfd4:	9345      	str	r3, [sp, #276]	; 0x114
 800bfd6:	e7d8      	b.n	800bf8a <__ssvfiscanf_r+0x4e>
 800bfd8:	9141      	str	r1, [sp, #260]	; 0x104
 800bfda:	9143      	str	r1, [sp, #268]	; 0x10c
 800bfdc:	7853      	ldrb	r3, [r2, #1]
 800bfde:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe0:	bf02      	ittt	eq
 800bfe2:	2310      	moveq	r3, #16
 800bfe4:	1c95      	addeq	r5, r2, #2
 800bfe6:	9341      	streq	r3, [sp, #260]	; 0x104
 800bfe8:	220a      	movs	r2, #10
 800bfea:	46aa      	mov	sl, r5
 800bfec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bff0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bff4:	2b09      	cmp	r3, #9
 800bff6:	d91d      	bls.n	800c034 <__ssvfiscanf_r+0xf8>
 800bff8:	487e      	ldr	r0, [pc, #504]	; (800c1f4 <__ssvfiscanf_r+0x2b8>)
 800bffa:	2203      	movs	r2, #3
 800bffc:	f7f4 f908 	bl	8000210 <memchr>
 800c000:	b140      	cbz	r0, 800c014 <__ssvfiscanf_r+0xd8>
 800c002:	2301      	movs	r3, #1
 800c004:	eba0 0009 	sub.w	r0, r0, r9
 800c008:	fa03 f000 	lsl.w	r0, r3, r0
 800c00c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c00e:	4318      	orrs	r0, r3
 800c010:	9041      	str	r0, [sp, #260]	; 0x104
 800c012:	4655      	mov	r5, sl
 800c014:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c018:	2b78      	cmp	r3, #120	; 0x78
 800c01a:	d806      	bhi.n	800c02a <__ssvfiscanf_r+0xee>
 800c01c:	2b57      	cmp	r3, #87	; 0x57
 800c01e:	d810      	bhi.n	800c042 <__ssvfiscanf_r+0x106>
 800c020:	2b25      	cmp	r3, #37	; 0x25
 800c022:	d0c6      	beq.n	800bfb2 <__ssvfiscanf_r+0x76>
 800c024:	d856      	bhi.n	800c0d4 <__ssvfiscanf_r+0x198>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d064      	beq.n	800c0f4 <__ssvfiscanf_r+0x1b8>
 800c02a:	2303      	movs	r3, #3
 800c02c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c02e:	230a      	movs	r3, #10
 800c030:	9342      	str	r3, [sp, #264]	; 0x108
 800c032:	e071      	b.n	800c118 <__ssvfiscanf_r+0x1dc>
 800c034:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c036:	fb02 1103 	mla	r1, r2, r3, r1
 800c03a:	3930      	subs	r1, #48	; 0x30
 800c03c:	9143      	str	r1, [sp, #268]	; 0x10c
 800c03e:	4655      	mov	r5, sl
 800c040:	e7d3      	b.n	800bfea <__ssvfiscanf_r+0xae>
 800c042:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c046:	2a20      	cmp	r2, #32
 800c048:	d8ef      	bhi.n	800c02a <__ssvfiscanf_r+0xee>
 800c04a:	a101      	add	r1, pc, #4	; (adr r1, 800c050 <__ssvfiscanf_r+0x114>)
 800c04c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c050:	0800c103 	.word	0x0800c103
 800c054:	0800c02b 	.word	0x0800c02b
 800c058:	0800c02b 	.word	0x0800c02b
 800c05c:	0800c161 	.word	0x0800c161
 800c060:	0800c02b 	.word	0x0800c02b
 800c064:	0800c02b 	.word	0x0800c02b
 800c068:	0800c02b 	.word	0x0800c02b
 800c06c:	0800c02b 	.word	0x0800c02b
 800c070:	0800c02b 	.word	0x0800c02b
 800c074:	0800c02b 	.word	0x0800c02b
 800c078:	0800c02b 	.word	0x0800c02b
 800c07c:	0800c177 	.word	0x0800c177
 800c080:	0800c14d 	.word	0x0800c14d
 800c084:	0800c0db 	.word	0x0800c0db
 800c088:	0800c0db 	.word	0x0800c0db
 800c08c:	0800c0db 	.word	0x0800c0db
 800c090:	0800c02b 	.word	0x0800c02b
 800c094:	0800c151 	.word	0x0800c151
 800c098:	0800c02b 	.word	0x0800c02b
 800c09c:	0800c02b 	.word	0x0800c02b
 800c0a0:	0800c02b 	.word	0x0800c02b
 800c0a4:	0800c02b 	.word	0x0800c02b
 800c0a8:	0800c187 	.word	0x0800c187
 800c0ac:	0800c159 	.word	0x0800c159
 800c0b0:	0800c0fb 	.word	0x0800c0fb
 800c0b4:	0800c02b 	.word	0x0800c02b
 800c0b8:	0800c02b 	.word	0x0800c02b
 800c0bc:	0800c183 	.word	0x0800c183
 800c0c0:	0800c02b 	.word	0x0800c02b
 800c0c4:	0800c14d 	.word	0x0800c14d
 800c0c8:	0800c02b 	.word	0x0800c02b
 800c0cc:	0800c02b 	.word	0x0800c02b
 800c0d0:	0800c103 	.word	0x0800c103
 800c0d4:	3b45      	subs	r3, #69	; 0x45
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d8a7      	bhi.n	800c02a <__ssvfiscanf_r+0xee>
 800c0da:	2305      	movs	r3, #5
 800c0dc:	e01b      	b.n	800c116 <__ssvfiscanf_r+0x1da>
 800c0de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	4798      	blx	r3
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	f43f af68 	beq.w	800bfbc <__ssvfiscanf_r+0x80>
 800c0ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f040 808d 	bne.w	800c20e <__ssvfiscanf_r+0x2d2>
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e08f      	b.n	800c21a <__ssvfiscanf_r+0x2de>
 800c0fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c0fc:	f042 0220 	orr.w	r2, r2, #32
 800c100:	9241      	str	r2, [sp, #260]	; 0x104
 800c102:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c108:	9241      	str	r2, [sp, #260]	; 0x104
 800c10a:	2210      	movs	r2, #16
 800c10c:	2b6f      	cmp	r3, #111	; 0x6f
 800c10e:	9242      	str	r2, [sp, #264]	; 0x108
 800c110:	bf34      	ite	cc
 800c112:	2303      	movcc	r3, #3
 800c114:	2304      	movcs	r3, #4
 800c116:	9347      	str	r3, [sp, #284]	; 0x11c
 800c118:	6863      	ldr	r3, [r4, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dd42      	ble.n	800c1a4 <__ssvfiscanf_r+0x268>
 800c11e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c120:	0659      	lsls	r1, r3, #25
 800c122:	d404      	bmi.n	800c12e <__ssvfiscanf_r+0x1f2>
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	781a      	ldrb	r2, [r3, #0]
 800c128:	5cba      	ldrb	r2, [r7, r2]
 800c12a:	0712      	lsls	r2, r2, #28
 800c12c:	d441      	bmi.n	800c1b2 <__ssvfiscanf_r+0x276>
 800c12e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c130:	2b02      	cmp	r3, #2
 800c132:	dc50      	bgt.n	800c1d6 <__ssvfiscanf_r+0x29a>
 800c134:	466b      	mov	r3, sp
 800c136:	4622      	mov	r2, r4
 800c138:	a941      	add	r1, sp, #260	; 0x104
 800c13a:	4630      	mov	r0, r6
 800c13c:	f000 fb64 	bl	800c808 <_scanf_chars>
 800c140:	2801      	cmp	r0, #1
 800c142:	d06e      	beq.n	800c222 <__ssvfiscanf_r+0x2e6>
 800c144:	2802      	cmp	r0, #2
 800c146:	f47f af20 	bne.w	800bf8a <__ssvfiscanf_r+0x4e>
 800c14a:	e7cf      	b.n	800c0ec <__ssvfiscanf_r+0x1b0>
 800c14c:	220a      	movs	r2, #10
 800c14e:	e7dd      	b.n	800c10c <__ssvfiscanf_r+0x1d0>
 800c150:	2300      	movs	r3, #0
 800c152:	9342      	str	r3, [sp, #264]	; 0x108
 800c154:	2303      	movs	r3, #3
 800c156:	e7de      	b.n	800c116 <__ssvfiscanf_r+0x1da>
 800c158:	2308      	movs	r3, #8
 800c15a:	9342      	str	r3, [sp, #264]	; 0x108
 800c15c:	2304      	movs	r3, #4
 800c15e:	e7da      	b.n	800c116 <__ssvfiscanf_r+0x1da>
 800c160:	4629      	mov	r1, r5
 800c162:	4640      	mov	r0, r8
 800c164:	f000 fcc4 	bl	800caf0 <__sccl>
 800c168:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c16e:	9341      	str	r3, [sp, #260]	; 0x104
 800c170:	4605      	mov	r5, r0
 800c172:	2301      	movs	r3, #1
 800c174:	e7cf      	b.n	800c116 <__ssvfiscanf_r+0x1da>
 800c176:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c17c:	9341      	str	r3, [sp, #260]	; 0x104
 800c17e:	2300      	movs	r3, #0
 800c180:	e7c9      	b.n	800c116 <__ssvfiscanf_r+0x1da>
 800c182:	2302      	movs	r3, #2
 800c184:	e7c7      	b.n	800c116 <__ssvfiscanf_r+0x1da>
 800c186:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c188:	06c3      	lsls	r3, r0, #27
 800c18a:	f53f aefe 	bmi.w	800bf8a <__ssvfiscanf_r+0x4e>
 800c18e:	9b00      	ldr	r3, [sp, #0]
 800c190:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c192:	1d19      	adds	r1, r3, #4
 800c194:	9100      	str	r1, [sp, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f010 0f01 	tst.w	r0, #1
 800c19c:	bf14      	ite	ne
 800c19e:	801a      	strhne	r2, [r3, #0]
 800c1a0:	601a      	streq	r2, [r3, #0]
 800c1a2:	e6f2      	b.n	800bf8a <__ssvfiscanf_r+0x4e>
 800c1a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	4798      	blx	r3
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d0b6      	beq.n	800c11e <__ssvfiscanf_r+0x1e2>
 800c1b0:	e79c      	b.n	800c0ec <__ssvfiscanf_r+0x1b0>
 800c1b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1b4:	3201      	adds	r2, #1
 800c1b6:	9245      	str	r2, [sp, #276]	; 0x114
 800c1b8:	6862      	ldr	r2, [r4, #4]
 800c1ba:	3a01      	subs	r2, #1
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	6062      	str	r2, [r4, #4]
 800c1c0:	dd02      	ble.n	800c1c8 <__ssvfiscanf_r+0x28c>
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	e7ad      	b.n	800c124 <__ssvfiscanf_r+0x1e8>
 800c1c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4798      	blx	r3
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	d0a7      	beq.n	800c124 <__ssvfiscanf_r+0x1e8>
 800c1d4:	e78a      	b.n	800c0ec <__ssvfiscanf_r+0x1b0>
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	dc0e      	bgt.n	800c1f8 <__ssvfiscanf_r+0x2bc>
 800c1da:	466b      	mov	r3, sp
 800c1dc:	4622      	mov	r2, r4
 800c1de:	a941      	add	r1, sp, #260	; 0x104
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f000 fb6b 	bl	800c8bc <_scanf_i>
 800c1e6:	e7ab      	b.n	800c140 <__ssvfiscanf_r+0x204>
 800c1e8:	0800be89 	.word	0x0800be89
 800c1ec:	0800bf03 	.word	0x0800bf03
 800c1f0:	0800ff8f 	.word	0x0800ff8f
 800c1f4:	0800ff46 	.word	0x0800ff46
 800c1f8:	4b0b      	ldr	r3, [pc, #44]	; (800c228 <__ssvfiscanf_r+0x2ec>)
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f43f aec5 	beq.w	800bf8a <__ssvfiscanf_r+0x4e>
 800c200:	466b      	mov	r3, sp
 800c202:	4622      	mov	r2, r4
 800c204:	a941      	add	r1, sp, #260	; 0x104
 800c206:	4630      	mov	r0, r6
 800c208:	f3af 8000 	nop.w
 800c20c:	e798      	b.n	800c140 <__ssvfiscanf_r+0x204>
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c214:	bf18      	it	ne
 800c216:	f04f 30ff 	movne.w	r0, #4294967295
 800c21a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c222:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c224:	e7f9      	b.n	800c21a <__ssvfiscanf_r+0x2de>
 800c226:	bf00      	nop
 800c228:	00000000 	.word	0x00000000

0800c22c <__sfputc_r>:
 800c22c:	6893      	ldr	r3, [r2, #8]
 800c22e:	3b01      	subs	r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	b410      	push	{r4}
 800c234:	6093      	str	r3, [r2, #8]
 800c236:	da08      	bge.n	800c24a <__sfputc_r+0x1e>
 800c238:	6994      	ldr	r4, [r2, #24]
 800c23a:	42a3      	cmp	r3, r4
 800c23c:	db01      	blt.n	800c242 <__sfputc_r+0x16>
 800c23e:	290a      	cmp	r1, #10
 800c240:	d103      	bne.n	800c24a <__sfputc_r+0x1e>
 800c242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c246:	f7ff b8cf 	b.w	800b3e8 <__swbuf_r>
 800c24a:	6813      	ldr	r3, [r2, #0]
 800c24c:	1c58      	adds	r0, r3, #1
 800c24e:	6010      	str	r0, [r2, #0]
 800c250:	7019      	strb	r1, [r3, #0]
 800c252:	4608      	mov	r0, r1
 800c254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <__sfputs_r>:
 800c25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	4614      	mov	r4, r2
 800c262:	18d5      	adds	r5, r2, r3
 800c264:	42ac      	cmp	r4, r5
 800c266:	d101      	bne.n	800c26c <__sfputs_r+0x12>
 800c268:	2000      	movs	r0, #0
 800c26a:	e007      	b.n	800c27c <__sfputs_r+0x22>
 800c26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c270:	463a      	mov	r2, r7
 800c272:	4630      	mov	r0, r6
 800c274:	f7ff ffda 	bl	800c22c <__sfputc_r>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d1f3      	bne.n	800c264 <__sfputs_r+0xa>
 800c27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c280 <_vfiprintf_r>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	460d      	mov	r5, r1
 800c286:	b09d      	sub	sp, #116	; 0x74
 800c288:	4614      	mov	r4, r2
 800c28a:	4698      	mov	r8, r3
 800c28c:	4606      	mov	r6, r0
 800c28e:	b118      	cbz	r0, 800c298 <_vfiprintf_r+0x18>
 800c290:	6983      	ldr	r3, [r0, #24]
 800c292:	b90b      	cbnz	r3, 800c298 <_vfiprintf_r+0x18>
 800c294:	f7ff faa4 	bl	800b7e0 <__sinit>
 800c298:	4b89      	ldr	r3, [pc, #548]	; (800c4c0 <_vfiprintf_r+0x240>)
 800c29a:	429d      	cmp	r5, r3
 800c29c:	d11b      	bne.n	800c2d6 <_vfiprintf_r+0x56>
 800c29e:	6875      	ldr	r5, [r6, #4]
 800c2a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a2:	07d9      	lsls	r1, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <_vfiprintf_r+0x32>
 800c2a6:	89ab      	ldrh	r3, [r5, #12]
 800c2a8:	059a      	lsls	r2, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_vfiprintf_r+0x32>
 800c2ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ae:	f7ff fb35 	bl	800b91c <__retarget_lock_acquire_recursive>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	071b      	lsls	r3, r3, #28
 800c2b6:	d501      	bpl.n	800c2bc <_vfiprintf_r+0x3c>
 800c2b8:	692b      	ldr	r3, [r5, #16]
 800c2ba:	b9eb      	cbnz	r3, 800c2f8 <_vfiprintf_r+0x78>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f7ff f8f6 	bl	800b4b0 <__swsetup_r>
 800c2c4:	b1c0      	cbz	r0, 800c2f8 <_vfiprintf_r+0x78>
 800c2c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2c8:	07dc      	lsls	r4, r3, #31
 800c2ca:	d50e      	bpl.n	800c2ea <_vfiprintf_r+0x6a>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	b01d      	add	sp, #116	; 0x74
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	4b7b      	ldr	r3, [pc, #492]	; (800c4c4 <_vfiprintf_r+0x244>)
 800c2d8:	429d      	cmp	r5, r3
 800c2da:	d101      	bne.n	800c2e0 <_vfiprintf_r+0x60>
 800c2dc:	68b5      	ldr	r5, [r6, #8]
 800c2de:	e7df      	b.n	800c2a0 <_vfiprintf_r+0x20>
 800c2e0:	4b79      	ldr	r3, [pc, #484]	; (800c4c8 <_vfiprintf_r+0x248>)
 800c2e2:	429d      	cmp	r5, r3
 800c2e4:	bf08      	it	eq
 800c2e6:	68f5      	ldreq	r5, [r6, #12]
 800c2e8:	e7da      	b.n	800c2a0 <_vfiprintf_r+0x20>
 800c2ea:	89ab      	ldrh	r3, [r5, #12]
 800c2ec:	0598      	lsls	r0, r3, #22
 800c2ee:	d4ed      	bmi.n	800c2cc <_vfiprintf_r+0x4c>
 800c2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2f2:	f7ff fb14 	bl	800b91e <__retarget_lock_release_recursive>
 800c2f6:	e7e9      	b.n	800c2cc <_vfiprintf_r+0x4c>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	2320      	movs	r3, #32
 800c2fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c302:	f8cd 800c 	str.w	r8, [sp, #12]
 800c306:	2330      	movs	r3, #48	; 0x30
 800c308:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4cc <_vfiprintf_r+0x24c>
 800c30c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c310:	f04f 0901 	mov.w	r9, #1
 800c314:	4623      	mov	r3, r4
 800c316:	469a      	mov	sl, r3
 800c318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c31c:	b10a      	cbz	r2, 800c322 <_vfiprintf_r+0xa2>
 800c31e:	2a25      	cmp	r2, #37	; 0x25
 800c320:	d1f9      	bne.n	800c316 <_vfiprintf_r+0x96>
 800c322:	ebba 0b04 	subs.w	fp, sl, r4
 800c326:	d00b      	beq.n	800c340 <_vfiprintf_r+0xc0>
 800c328:	465b      	mov	r3, fp
 800c32a:	4622      	mov	r2, r4
 800c32c:	4629      	mov	r1, r5
 800c32e:	4630      	mov	r0, r6
 800c330:	f7ff ff93 	bl	800c25a <__sfputs_r>
 800c334:	3001      	adds	r0, #1
 800c336:	f000 80aa 	beq.w	800c48e <_vfiprintf_r+0x20e>
 800c33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c33c:	445a      	add	r2, fp
 800c33e:	9209      	str	r2, [sp, #36]	; 0x24
 800c340:	f89a 3000 	ldrb.w	r3, [sl]
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 80a2 	beq.w	800c48e <_vfiprintf_r+0x20e>
 800c34a:	2300      	movs	r3, #0
 800c34c:	f04f 32ff 	mov.w	r2, #4294967295
 800c350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c354:	f10a 0a01 	add.w	sl, sl, #1
 800c358:	9304      	str	r3, [sp, #16]
 800c35a:	9307      	str	r3, [sp, #28]
 800c35c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c360:	931a      	str	r3, [sp, #104]	; 0x68
 800c362:	4654      	mov	r4, sl
 800c364:	2205      	movs	r2, #5
 800c366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36a:	4858      	ldr	r0, [pc, #352]	; (800c4cc <_vfiprintf_r+0x24c>)
 800c36c:	f7f3 ff50 	bl	8000210 <memchr>
 800c370:	9a04      	ldr	r2, [sp, #16]
 800c372:	b9d8      	cbnz	r0, 800c3ac <_vfiprintf_r+0x12c>
 800c374:	06d1      	lsls	r1, r2, #27
 800c376:	bf44      	itt	mi
 800c378:	2320      	movmi	r3, #32
 800c37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c37e:	0713      	lsls	r3, r2, #28
 800c380:	bf44      	itt	mi
 800c382:	232b      	movmi	r3, #43	; 0x2b
 800c384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c388:	f89a 3000 	ldrb.w	r3, [sl]
 800c38c:	2b2a      	cmp	r3, #42	; 0x2a
 800c38e:	d015      	beq.n	800c3bc <_vfiprintf_r+0x13c>
 800c390:	9a07      	ldr	r2, [sp, #28]
 800c392:	4654      	mov	r4, sl
 800c394:	2000      	movs	r0, #0
 800c396:	f04f 0c0a 	mov.w	ip, #10
 800c39a:	4621      	mov	r1, r4
 800c39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3a0:	3b30      	subs	r3, #48	; 0x30
 800c3a2:	2b09      	cmp	r3, #9
 800c3a4:	d94e      	bls.n	800c444 <_vfiprintf_r+0x1c4>
 800c3a6:	b1b0      	cbz	r0, 800c3d6 <_vfiprintf_r+0x156>
 800c3a8:	9207      	str	r2, [sp, #28]
 800c3aa:	e014      	b.n	800c3d6 <_vfiprintf_r+0x156>
 800c3ac:	eba0 0308 	sub.w	r3, r0, r8
 800c3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	46a2      	mov	sl, r4
 800c3ba:	e7d2      	b.n	800c362 <_vfiprintf_r+0xe2>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	1d19      	adds	r1, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9103      	str	r1, [sp, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	bfbb      	ittet	lt
 800c3c8:	425b      	neglt	r3, r3
 800c3ca:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ce:	9307      	strge	r3, [sp, #28]
 800c3d0:	9307      	strlt	r3, [sp, #28]
 800c3d2:	bfb8      	it	lt
 800c3d4:	9204      	strlt	r2, [sp, #16]
 800c3d6:	7823      	ldrb	r3, [r4, #0]
 800c3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3da:	d10c      	bne.n	800c3f6 <_vfiprintf_r+0x176>
 800c3dc:	7863      	ldrb	r3, [r4, #1]
 800c3de:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e0:	d135      	bne.n	800c44e <_vfiprintf_r+0x1ce>
 800c3e2:	9b03      	ldr	r3, [sp, #12]
 800c3e4:	1d1a      	adds	r2, r3, #4
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	9203      	str	r2, [sp, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfb8      	it	lt
 800c3ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3f2:	3402      	adds	r4, #2
 800c3f4:	9305      	str	r3, [sp, #20]
 800c3f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4dc <_vfiprintf_r+0x25c>
 800c3fa:	7821      	ldrb	r1, [r4, #0]
 800c3fc:	2203      	movs	r2, #3
 800c3fe:	4650      	mov	r0, sl
 800c400:	f7f3 ff06 	bl	8000210 <memchr>
 800c404:	b140      	cbz	r0, 800c418 <_vfiprintf_r+0x198>
 800c406:	2340      	movs	r3, #64	; 0x40
 800c408:	eba0 000a 	sub.w	r0, r0, sl
 800c40c:	fa03 f000 	lsl.w	r0, r3, r0
 800c410:	9b04      	ldr	r3, [sp, #16]
 800c412:	4303      	orrs	r3, r0
 800c414:	3401      	adds	r4, #1
 800c416:	9304      	str	r3, [sp, #16]
 800c418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c41c:	482c      	ldr	r0, [pc, #176]	; (800c4d0 <_vfiprintf_r+0x250>)
 800c41e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c422:	2206      	movs	r2, #6
 800c424:	f7f3 fef4 	bl	8000210 <memchr>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d03f      	beq.n	800c4ac <_vfiprintf_r+0x22c>
 800c42c:	4b29      	ldr	r3, [pc, #164]	; (800c4d4 <_vfiprintf_r+0x254>)
 800c42e:	bb1b      	cbnz	r3, 800c478 <_vfiprintf_r+0x1f8>
 800c430:	9b03      	ldr	r3, [sp, #12]
 800c432:	3307      	adds	r3, #7
 800c434:	f023 0307 	bic.w	r3, r3, #7
 800c438:	3308      	adds	r3, #8
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43e:	443b      	add	r3, r7
 800c440:	9309      	str	r3, [sp, #36]	; 0x24
 800c442:	e767      	b.n	800c314 <_vfiprintf_r+0x94>
 800c444:	fb0c 3202 	mla	r2, ip, r2, r3
 800c448:	460c      	mov	r4, r1
 800c44a:	2001      	movs	r0, #1
 800c44c:	e7a5      	b.n	800c39a <_vfiprintf_r+0x11a>
 800c44e:	2300      	movs	r3, #0
 800c450:	3401      	adds	r4, #1
 800c452:	9305      	str	r3, [sp, #20]
 800c454:	4619      	mov	r1, r3
 800c456:	f04f 0c0a 	mov.w	ip, #10
 800c45a:	4620      	mov	r0, r4
 800c45c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c460:	3a30      	subs	r2, #48	; 0x30
 800c462:	2a09      	cmp	r2, #9
 800c464:	d903      	bls.n	800c46e <_vfiprintf_r+0x1ee>
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0c5      	beq.n	800c3f6 <_vfiprintf_r+0x176>
 800c46a:	9105      	str	r1, [sp, #20]
 800c46c:	e7c3      	b.n	800c3f6 <_vfiprintf_r+0x176>
 800c46e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c472:	4604      	mov	r4, r0
 800c474:	2301      	movs	r3, #1
 800c476:	e7f0      	b.n	800c45a <_vfiprintf_r+0x1da>
 800c478:	ab03      	add	r3, sp, #12
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	462a      	mov	r2, r5
 800c47e:	4b16      	ldr	r3, [pc, #88]	; (800c4d8 <_vfiprintf_r+0x258>)
 800c480:	a904      	add	r1, sp, #16
 800c482:	4630      	mov	r0, r6
 800c484:	f3af 8000 	nop.w
 800c488:	4607      	mov	r7, r0
 800c48a:	1c78      	adds	r0, r7, #1
 800c48c:	d1d6      	bne.n	800c43c <_vfiprintf_r+0x1bc>
 800c48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c490:	07d9      	lsls	r1, r3, #31
 800c492:	d405      	bmi.n	800c4a0 <_vfiprintf_r+0x220>
 800c494:	89ab      	ldrh	r3, [r5, #12]
 800c496:	059a      	lsls	r2, r3, #22
 800c498:	d402      	bmi.n	800c4a0 <_vfiprintf_r+0x220>
 800c49a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c49c:	f7ff fa3f 	bl	800b91e <__retarget_lock_release_recursive>
 800c4a0:	89ab      	ldrh	r3, [r5, #12]
 800c4a2:	065b      	lsls	r3, r3, #25
 800c4a4:	f53f af12 	bmi.w	800c2cc <_vfiprintf_r+0x4c>
 800c4a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4aa:	e711      	b.n	800c2d0 <_vfiprintf_r+0x50>
 800c4ac:	ab03      	add	r3, sp, #12
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	4b09      	ldr	r3, [pc, #36]	; (800c4d8 <_vfiprintf_r+0x258>)
 800c4b4:	a904      	add	r1, sp, #16
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f000 f880 	bl	800c5bc <_printf_i>
 800c4bc:	e7e4      	b.n	800c488 <_vfiprintf_r+0x208>
 800c4be:	bf00      	nop
 800c4c0:	0800ff00 	.word	0x0800ff00
 800c4c4:	0800ff20 	.word	0x0800ff20
 800c4c8:	0800fee0 	.word	0x0800fee0
 800c4cc:	0800ff40 	.word	0x0800ff40
 800c4d0:	0800ff4a 	.word	0x0800ff4a
 800c4d4:	00000000 	.word	0x00000000
 800c4d8:	0800c25b 	.word	0x0800c25b
 800c4dc:	0800ff46 	.word	0x0800ff46

0800c4e0 <_printf_common>:
 800c4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e4:	4616      	mov	r6, r2
 800c4e6:	4699      	mov	r9, r3
 800c4e8:	688a      	ldr	r2, [r1, #8]
 800c4ea:	690b      	ldr	r3, [r1, #16]
 800c4ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	bfb8      	it	lt
 800c4f4:	4613      	movlt	r3, r2
 800c4f6:	6033      	str	r3, [r6, #0]
 800c4f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4fc:	4607      	mov	r7, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	b10a      	cbz	r2, 800c506 <_printf_common+0x26>
 800c502:	3301      	adds	r3, #1
 800c504:	6033      	str	r3, [r6, #0]
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	0699      	lsls	r1, r3, #26
 800c50a:	bf42      	ittt	mi
 800c50c:	6833      	ldrmi	r3, [r6, #0]
 800c50e:	3302      	addmi	r3, #2
 800c510:	6033      	strmi	r3, [r6, #0]
 800c512:	6825      	ldr	r5, [r4, #0]
 800c514:	f015 0506 	ands.w	r5, r5, #6
 800c518:	d106      	bne.n	800c528 <_printf_common+0x48>
 800c51a:	f104 0a19 	add.w	sl, r4, #25
 800c51e:	68e3      	ldr	r3, [r4, #12]
 800c520:	6832      	ldr	r2, [r6, #0]
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	42ab      	cmp	r3, r5
 800c526:	dc26      	bgt.n	800c576 <_printf_common+0x96>
 800c528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c52c:	1e13      	subs	r3, r2, #0
 800c52e:	6822      	ldr	r2, [r4, #0]
 800c530:	bf18      	it	ne
 800c532:	2301      	movne	r3, #1
 800c534:	0692      	lsls	r2, r2, #26
 800c536:	d42b      	bmi.n	800c590 <_printf_common+0xb0>
 800c538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c53c:	4649      	mov	r1, r9
 800c53e:	4638      	mov	r0, r7
 800c540:	47c0      	blx	r8
 800c542:	3001      	adds	r0, #1
 800c544:	d01e      	beq.n	800c584 <_printf_common+0xa4>
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	68e5      	ldr	r5, [r4, #12]
 800c54a:	6832      	ldr	r2, [r6, #0]
 800c54c:	f003 0306 	and.w	r3, r3, #6
 800c550:	2b04      	cmp	r3, #4
 800c552:	bf08      	it	eq
 800c554:	1aad      	subeq	r5, r5, r2
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	6922      	ldr	r2, [r4, #16]
 800c55a:	bf0c      	ite	eq
 800c55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c560:	2500      	movne	r5, #0
 800c562:	4293      	cmp	r3, r2
 800c564:	bfc4      	itt	gt
 800c566:	1a9b      	subgt	r3, r3, r2
 800c568:	18ed      	addgt	r5, r5, r3
 800c56a:	2600      	movs	r6, #0
 800c56c:	341a      	adds	r4, #26
 800c56e:	42b5      	cmp	r5, r6
 800c570:	d11a      	bne.n	800c5a8 <_printf_common+0xc8>
 800c572:	2000      	movs	r0, #0
 800c574:	e008      	b.n	800c588 <_printf_common+0xa8>
 800c576:	2301      	movs	r3, #1
 800c578:	4652      	mov	r2, sl
 800c57a:	4649      	mov	r1, r9
 800c57c:	4638      	mov	r0, r7
 800c57e:	47c0      	blx	r8
 800c580:	3001      	adds	r0, #1
 800c582:	d103      	bne.n	800c58c <_printf_common+0xac>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58c:	3501      	adds	r5, #1
 800c58e:	e7c6      	b.n	800c51e <_printf_common+0x3e>
 800c590:	18e1      	adds	r1, r4, r3
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	2030      	movs	r0, #48	; 0x30
 800c596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c59a:	4422      	add	r2, r4
 800c59c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5a4:	3302      	adds	r3, #2
 800c5a6:	e7c7      	b.n	800c538 <_printf_common+0x58>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	4649      	mov	r1, r9
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	47c0      	blx	r8
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	d0e6      	beq.n	800c584 <_printf_common+0xa4>
 800c5b6:	3601      	adds	r6, #1
 800c5b8:	e7d9      	b.n	800c56e <_printf_common+0x8e>
	...

0800c5bc <_printf_i>:
 800c5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	7e0f      	ldrb	r7, [r1, #24]
 800c5c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5c4:	2f78      	cmp	r7, #120	; 0x78
 800c5c6:	4691      	mov	r9, r2
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	469a      	mov	sl, r3
 800c5ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5d2:	d807      	bhi.n	800c5e4 <_printf_i+0x28>
 800c5d4:	2f62      	cmp	r7, #98	; 0x62
 800c5d6:	d80a      	bhi.n	800c5ee <_printf_i+0x32>
 800c5d8:	2f00      	cmp	r7, #0
 800c5da:	f000 80d8 	beq.w	800c78e <_printf_i+0x1d2>
 800c5de:	2f58      	cmp	r7, #88	; 0x58
 800c5e0:	f000 80a3 	beq.w	800c72a <_printf_i+0x16e>
 800c5e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5ec:	e03a      	b.n	800c664 <_printf_i+0xa8>
 800c5ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5f2:	2b15      	cmp	r3, #21
 800c5f4:	d8f6      	bhi.n	800c5e4 <_printf_i+0x28>
 800c5f6:	a101      	add	r1, pc, #4	; (adr r1, 800c5fc <_printf_i+0x40>)
 800c5f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5fc:	0800c655 	.word	0x0800c655
 800c600:	0800c669 	.word	0x0800c669
 800c604:	0800c5e5 	.word	0x0800c5e5
 800c608:	0800c5e5 	.word	0x0800c5e5
 800c60c:	0800c5e5 	.word	0x0800c5e5
 800c610:	0800c5e5 	.word	0x0800c5e5
 800c614:	0800c669 	.word	0x0800c669
 800c618:	0800c5e5 	.word	0x0800c5e5
 800c61c:	0800c5e5 	.word	0x0800c5e5
 800c620:	0800c5e5 	.word	0x0800c5e5
 800c624:	0800c5e5 	.word	0x0800c5e5
 800c628:	0800c775 	.word	0x0800c775
 800c62c:	0800c699 	.word	0x0800c699
 800c630:	0800c757 	.word	0x0800c757
 800c634:	0800c5e5 	.word	0x0800c5e5
 800c638:	0800c5e5 	.word	0x0800c5e5
 800c63c:	0800c797 	.word	0x0800c797
 800c640:	0800c5e5 	.word	0x0800c5e5
 800c644:	0800c699 	.word	0x0800c699
 800c648:	0800c5e5 	.word	0x0800c5e5
 800c64c:	0800c5e5 	.word	0x0800c5e5
 800c650:	0800c75f 	.word	0x0800c75f
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	1d1a      	adds	r2, r3, #4
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	602a      	str	r2, [r5, #0]
 800c65c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c664:	2301      	movs	r3, #1
 800c666:	e0a3      	b.n	800c7b0 <_printf_i+0x1f4>
 800c668:	6820      	ldr	r0, [r4, #0]
 800c66a:	6829      	ldr	r1, [r5, #0]
 800c66c:	0606      	lsls	r6, r0, #24
 800c66e:	f101 0304 	add.w	r3, r1, #4
 800c672:	d50a      	bpl.n	800c68a <_printf_i+0xce>
 800c674:	680e      	ldr	r6, [r1, #0]
 800c676:	602b      	str	r3, [r5, #0]
 800c678:	2e00      	cmp	r6, #0
 800c67a:	da03      	bge.n	800c684 <_printf_i+0xc8>
 800c67c:	232d      	movs	r3, #45	; 0x2d
 800c67e:	4276      	negs	r6, r6
 800c680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c684:	485e      	ldr	r0, [pc, #376]	; (800c800 <_printf_i+0x244>)
 800c686:	230a      	movs	r3, #10
 800c688:	e019      	b.n	800c6be <_printf_i+0x102>
 800c68a:	680e      	ldr	r6, [r1, #0]
 800c68c:	602b      	str	r3, [r5, #0]
 800c68e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c692:	bf18      	it	ne
 800c694:	b236      	sxthne	r6, r6
 800c696:	e7ef      	b.n	800c678 <_printf_i+0xbc>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	6820      	ldr	r0, [r4, #0]
 800c69c:	1d19      	adds	r1, r3, #4
 800c69e:	6029      	str	r1, [r5, #0]
 800c6a0:	0601      	lsls	r1, r0, #24
 800c6a2:	d501      	bpl.n	800c6a8 <_printf_i+0xec>
 800c6a4:	681e      	ldr	r6, [r3, #0]
 800c6a6:	e002      	b.n	800c6ae <_printf_i+0xf2>
 800c6a8:	0646      	lsls	r6, r0, #25
 800c6aa:	d5fb      	bpl.n	800c6a4 <_printf_i+0xe8>
 800c6ac:	881e      	ldrh	r6, [r3, #0]
 800c6ae:	4854      	ldr	r0, [pc, #336]	; (800c800 <_printf_i+0x244>)
 800c6b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c6b2:	bf0c      	ite	eq
 800c6b4:	2308      	moveq	r3, #8
 800c6b6:	230a      	movne	r3, #10
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6be:	6865      	ldr	r5, [r4, #4]
 800c6c0:	60a5      	str	r5, [r4, #8]
 800c6c2:	2d00      	cmp	r5, #0
 800c6c4:	bfa2      	ittt	ge
 800c6c6:	6821      	ldrge	r1, [r4, #0]
 800c6c8:	f021 0104 	bicge.w	r1, r1, #4
 800c6cc:	6021      	strge	r1, [r4, #0]
 800c6ce:	b90e      	cbnz	r6, 800c6d4 <_printf_i+0x118>
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	d04d      	beq.n	800c770 <_printf_i+0x1b4>
 800c6d4:	4615      	mov	r5, r2
 800c6d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6da:	fb03 6711 	mls	r7, r3, r1, r6
 800c6de:	5dc7      	ldrb	r7, [r0, r7]
 800c6e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6e4:	4637      	mov	r7, r6
 800c6e6:	42bb      	cmp	r3, r7
 800c6e8:	460e      	mov	r6, r1
 800c6ea:	d9f4      	bls.n	800c6d6 <_printf_i+0x11a>
 800c6ec:	2b08      	cmp	r3, #8
 800c6ee:	d10b      	bne.n	800c708 <_printf_i+0x14c>
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	07de      	lsls	r6, r3, #31
 800c6f4:	d508      	bpl.n	800c708 <_printf_i+0x14c>
 800c6f6:	6923      	ldr	r3, [r4, #16]
 800c6f8:	6861      	ldr	r1, [r4, #4]
 800c6fa:	4299      	cmp	r1, r3
 800c6fc:	bfde      	ittt	le
 800c6fe:	2330      	movle	r3, #48	; 0x30
 800c700:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c704:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c708:	1b52      	subs	r2, r2, r5
 800c70a:	6122      	str	r2, [r4, #16]
 800c70c:	f8cd a000 	str.w	sl, [sp]
 800c710:	464b      	mov	r3, r9
 800c712:	aa03      	add	r2, sp, #12
 800c714:	4621      	mov	r1, r4
 800c716:	4640      	mov	r0, r8
 800c718:	f7ff fee2 	bl	800c4e0 <_printf_common>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d14c      	bne.n	800c7ba <_printf_i+0x1fe>
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	b004      	add	sp, #16
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72a:	4835      	ldr	r0, [pc, #212]	; (800c800 <_printf_i+0x244>)
 800c72c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c730:	6829      	ldr	r1, [r5, #0]
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	f851 6b04 	ldr.w	r6, [r1], #4
 800c738:	6029      	str	r1, [r5, #0]
 800c73a:	061d      	lsls	r5, r3, #24
 800c73c:	d514      	bpl.n	800c768 <_printf_i+0x1ac>
 800c73e:	07df      	lsls	r7, r3, #31
 800c740:	bf44      	itt	mi
 800c742:	f043 0320 	orrmi.w	r3, r3, #32
 800c746:	6023      	strmi	r3, [r4, #0]
 800c748:	b91e      	cbnz	r6, 800c752 <_printf_i+0x196>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	f023 0320 	bic.w	r3, r3, #32
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	2310      	movs	r3, #16
 800c754:	e7b0      	b.n	800c6b8 <_printf_i+0xfc>
 800c756:	6823      	ldr	r3, [r4, #0]
 800c758:	f043 0320 	orr.w	r3, r3, #32
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	2378      	movs	r3, #120	; 0x78
 800c760:	4828      	ldr	r0, [pc, #160]	; (800c804 <_printf_i+0x248>)
 800c762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c766:	e7e3      	b.n	800c730 <_printf_i+0x174>
 800c768:	0659      	lsls	r1, r3, #25
 800c76a:	bf48      	it	mi
 800c76c:	b2b6      	uxthmi	r6, r6
 800c76e:	e7e6      	b.n	800c73e <_printf_i+0x182>
 800c770:	4615      	mov	r5, r2
 800c772:	e7bb      	b.n	800c6ec <_printf_i+0x130>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	6826      	ldr	r6, [r4, #0]
 800c778:	6961      	ldr	r1, [r4, #20]
 800c77a:	1d18      	adds	r0, r3, #4
 800c77c:	6028      	str	r0, [r5, #0]
 800c77e:	0635      	lsls	r5, r6, #24
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	d501      	bpl.n	800c788 <_printf_i+0x1cc>
 800c784:	6019      	str	r1, [r3, #0]
 800c786:	e002      	b.n	800c78e <_printf_i+0x1d2>
 800c788:	0670      	lsls	r0, r6, #25
 800c78a:	d5fb      	bpl.n	800c784 <_printf_i+0x1c8>
 800c78c:	8019      	strh	r1, [r3, #0]
 800c78e:	2300      	movs	r3, #0
 800c790:	6123      	str	r3, [r4, #16]
 800c792:	4615      	mov	r5, r2
 800c794:	e7ba      	b.n	800c70c <_printf_i+0x150>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	1d1a      	adds	r2, r3, #4
 800c79a:	602a      	str	r2, [r5, #0]
 800c79c:	681d      	ldr	r5, [r3, #0]
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7f3 fd34 	bl	8000210 <memchr>
 800c7a8:	b108      	cbz	r0, 800c7ae <_printf_i+0x1f2>
 800c7aa:	1b40      	subs	r0, r0, r5
 800c7ac:	6060      	str	r0, [r4, #4]
 800c7ae:	6863      	ldr	r3, [r4, #4]
 800c7b0:	6123      	str	r3, [r4, #16]
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7b8:	e7a8      	b.n	800c70c <_printf_i+0x150>
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	462a      	mov	r2, r5
 800c7be:	4649      	mov	r1, r9
 800c7c0:	4640      	mov	r0, r8
 800c7c2:	47d0      	blx	sl
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d0ab      	beq.n	800c720 <_printf_i+0x164>
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	079b      	lsls	r3, r3, #30
 800c7cc:	d413      	bmi.n	800c7f6 <_printf_i+0x23a>
 800c7ce:	68e0      	ldr	r0, [r4, #12]
 800c7d0:	9b03      	ldr	r3, [sp, #12]
 800c7d2:	4298      	cmp	r0, r3
 800c7d4:	bfb8      	it	lt
 800c7d6:	4618      	movlt	r0, r3
 800c7d8:	e7a4      	b.n	800c724 <_printf_i+0x168>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	4632      	mov	r2, r6
 800c7de:	4649      	mov	r1, r9
 800c7e0:	4640      	mov	r0, r8
 800c7e2:	47d0      	blx	sl
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d09b      	beq.n	800c720 <_printf_i+0x164>
 800c7e8:	3501      	adds	r5, #1
 800c7ea:	68e3      	ldr	r3, [r4, #12]
 800c7ec:	9903      	ldr	r1, [sp, #12]
 800c7ee:	1a5b      	subs	r3, r3, r1
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	dcf2      	bgt.n	800c7da <_printf_i+0x21e>
 800c7f4:	e7eb      	b.n	800c7ce <_printf_i+0x212>
 800c7f6:	2500      	movs	r5, #0
 800c7f8:	f104 0619 	add.w	r6, r4, #25
 800c7fc:	e7f5      	b.n	800c7ea <_printf_i+0x22e>
 800c7fe:	bf00      	nop
 800c800:	0800ff51 	.word	0x0800ff51
 800c804:	0800ff62 	.word	0x0800ff62

0800c808 <_scanf_chars>:
 800c808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c80c:	4615      	mov	r5, r2
 800c80e:	688a      	ldr	r2, [r1, #8]
 800c810:	4680      	mov	r8, r0
 800c812:	460c      	mov	r4, r1
 800c814:	b932      	cbnz	r2, 800c824 <_scanf_chars+0x1c>
 800c816:	698a      	ldr	r2, [r1, #24]
 800c818:	2a00      	cmp	r2, #0
 800c81a:	bf0c      	ite	eq
 800c81c:	2201      	moveq	r2, #1
 800c81e:	f04f 32ff 	movne.w	r2, #4294967295
 800c822:	608a      	str	r2, [r1, #8]
 800c824:	6822      	ldr	r2, [r4, #0]
 800c826:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c8b8 <_scanf_chars+0xb0>
 800c82a:	06d1      	lsls	r1, r2, #27
 800c82c:	bf5f      	itttt	pl
 800c82e:	681a      	ldrpl	r2, [r3, #0]
 800c830:	1d11      	addpl	r1, r2, #4
 800c832:	6019      	strpl	r1, [r3, #0]
 800c834:	6816      	ldrpl	r6, [r2, #0]
 800c836:	2700      	movs	r7, #0
 800c838:	69a0      	ldr	r0, [r4, #24]
 800c83a:	b188      	cbz	r0, 800c860 <_scanf_chars+0x58>
 800c83c:	2801      	cmp	r0, #1
 800c83e:	d107      	bne.n	800c850 <_scanf_chars+0x48>
 800c840:	682a      	ldr	r2, [r5, #0]
 800c842:	7811      	ldrb	r1, [r2, #0]
 800c844:	6962      	ldr	r2, [r4, #20]
 800c846:	5c52      	ldrb	r2, [r2, r1]
 800c848:	b952      	cbnz	r2, 800c860 <_scanf_chars+0x58>
 800c84a:	2f00      	cmp	r7, #0
 800c84c:	d031      	beq.n	800c8b2 <_scanf_chars+0xaa>
 800c84e:	e022      	b.n	800c896 <_scanf_chars+0x8e>
 800c850:	2802      	cmp	r0, #2
 800c852:	d120      	bne.n	800c896 <_scanf_chars+0x8e>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c85c:	071b      	lsls	r3, r3, #28
 800c85e:	d41a      	bmi.n	800c896 <_scanf_chars+0x8e>
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	06da      	lsls	r2, r3, #27
 800c864:	bf5e      	ittt	pl
 800c866:	682b      	ldrpl	r3, [r5, #0]
 800c868:	781b      	ldrbpl	r3, [r3, #0]
 800c86a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c86e:	682a      	ldr	r2, [r5, #0]
 800c870:	686b      	ldr	r3, [r5, #4]
 800c872:	3201      	adds	r2, #1
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	68a2      	ldr	r2, [r4, #8]
 800c878:	3b01      	subs	r3, #1
 800c87a:	3a01      	subs	r2, #1
 800c87c:	606b      	str	r3, [r5, #4]
 800c87e:	3701      	adds	r7, #1
 800c880:	60a2      	str	r2, [r4, #8]
 800c882:	b142      	cbz	r2, 800c896 <_scanf_chars+0x8e>
 800c884:	2b00      	cmp	r3, #0
 800c886:	dcd7      	bgt.n	800c838 <_scanf_chars+0x30>
 800c888:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c88c:	4629      	mov	r1, r5
 800c88e:	4640      	mov	r0, r8
 800c890:	4798      	blx	r3
 800c892:	2800      	cmp	r0, #0
 800c894:	d0d0      	beq.n	800c838 <_scanf_chars+0x30>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	f013 0310 	ands.w	r3, r3, #16
 800c89c:	d105      	bne.n	800c8aa <_scanf_chars+0xa2>
 800c89e:	68e2      	ldr	r2, [r4, #12]
 800c8a0:	3201      	adds	r2, #1
 800c8a2:	60e2      	str	r2, [r4, #12]
 800c8a4:	69a2      	ldr	r2, [r4, #24]
 800c8a6:	b102      	cbz	r2, 800c8aa <_scanf_chars+0xa2>
 800c8a8:	7033      	strb	r3, [r6, #0]
 800c8aa:	6923      	ldr	r3, [r4, #16]
 800c8ac:	443b      	add	r3, r7
 800c8ae:	6123      	str	r3, [r4, #16]
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b6:	bf00      	nop
 800c8b8:	0800ff8f 	.word	0x0800ff8f

0800c8bc <_scanf_i>:
 800c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c0:	4698      	mov	r8, r3
 800c8c2:	4b76      	ldr	r3, [pc, #472]	; (800ca9c <_scanf_i+0x1e0>)
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	4682      	mov	sl, r0
 800c8c8:	4616      	mov	r6, r2
 800c8ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	ab03      	add	r3, sp, #12
 800c8d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c8d6:	4b72      	ldr	r3, [pc, #456]	; (800caa0 <_scanf_i+0x1e4>)
 800c8d8:	69a1      	ldr	r1, [r4, #24]
 800c8da:	4a72      	ldr	r2, [pc, #456]	; (800caa4 <_scanf_i+0x1e8>)
 800c8dc:	2903      	cmp	r1, #3
 800c8de:	bf18      	it	ne
 800c8e0:	461a      	movne	r2, r3
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	9201      	str	r2, [sp, #4]
 800c8e6:	1e5a      	subs	r2, r3, #1
 800c8e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c8ec:	bf88      	it	hi
 800c8ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c8f2:	4627      	mov	r7, r4
 800c8f4:	bf82      	ittt	hi
 800c8f6:	eb03 0905 	addhi.w	r9, r3, r5
 800c8fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c8fe:	60a3      	strhi	r3, [r4, #8]
 800c900:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c904:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c908:	bf98      	it	ls
 800c90a:	f04f 0900 	movls.w	r9, #0
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	463d      	mov	r5, r7
 800c912:	f04f 0b00 	mov.w	fp, #0
 800c916:	6831      	ldr	r1, [r6, #0]
 800c918:	ab03      	add	r3, sp, #12
 800c91a:	7809      	ldrb	r1, [r1, #0]
 800c91c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c920:	2202      	movs	r2, #2
 800c922:	f7f3 fc75 	bl	8000210 <memchr>
 800c926:	b328      	cbz	r0, 800c974 <_scanf_i+0xb8>
 800c928:	f1bb 0f01 	cmp.w	fp, #1
 800c92c:	d159      	bne.n	800c9e2 <_scanf_i+0x126>
 800c92e:	6862      	ldr	r2, [r4, #4]
 800c930:	b92a      	cbnz	r2, 800c93e <_scanf_i+0x82>
 800c932:	6822      	ldr	r2, [r4, #0]
 800c934:	2308      	movs	r3, #8
 800c936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c93a:	6063      	str	r3, [r4, #4]
 800c93c:	6022      	str	r2, [r4, #0]
 800c93e:	6822      	ldr	r2, [r4, #0]
 800c940:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c944:	6022      	str	r2, [r4, #0]
 800c946:	68a2      	ldr	r2, [r4, #8]
 800c948:	1e51      	subs	r1, r2, #1
 800c94a:	60a1      	str	r1, [r4, #8]
 800c94c:	b192      	cbz	r2, 800c974 <_scanf_i+0xb8>
 800c94e:	6832      	ldr	r2, [r6, #0]
 800c950:	1c51      	adds	r1, r2, #1
 800c952:	6031      	str	r1, [r6, #0]
 800c954:	7812      	ldrb	r2, [r2, #0]
 800c956:	f805 2b01 	strb.w	r2, [r5], #1
 800c95a:	6872      	ldr	r2, [r6, #4]
 800c95c:	3a01      	subs	r2, #1
 800c95e:	2a00      	cmp	r2, #0
 800c960:	6072      	str	r2, [r6, #4]
 800c962:	dc07      	bgt.n	800c974 <_scanf_i+0xb8>
 800c964:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c968:	4631      	mov	r1, r6
 800c96a:	4650      	mov	r0, sl
 800c96c:	4790      	blx	r2
 800c96e:	2800      	cmp	r0, #0
 800c970:	f040 8085 	bne.w	800ca7e <_scanf_i+0x1c2>
 800c974:	f10b 0b01 	add.w	fp, fp, #1
 800c978:	f1bb 0f03 	cmp.w	fp, #3
 800c97c:	d1cb      	bne.n	800c916 <_scanf_i+0x5a>
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	b90b      	cbnz	r3, 800c986 <_scanf_i+0xca>
 800c982:	230a      	movs	r3, #10
 800c984:	6063      	str	r3, [r4, #4]
 800c986:	6863      	ldr	r3, [r4, #4]
 800c988:	4947      	ldr	r1, [pc, #284]	; (800caa8 <_scanf_i+0x1ec>)
 800c98a:	6960      	ldr	r0, [r4, #20]
 800c98c:	1ac9      	subs	r1, r1, r3
 800c98e:	f000 f8af 	bl	800caf0 <__sccl>
 800c992:	f04f 0b00 	mov.w	fp, #0
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	6822      	ldr	r2, [r4, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d03d      	beq.n	800ca1a <_scanf_i+0x15e>
 800c99e:	6831      	ldr	r1, [r6, #0]
 800c9a0:	6960      	ldr	r0, [r4, #20]
 800c9a2:	f891 c000 	ldrb.w	ip, [r1]
 800c9a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d035      	beq.n	800ca1a <_scanf_i+0x15e>
 800c9ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c9b2:	d124      	bne.n	800c9fe <_scanf_i+0x142>
 800c9b4:	0510      	lsls	r0, r2, #20
 800c9b6:	d522      	bpl.n	800c9fe <_scanf_i+0x142>
 800c9b8:	f10b 0b01 	add.w	fp, fp, #1
 800c9bc:	f1b9 0f00 	cmp.w	r9, #0
 800c9c0:	d003      	beq.n	800c9ca <_scanf_i+0x10e>
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c9c8:	60a3      	str	r3, [r4, #8]
 800c9ca:	6873      	ldr	r3, [r6, #4]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	6073      	str	r3, [r6, #4]
 800c9d2:	dd1b      	ble.n	800ca0c <_scanf_i+0x150>
 800c9d4:	6833      	ldr	r3, [r6, #0]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	6033      	str	r3, [r6, #0]
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	60a3      	str	r3, [r4, #8]
 800c9e0:	e7d9      	b.n	800c996 <_scanf_i+0xda>
 800c9e2:	f1bb 0f02 	cmp.w	fp, #2
 800c9e6:	d1ae      	bne.n	800c946 <_scanf_i+0x8a>
 800c9e8:	6822      	ldr	r2, [r4, #0]
 800c9ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c9ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c9f2:	d1bf      	bne.n	800c974 <_scanf_i+0xb8>
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	6063      	str	r3, [r4, #4]
 800c9f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9fc:	e7a2      	b.n	800c944 <_scanf_i+0x88>
 800c9fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	780b      	ldrb	r3, [r1, #0]
 800ca06:	f805 3b01 	strb.w	r3, [r5], #1
 800ca0a:	e7de      	b.n	800c9ca <_scanf_i+0x10e>
 800ca0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca10:	4631      	mov	r1, r6
 800ca12:	4650      	mov	r0, sl
 800ca14:	4798      	blx	r3
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d0df      	beq.n	800c9da <_scanf_i+0x11e>
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	05db      	lsls	r3, r3, #23
 800ca1e:	d50d      	bpl.n	800ca3c <_scanf_i+0x180>
 800ca20:	42bd      	cmp	r5, r7
 800ca22:	d909      	bls.n	800ca38 <_scanf_i+0x17c>
 800ca24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	4650      	mov	r0, sl
 800ca30:	4798      	blx	r3
 800ca32:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca36:	464d      	mov	r5, r9
 800ca38:	42bd      	cmp	r5, r7
 800ca3a:	d02d      	beq.n	800ca98 <_scanf_i+0x1dc>
 800ca3c:	6822      	ldr	r2, [r4, #0]
 800ca3e:	f012 0210 	ands.w	r2, r2, #16
 800ca42:	d113      	bne.n	800ca6c <_scanf_i+0x1b0>
 800ca44:	702a      	strb	r2, [r5, #0]
 800ca46:	6863      	ldr	r3, [r4, #4]
 800ca48:	9e01      	ldr	r6, [sp, #4]
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	47b0      	blx	r6
 800ca50:	6821      	ldr	r1, [r4, #0]
 800ca52:	f8d8 3000 	ldr.w	r3, [r8]
 800ca56:	f011 0f20 	tst.w	r1, #32
 800ca5a:	d013      	beq.n	800ca84 <_scanf_i+0x1c8>
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	f8c8 2000 	str.w	r2, [r8]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6018      	str	r0, [r3, #0]
 800ca66:	68e3      	ldr	r3, [r4, #12]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	60e3      	str	r3, [r4, #12]
 800ca6c:	1bed      	subs	r5, r5, r7
 800ca6e:	44ab      	add	fp, r5
 800ca70:	6925      	ldr	r5, [r4, #16]
 800ca72:	445d      	add	r5, fp
 800ca74:	6125      	str	r5, [r4, #16]
 800ca76:	2000      	movs	r0, #0
 800ca78:	b007      	add	sp, #28
 800ca7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7e:	f04f 0b00 	mov.w	fp, #0
 800ca82:	e7ca      	b.n	800ca1a <_scanf_i+0x15e>
 800ca84:	1d1a      	adds	r2, r3, #4
 800ca86:	f8c8 2000 	str.w	r2, [r8]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f011 0f01 	tst.w	r1, #1
 800ca90:	bf14      	ite	ne
 800ca92:	8018      	strhne	r0, [r3, #0]
 800ca94:	6018      	streq	r0, [r3, #0]
 800ca96:	e7e6      	b.n	800ca66 <_scanf_i+0x1aa>
 800ca98:	2001      	movs	r0, #1
 800ca9a:	e7ed      	b.n	800ca78 <_scanf_i+0x1bc>
 800ca9c:	0800fe98 	.word	0x0800fe98
 800caa0:	0800cd4d 	.word	0x0800cd4d
 800caa4:	0800cc65 	.word	0x0800cc65
 800caa8:	0800ff8c 	.word	0x0800ff8c

0800caac <_read_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d07      	ldr	r5, [pc, #28]	; (800cacc <_read_r+0x20>)
 800cab0:	4604      	mov	r4, r0
 800cab2:	4608      	mov	r0, r1
 800cab4:	4611      	mov	r1, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	602a      	str	r2, [r5, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	f7f7 fc68 	bl	8004390 <_read>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_read_r+0x1e>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_read_r+0x1e>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	20003aa8 	.word	0x20003aa8

0800cad0 <_sbrk_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4d06      	ldr	r5, [pc, #24]	; (800caec <_sbrk_r+0x1c>)
 800cad4:	2300      	movs	r3, #0
 800cad6:	4604      	mov	r4, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	f7f7 fcaa 	bl	8004434 <_sbrk>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_sbrk_r+0x1a>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	b103      	cbz	r3, 800caea <_sbrk_r+0x1a>
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	20003aa8 	.word	0x20003aa8

0800caf0 <__sccl>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	780b      	ldrb	r3, [r1, #0]
 800caf4:	4604      	mov	r4, r0
 800caf6:	2b5e      	cmp	r3, #94	; 0x5e
 800caf8:	bf0b      	itete	eq
 800cafa:	784b      	ldrbeq	r3, [r1, #1]
 800cafc:	1c48      	addne	r0, r1, #1
 800cafe:	1c88      	addeq	r0, r1, #2
 800cb00:	2200      	movne	r2, #0
 800cb02:	bf08      	it	eq
 800cb04:	2201      	moveq	r2, #1
 800cb06:	1e61      	subs	r1, r4, #1
 800cb08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cb10:	42a9      	cmp	r1, r5
 800cb12:	d1fb      	bne.n	800cb0c <__sccl+0x1c>
 800cb14:	b90b      	cbnz	r3, 800cb1a <__sccl+0x2a>
 800cb16:	3801      	subs	r0, #1
 800cb18:	bd70      	pop	{r4, r5, r6, pc}
 800cb1a:	f082 0201 	eor.w	r2, r2, #1
 800cb1e:	54e2      	strb	r2, [r4, r3]
 800cb20:	4605      	mov	r5, r0
 800cb22:	4628      	mov	r0, r5
 800cb24:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cb28:	292d      	cmp	r1, #45	; 0x2d
 800cb2a:	d006      	beq.n	800cb3a <__sccl+0x4a>
 800cb2c:	295d      	cmp	r1, #93	; 0x5d
 800cb2e:	d0f3      	beq.n	800cb18 <__sccl+0x28>
 800cb30:	b909      	cbnz	r1, 800cb36 <__sccl+0x46>
 800cb32:	4628      	mov	r0, r5
 800cb34:	e7f0      	b.n	800cb18 <__sccl+0x28>
 800cb36:	460b      	mov	r3, r1
 800cb38:	e7f1      	b.n	800cb1e <__sccl+0x2e>
 800cb3a:	786e      	ldrb	r6, [r5, #1]
 800cb3c:	2e5d      	cmp	r6, #93	; 0x5d
 800cb3e:	d0fa      	beq.n	800cb36 <__sccl+0x46>
 800cb40:	42b3      	cmp	r3, r6
 800cb42:	dcf8      	bgt.n	800cb36 <__sccl+0x46>
 800cb44:	3502      	adds	r5, #2
 800cb46:	4619      	mov	r1, r3
 800cb48:	3101      	adds	r1, #1
 800cb4a:	428e      	cmp	r6, r1
 800cb4c:	5462      	strb	r2, [r4, r1]
 800cb4e:	dcfb      	bgt.n	800cb48 <__sccl+0x58>
 800cb50:	1af1      	subs	r1, r6, r3
 800cb52:	3901      	subs	r1, #1
 800cb54:	1c58      	adds	r0, r3, #1
 800cb56:	42b3      	cmp	r3, r6
 800cb58:	bfa8      	it	ge
 800cb5a:	2100      	movge	r1, #0
 800cb5c:	1843      	adds	r3, r0, r1
 800cb5e:	e7e0      	b.n	800cb22 <__sccl+0x32>

0800cb60 <_strtol_l.constprop.0>:
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb66:	d001      	beq.n	800cb6c <_strtol_l.constprop.0+0xc>
 800cb68:	2b24      	cmp	r3, #36	; 0x24
 800cb6a:	d906      	bls.n	800cb7a <_strtol_l.constprop.0+0x1a>
 800cb6c:	f7fe fabe 	bl	800b0ec <__errno>
 800cb70:	2316      	movs	r3, #22
 800cb72:	6003      	str	r3, [r0, #0]
 800cb74:	2000      	movs	r0, #0
 800cb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc60 <_strtol_l.constprop.0+0x100>
 800cb7e:	460d      	mov	r5, r1
 800cb80:	462e      	mov	r6, r5
 800cb82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb86:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cb8a:	f017 0708 	ands.w	r7, r7, #8
 800cb8e:	d1f7      	bne.n	800cb80 <_strtol_l.constprop.0+0x20>
 800cb90:	2c2d      	cmp	r4, #45	; 0x2d
 800cb92:	d132      	bne.n	800cbfa <_strtol_l.constprop.0+0x9a>
 800cb94:	782c      	ldrb	r4, [r5, #0]
 800cb96:	2701      	movs	r7, #1
 800cb98:	1cb5      	adds	r5, r6, #2
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d05b      	beq.n	800cc56 <_strtol_l.constprop.0+0xf6>
 800cb9e:	2b10      	cmp	r3, #16
 800cba0:	d109      	bne.n	800cbb6 <_strtol_l.constprop.0+0x56>
 800cba2:	2c30      	cmp	r4, #48	; 0x30
 800cba4:	d107      	bne.n	800cbb6 <_strtol_l.constprop.0+0x56>
 800cba6:	782c      	ldrb	r4, [r5, #0]
 800cba8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cbac:	2c58      	cmp	r4, #88	; 0x58
 800cbae:	d14d      	bne.n	800cc4c <_strtol_l.constprop.0+0xec>
 800cbb0:	786c      	ldrb	r4, [r5, #1]
 800cbb2:	2310      	movs	r3, #16
 800cbb4:	3502      	adds	r5, #2
 800cbb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cbba:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbbe:	f04f 0c00 	mov.w	ip, #0
 800cbc2:	fbb8 f9f3 	udiv	r9, r8, r3
 800cbc6:	4666      	mov	r6, ip
 800cbc8:	fb03 8a19 	mls	sl, r3, r9, r8
 800cbcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cbd0:	f1be 0f09 	cmp.w	lr, #9
 800cbd4:	d816      	bhi.n	800cc04 <_strtol_l.constprop.0+0xa4>
 800cbd6:	4674      	mov	r4, lr
 800cbd8:	42a3      	cmp	r3, r4
 800cbda:	dd24      	ble.n	800cc26 <_strtol_l.constprop.0+0xc6>
 800cbdc:	f1bc 0f00 	cmp.w	ip, #0
 800cbe0:	db1e      	blt.n	800cc20 <_strtol_l.constprop.0+0xc0>
 800cbe2:	45b1      	cmp	r9, r6
 800cbe4:	d31c      	bcc.n	800cc20 <_strtol_l.constprop.0+0xc0>
 800cbe6:	d101      	bne.n	800cbec <_strtol_l.constprop.0+0x8c>
 800cbe8:	45a2      	cmp	sl, r4
 800cbea:	db19      	blt.n	800cc20 <_strtol_l.constprop.0+0xc0>
 800cbec:	fb06 4603 	mla	r6, r6, r3, r4
 800cbf0:	f04f 0c01 	mov.w	ip, #1
 800cbf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbf8:	e7e8      	b.n	800cbcc <_strtol_l.constprop.0+0x6c>
 800cbfa:	2c2b      	cmp	r4, #43	; 0x2b
 800cbfc:	bf04      	itt	eq
 800cbfe:	782c      	ldrbeq	r4, [r5, #0]
 800cc00:	1cb5      	addeq	r5, r6, #2
 800cc02:	e7ca      	b.n	800cb9a <_strtol_l.constprop.0+0x3a>
 800cc04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cc08:	f1be 0f19 	cmp.w	lr, #25
 800cc0c:	d801      	bhi.n	800cc12 <_strtol_l.constprop.0+0xb2>
 800cc0e:	3c37      	subs	r4, #55	; 0x37
 800cc10:	e7e2      	b.n	800cbd8 <_strtol_l.constprop.0+0x78>
 800cc12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cc16:	f1be 0f19 	cmp.w	lr, #25
 800cc1a:	d804      	bhi.n	800cc26 <_strtol_l.constprop.0+0xc6>
 800cc1c:	3c57      	subs	r4, #87	; 0x57
 800cc1e:	e7db      	b.n	800cbd8 <_strtol_l.constprop.0+0x78>
 800cc20:	f04f 3cff 	mov.w	ip, #4294967295
 800cc24:	e7e6      	b.n	800cbf4 <_strtol_l.constprop.0+0x94>
 800cc26:	f1bc 0f00 	cmp.w	ip, #0
 800cc2a:	da05      	bge.n	800cc38 <_strtol_l.constprop.0+0xd8>
 800cc2c:	2322      	movs	r3, #34	; 0x22
 800cc2e:	6003      	str	r3, [r0, #0]
 800cc30:	4646      	mov	r6, r8
 800cc32:	b942      	cbnz	r2, 800cc46 <_strtol_l.constprop.0+0xe6>
 800cc34:	4630      	mov	r0, r6
 800cc36:	e79e      	b.n	800cb76 <_strtol_l.constprop.0+0x16>
 800cc38:	b107      	cbz	r7, 800cc3c <_strtol_l.constprop.0+0xdc>
 800cc3a:	4276      	negs	r6, r6
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	d0f9      	beq.n	800cc34 <_strtol_l.constprop.0+0xd4>
 800cc40:	f1bc 0f00 	cmp.w	ip, #0
 800cc44:	d000      	beq.n	800cc48 <_strtol_l.constprop.0+0xe8>
 800cc46:	1e69      	subs	r1, r5, #1
 800cc48:	6011      	str	r1, [r2, #0]
 800cc4a:	e7f3      	b.n	800cc34 <_strtol_l.constprop.0+0xd4>
 800cc4c:	2430      	movs	r4, #48	; 0x30
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1b1      	bne.n	800cbb6 <_strtol_l.constprop.0+0x56>
 800cc52:	2308      	movs	r3, #8
 800cc54:	e7af      	b.n	800cbb6 <_strtol_l.constprop.0+0x56>
 800cc56:	2c30      	cmp	r4, #48	; 0x30
 800cc58:	d0a5      	beq.n	800cba6 <_strtol_l.constprop.0+0x46>
 800cc5a:	230a      	movs	r3, #10
 800cc5c:	e7ab      	b.n	800cbb6 <_strtol_l.constprop.0+0x56>
 800cc5e:	bf00      	nop
 800cc60:	0800ff8f 	.word	0x0800ff8f

0800cc64 <_strtol_r>:
 800cc64:	f7ff bf7c 	b.w	800cb60 <_strtol_l.constprop.0>

0800cc68 <_strtoul_l.constprop.0>:
 800cc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	4f36      	ldr	r7, [pc, #216]	; (800cd48 <_strtoul_l.constprop.0+0xe0>)
 800cc6e:	4686      	mov	lr, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	4628      	mov	r0, r5
 800cc74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc78:	5de6      	ldrb	r6, [r4, r7]
 800cc7a:	f016 0608 	ands.w	r6, r6, #8
 800cc7e:	d1f8      	bne.n	800cc72 <_strtoul_l.constprop.0+0xa>
 800cc80:	2c2d      	cmp	r4, #45	; 0x2d
 800cc82:	d12f      	bne.n	800cce4 <_strtoul_l.constprop.0+0x7c>
 800cc84:	782c      	ldrb	r4, [r5, #0]
 800cc86:	2601      	movs	r6, #1
 800cc88:	1c85      	adds	r5, r0, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d057      	beq.n	800cd3e <_strtoul_l.constprop.0+0xd6>
 800cc8e:	2b10      	cmp	r3, #16
 800cc90:	d109      	bne.n	800cca6 <_strtoul_l.constprop.0+0x3e>
 800cc92:	2c30      	cmp	r4, #48	; 0x30
 800cc94:	d107      	bne.n	800cca6 <_strtoul_l.constprop.0+0x3e>
 800cc96:	7828      	ldrb	r0, [r5, #0]
 800cc98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc9c:	2858      	cmp	r0, #88	; 0x58
 800cc9e:	d149      	bne.n	800cd34 <_strtoul_l.constprop.0+0xcc>
 800cca0:	786c      	ldrb	r4, [r5, #1]
 800cca2:	2310      	movs	r3, #16
 800cca4:	3502      	adds	r5, #2
 800cca6:	f04f 38ff 	mov.w	r8, #4294967295
 800ccaa:	2700      	movs	r7, #0
 800ccac:	fbb8 f8f3 	udiv	r8, r8, r3
 800ccb0:	fb03 f908 	mul.w	r9, r3, r8
 800ccb4:	ea6f 0909 	mvn.w	r9, r9
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ccbe:	f1bc 0f09 	cmp.w	ip, #9
 800ccc2:	d814      	bhi.n	800ccee <_strtoul_l.constprop.0+0x86>
 800ccc4:	4664      	mov	r4, ip
 800ccc6:	42a3      	cmp	r3, r4
 800ccc8:	dd22      	ble.n	800cd10 <_strtoul_l.constprop.0+0xa8>
 800ccca:	2f00      	cmp	r7, #0
 800cccc:	db1d      	blt.n	800cd0a <_strtoul_l.constprop.0+0xa2>
 800ccce:	4580      	cmp	r8, r0
 800ccd0:	d31b      	bcc.n	800cd0a <_strtoul_l.constprop.0+0xa2>
 800ccd2:	d101      	bne.n	800ccd8 <_strtoul_l.constprop.0+0x70>
 800ccd4:	45a1      	cmp	r9, r4
 800ccd6:	db18      	blt.n	800cd0a <_strtoul_l.constprop.0+0xa2>
 800ccd8:	fb00 4003 	mla	r0, r0, r3, r4
 800ccdc:	2701      	movs	r7, #1
 800ccde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cce2:	e7ea      	b.n	800ccba <_strtoul_l.constprop.0+0x52>
 800cce4:	2c2b      	cmp	r4, #43	; 0x2b
 800cce6:	bf04      	itt	eq
 800cce8:	782c      	ldrbeq	r4, [r5, #0]
 800ccea:	1c85      	addeq	r5, r0, #2
 800ccec:	e7cd      	b.n	800cc8a <_strtoul_l.constprop.0+0x22>
 800ccee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ccf2:	f1bc 0f19 	cmp.w	ip, #25
 800ccf6:	d801      	bhi.n	800ccfc <_strtoul_l.constprop.0+0x94>
 800ccf8:	3c37      	subs	r4, #55	; 0x37
 800ccfa:	e7e4      	b.n	800ccc6 <_strtoul_l.constprop.0+0x5e>
 800ccfc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cd00:	f1bc 0f19 	cmp.w	ip, #25
 800cd04:	d804      	bhi.n	800cd10 <_strtoul_l.constprop.0+0xa8>
 800cd06:	3c57      	subs	r4, #87	; 0x57
 800cd08:	e7dd      	b.n	800ccc6 <_strtoul_l.constprop.0+0x5e>
 800cd0a:	f04f 37ff 	mov.w	r7, #4294967295
 800cd0e:	e7e6      	b.n	800ccde <_strtoul_l.constprop.0+0x76>
 800cd10:	2f00      	cmp	r7, #0
 800cd12:	da07      	bge.n	800cd24 <_strtoul_l.constprop.0+0xbc>
 800cd14:	2322      	movs	r3, #34	; 0x22
 800cd16:	f8ce 3000 	str.w	r3, [lr]
 800cd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1e:	b932      	cbnz	r2, 800cd2e <_strtoul_l.constprop.0+0xc6>
 800cd20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd24:	b106      	cbz	r6, 800cd28 <_strtoul_l.constprop.0+0xc0>
 800cd26:	4240      	negs	r0, r0
 800cd28:	2a00      	cmp	r2, #0
 800cd2a:	d0f9      	beq.n	800cd20 <_strtoul_l.constprop.0+0xb8>
 800cd2c:	b107      	cbz	r7, 800cd30 <_strtoul_l.constprop.0+0xc8>
 800cd2e:	1e69      	subs	r1, r5, #1
 800cd30:	6011      	str	r1, [r2, #0]
 800cd32:	e7f5      	b.n	800cd20 <_strtoul_l.constprop.0+0xb8>
 800cd34:	2430      	movs	r4, #48	; 0x30
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1b5      	bne.n	800cca6 <_strtoul_l.constprop.0+0x3e>
 800cd3a:	2308      	movs	r3, #8
 800cd3c:	e7b3      	b.n	800cca6 <_strtoul_l.constprop.0+0x3e>
 800cd3e:	2c30      	cmp	r4, #48	; 0x30
 800cd40:	d0a9      	beq.n	800cc96 <_strtoul_l.constprop.0+0x2e>
 800cd42:	230a      	movs	r3, #10
 800cd44:	e7af      	b.n	800cca6 <_strtoul_l.constprop.0+0x3e>
 800cd46:	bf00      	nop
 800cd48:	0800ff8f 	.word	0x0800ff8f

0800cd4c <_strtoul_r>:
 800cd4c:	f7ff bf8c 	b.w	800cc68 <_strtoul_l.constprop.0>

0800cd50 <__submore>:
 800cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	460c      	mov	r4, r1
 800cd56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	d11d      	bne.n	800cd9c <__submore+0x4c>
 800cd60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cd64:	f7fe fec0 	bl	800bae8 <_malloc_r>
 800cd68:	b918      	cbnz	r0, 800cd72 <__submore+0x22>
 800cd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd76:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd78:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cd7c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd7e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cd82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd86:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cd8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd8e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cd92:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cd96:	6020      	str	r0, [r4, #0]
 800cd98:	2000      	movs	r0, #0
 800cd9a:	e7e8      	b.n	800cd6e <__submore+0x1e>
 800cd9c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cd9e:	0077      	lsls	r7, r6, #1
 800cda0:	463a      	mov	r2, r7
 800cda2:	f000 f857 	bl	800ce54 <_realloc_r>
 800cda6:	4605      	mov	r5, r0
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d0de      	beq.n	800cd6a <__submore+0x1a>
 800cdac:	eb00 0806 	add.w	r8, r0, r6
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	4632      	mov	r2, r6
 800cdb4:	4640      	mov	r0, r8
 800cdb6:	f7fe f9c3 	bl	800b140 <memcpy>
 800cdba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cdbe:	f8c4 8000 	str.w	r8, [r4]
 800cdc2:	e7e9      	b.n	800cd98 <__submore+0x48>

0800cdc4 <_fstat_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4d07      	ldr	r5, [pc, #28]	; (800cde4 <_fstat_r+0x20>)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4604      	mov	r4, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	4611      	mov	r1, r2
 800cdd0:	602b      	str	r3, [r5, #0]
 800cdd2:	f7f7 fb06 	bl	80043e2 <_fstat>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d102      	bne.n	800cde0 <_fstat_r+0x1c>
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	b103      	cbz	r3, 800cde0 <_fstat_r+0x1c>
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	20003aa8 	.word	0x20003aa8

0800cde8 <_isatty_r>:
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	4d06      	ldr	r5, [pc, #24]	; (800ce04 <_isatty_r+0x1c>)
 800cdec:	2300      	movs	r3, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	4608      	mov	r0, r1
 800cdf2:	602b      	str	r3, [r5, #0]
 800cdf4:	f7f7 fb05 	bl	8004402 <_isatty>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d102      	bne.n	800ce02 <_isatty_r+0x1a>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	b103      	cbz	r3, 800ce02 <_isatty_r+0x1a>
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	20003aa8 	.word	0x20003aa8

0800ce08 <memmove>:
 800ce08:	4288      	cmp	r0, r1
 800ce0a:	b510      	push	{r4, lr}
 800ce0c:	eb01 0402 	add.w	r4, r1, r2
 800ce10:	d902      	bls.n	800ce18 <memmove+0x10>
 800ce12:	4284      	cmp	r4, r0
 800ce14:	4623      	mov	r3, r4
 800ce16:	d807      	bhi.n	800ce28 <memmove+0x20>
 800ce18:	1e43      	subs	r3, r0, #1
 800ce1a:	42a1      	cmp	r1, r4
 800ce1c:	d008      	beq.n	800ce30 <memmove+0x28>
 800ce1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce26:	e7f8      	b.n	800ce1a <memmove+0x12>
 800ce28:	4402      	add	r2, r0
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	428a      	cmp	r2, r1
 800ce2e:	d100      	bne.n	800ce32 <memmove+0x2a>
 800ce30:	bd10      	pop	{r4, pc}
 800ce32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce3a:	e7f7      	b.n	800ce2c <memmove+0x24>

0800ce3c <__malloc_lock>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__malloc_lock+0x8>)
 800ce3e:	f7fe bd6d 	b.w	800b91c <__retarget_lock_acquire_recursive>
 800ce42:	bf00      	nop
 800ce44:	20003a9c 	.word	0x20003a9c

0800ce48 <__malloc_unlock>:
 800ce48:	4801      	ldr	r0, [pc, #4]	; (800ce50 <__malloc_unlock+0x8>)
 800ce4a:	f7fe bd68 	b.w	800b91e <__retarget_lock_release_recursive>
 800ce4e:	bf00      	nop
 800ce50:	20003a9c 	.word	0x20003a9c

0800ce54 <_realloc_r>:
 800ce54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce58:	4680      	mov	r8, r0
 800ce5a:	4614      	mov	r4, r2
 800ce5c:	460e      	mov	r6, r1
 800ce5e:	b921      	cbnz	r1, 800ce6a <_realloc_r+0x16>
 800ce60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	4611      	mov	r1, r2
 800ce66:	f7fe be3f 	b.w	800bae8 <_malloc_r>
 800ce6a:	b92a      	cbnz	r2, 800ce78 <_realloc_r+0x24>
 800ce6c:	f7fe fdd0 	bl	800ba10 <_free_r>
 800ce70:	4625      	mov	r5, r4
 800ce72:	4628      	mov	r0, r5
 800ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce78:	f000 f81b 	bl	800ceb2 <_malloc_usable_size_r>
 800ce7c:	4284      	cmp	r4, r0
 800ce7e:	4607      	mov	r7, r0
 800ce80:	d802      	bhi.n	800ce88 <_realloc_r+0x34>
 800ce82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce86:	d812      	bhi.n	800ceae <_realloc_r+0x5a>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7fe fe2c 	bl	800bae8 <_malloc_r>
 800ce90:	4605      	mov	r5, r0
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d0ed      	beq.n	800ce72 <_realloc_r+0x1e>
 800ce96:	42bc      	cmp	r4, r7
 800ce98:	4622      	mov	r2, r4
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	bf28      	it	cs
 800ce9e:	463a      	movcs	r2, r7
 800cea0:	f7fe f94e 	bl	800b140 <memcpy>
 800cea4:	4631      	mov	r1, r6
 800cea6:	4640      	mov	r0, r8
 800cea8:	f7fe fdb2 	bl	800ba10 <_free_r>
 800ceac:	e7e1      	b.n	800ce72 <_realloc_r+0x1e>
 800ceae:	4635      	mov	r5, r6
 800ceb0:	e7df      	b.n	800ce72 <_realloc_r+0x1e>

0800ceb2 <_malloc_usable_size_r>:
 800ceb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceb6:	1f18      	subs	r0, r3, #4
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	bfbc      	itt	lt
 800cebc:	580b      	ldrlt	r3, [r1, r0]
 800cebe:	18c0      	addlt	r0, r0, r3
 800cec0:	4770      	bx	lr
	...

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
